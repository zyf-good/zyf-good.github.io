<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android Kotlin 协程（coroutine）入门篇</title>
    <url>/2022/03/24/Android-Kotlin-%E5%8D%8F%E7%A8%8B%EF%BC%88coroutine-%EF%BC%89%E5%85%A5%E9%97%A8%E7%AF%87/Android-Kotlin-%E5%8D%8F%E7%A8%8B%EF%BC%88coroutine-%EF%BC%89%E5%85%A5%E9%97%A8%E7%AF%87/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>ps：文章会很长</code></p>
<p>协同程序（coroutine﻿）实在是太好用了，所以我们来学习吧！本篇文章会通过解读kotlin官方文档和android  development文档来一步一步认识Kotlin 协程，没有Kotlin 基础的小伙伴建议先学习下 Kotlin 哦。</p>
<hr>
<h1 id="一、协程基础"><a href="#一、协程基础" class="headerlink" title="一、协程基础"></a>一、协程基础</h1><p>本节介绍协程基本的概念。下面这些都是kotlin官方的例子，非常经典。</p>
<blockquote>
<p>依赖和权限</p>
</blockquote>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//依赖</span></span><br><span class="line"> implementation(<span class="string">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9&quot;</span>)</span><br><span class="line">      <span class="comment">//retrofit</span></span><br><span class="line">    api <span class="string">&#x27;com.squareup.retrofit2:retrofit:2.6.0&#x27;</span></span><br><span class="line">    api <span class="string">&#x27;com.squareup.retrofit2:converter-gson:2.6.0&#x27;</span></span><br><span class="line">    api <span class="string">&#x27;com.squareup.retrofit2:adapter-rxjava2:2.6.0&#x27;</span></span><br><span class="line">    api <span class="string">&#x27;com.trello.rxlifecycle2:rxlifecycle-components:2.6.1&#x27;</span></span><br><span class="line">    api <span class="string">&#x27;com.facebook.stetho:stetho:1.5.0&#x27;</span></span><br><span class="line">    api <span class="string">&#x27;com.facebook.stetho:stetho-okhttp3:1.5.0&#x27;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//权限</span></span><br><span class="line"> &lt;!-- 访问网络的权限 --&gt;</span><br><span class="line">    &lt;uses-permission android:name=<span class="string">&quot;android.permission.INTERNET&quot;</span>&gt;&lt;/uses-permission&gt;</span><br></pre></td></tr></table></figure></div>



<h2 id="第一个协程"><a href="#第一个协程" class="headerlink" title="第一个协程"></a>第一个协程</h2><p>协程是可暂停计算的一个实例。它在概念上类似于线程，它需要一个代码块来运行，该代码块与其余代码同时工作。然而，协程并不绑定到任何特定的线程。它可以在一个线程中暂停执行，在另一个线程中恢复。<br>协同程序可以被认为是轻量级的线程，但是有许多重要的区别，使得它们在现实生活中的使用与线程非常不同。<br>下面这个代码示例将是我们的第一个协程</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123; <span class="comment">// this: CoroutineScope  </span></span><br><span class="line">	<span class="comment">// launch a new coroutine and continue  启动一个新的协程并连接</span></span><br><span class="line">    launch &#123; </span><br><span class="line">    <span class="comment">// non-blocking delay for 1 second (default time unit is ms)延时一秒</span></span><br><span class="line">        delay(<span class="number">1000L</span>) </span><br><span class="line">        <span class="comment">// print after delay 延时后打印</span></span><br><span class="line">        println(<span class="string">&quot;World!&quot;</span>) </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 主线程中的&quot;Hello&quot;继续执行，而&quot;World!&quot;延时后打印</span></span><br><span class="line">    println(<span class="string">&quot;Hello&quot;</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>不出意料，我们会得到这样的结果：</p>
<blockquote>
<p>Hello<br>World!</p>
</blockquote>
<p>从这个结果来看，这确实和线程很像不是吗？下面我们来分析上面的代码</p>
<p><em><strong>launch</strong></em><br>是一个协程构建者。它与代码的其余部分同时启动一个新的协程，该程序将继续独立工作。这就是为什么Hello首先被打印出来。<br><em><strong>delay</strong></em><br>是一种特殊的暂停功能。它会在特定时间暂停协程。挂起协程，但不会阻止底层线程，允许其他协程运行并将底层线程用于其代码。可以与线程中的sleep()相互印证以便记忆（并不是说可以等价哦）<br><em><strong>runBlocking</strong></em><br>也是一个协程构建器，它将常规的fun main（）的非协程与runBlocking{…}内部的协同程序代码连接起来。在IDE中，在runBlocking开头的花括号后面有一个提示：CoroutineScope。</p>
<p><code>注意：如果在这段代码中删除或忘记了runBlocking，将在启动调用中得到如下错误，因为启动只在CoroutineScope中声明：</code></p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line">Unresolved reference: launch</span><br></pre></td></tr></table></figure></div>
<p>runBlocking的名称意味着运行它的线程（在本例中是主线程）在调用期间被阻塞，直到runBlocking{…}中的所有协程被阻塞完成他们的代码逻辑。您经常会看到在最上层的应用程序像这样使用runBlocking，而在真正的代码中很少使用，因为线程是昂贵的资源，阻塞它们是低效的，而且通常是不需要的。</p>
<h3 id="结构化并发"><a href="#结构化并发" class="headerlink" title="结构化并发"></a>结构化并发</h3><p>协同路由遵循结构化并发原则，这意味着新的协同路由只能在限定协同路由生存期的特定协同路由作用域中启动。上面的例子显示runBlocking建立了相应的作用域，这就是为什么前面的例子要等到World！延迟一秒钟后打印，然后退出。</p>
<p>在实际应用程序中，将启动许多协同程序。结构化并发确保它们不会丢失，也不会泄漏。外部作用域在其所有子协同程序完成之前无法完成。结构化并发还可以确保正确报告代码中的任何错误，并且永远不会丢失。</p>
<h2 id="挂起函数-suspend"><a href="#挂起函数-suspend" class="headerlink" title="挂起函数 suspend"></a>挂起函数 suspend</h2><p>上诉仅仅是一个最基础的协同程序，我们可以提取launch{…}中的代码块变成一个单独的函数。当你对这段代码执行“提取函数”重构时（就是alt+enter啦），你会得到一个带有suspend修饰符的新函数（挂起函数）。这是你的第一个暂停功能。挂起函数可以像常规函数一样在协同路由中使用，也可以反过来使用其他挂起函数（如本例中的延迟）来挂起协同路由的执行。</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123; <span class="comment">// this: CoroutineScope</span></span><br><span class="line">    launch &#123; doWorld() &#125;</span><br><span class="line">    println(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is your first suspending function</span></span><br><span class="line"><span class="comment">//第一个挂起函数</span></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">doWorld</span><span class="params">()</span></span> &#123;</span><br><span class="line">    delay(<span class="number">1000L</span>)</span><br><span class="line">    println(<span class="string">&quot;World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>同样得到如下结果</p>
<blockquote>
<p>Hello<br>World!</p>
</blockquote>
<h2 id="范围构造器-Scope-builder"><a href="#范围构造器-Scope-builder" class="headerlink" title="范围构造器 Scope builder"></a>范围构造器 Scope builder</h2><p>除了不同构建器提供的协同程序作用域之外，还可以使用协同程序作用域构建器声明自己的作用域。它创建了一个协程作用域，直到所有启动的子项都完成后才会完成。</p>
<p>runBlocking和coroutineScope的构建者可能看起来很相似，因为他们都在等待自己的主体和所有子项的完成。主要区别在于runBlocking方法阻塞当前线程等待，而coroutineScope只是暂停，释放底层线程供其他使用。由于这种差异，runBlocking是一个常规函数，而coroutineScope是一个挂起函数。</p>
<p>我们可以从任何挂起函数使用coroutineScope。例如，可以将Hello和World的并发打印移动到suspend fun doWorld（）函数中：</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    doWorld()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">doWorld</span><span class="params">()</span></span> = coroutineScope &#123;  <span class="comment">// this: CoroutineScope</span></span><br><span class="line">    launch &#123;</span><br><span class="line">        delay(<span class="number">1000L</span>)</span><br><span class="line">        println(<span class="string">&quot;World!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>同样的结果：</p>
<blockquote>
<p>Hello<br>World!</p>
</blockquote>
<h2 id="范围构造器-Scope-builder-和-并发-concurrency"><a href="#范围构造器-Scope-builder-和-并发-concurrency" class="headerlink" title="范围构造器 Scope builder 和 并发 concurrency"></a>范围构造器 Scope builder 和 并发 concurrency</h2><p>范围构造器 可以在任何挂起函数中使用，以执行多个并发操作。让我们在doWorld挂起函数中启动两个并发协同路由：</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sequentially executes doWorld followed by &quot;Done&quot;</span></span><br><span class="line"><span class="comment">//顺序执行</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    doWorld()</span><br><span class="line">    println(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Concurrently executes both sections</span></span><br><span class="line"><span class="comment">//同时执行两个部分</span></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">doWorld</span><span class="params">()</span></span> = coroutineScope &#123; <span class="comment">// this: CoroutineScope</span></span><br><span class="line">    launch &#123;</span><br><span class="line">        delay(<span class="number">2000L</span>)</span><br><span class="line">        println(<span class="string">&quot;World 2&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    launch &#123;</span><br><span class="line">        delay(<span class="number">1000L</span>)</span><br><span class="line">        println(<span class="string">&quot;World 1&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>launch {…}中的两段代码块同时执行，从开始一秒后，首先打印World 1，从开始两秒后打印World 2。doWorld中的一个coroutineScope只有在两者都完成后才能完成，因此doWorld返回并允许仅在完成后打印Done字符串：</p>
<blockquote>
<p>Hello<br>World 1<br>World 2<br>Done</p>
</blockquote>
<h2 id="job"><a href="#job" class="headerlink" title="job"></a>job</h2><p> launch协程构造器返回一个job对象，该对象是启动协同程序的句柄，可用于显式等待其完成。例如，您可以等待子协同程序完成，然后打印“Done”字符串：</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> job = launch &#123; </span><br><span class="line">    <span class="comment">// launch a new coroutine and keep a reference to its Job</span></span><br><span class="line">    <span class="comment">//启动一个新的协同程序，并保留对其工作的引用</span></span><br><span class="line">        delay(<span class="number">1000L</span>)</span><br><span class="line">        println(<span class="string">&quot;World!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">    <span class="comment">// wait until child coroutine completes</span></span><br><span class="line">    <span class="comment">//等待子协同程序完成</span></span><br><span class="line">    job.join() </span><br><span class="line">    println(<span class="string">&quot;Done&quot;</span>)     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>结果如下：</p>
<blockquote>
<p>Hello<br>World!<br>Done</p>
</blockquote>
<h2 id="轻量级"><a href="#轻量级" class="headerlink" title="轻量级"></a>轻量级</h2><p>我们有如下示例代码：</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line"><span class="comment">//sampleStart</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    repeat(<span class="number">100_000</span>) &#123; <span class="comment">// launch a lot of coroutines</span></span><br><span class="line">        launch &#123;</span><br><span class="line">            delay(<span class="number">5000L</span>)</span><br><span class="line">            print(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//sampleEnd</span></span><br></pre></td></tr></table></figure></div>
<p>它会启动10万个协程，5秒后，每个协同程序都会打印一个点。<br>但是，如果我们用线程试试（删除runBlocking，用thread替换launch，用thread.sleep替换delay）。会发生什么？（<em><strong>代码很可能会产生某种内存不足错误</strong></em>）</p>
<h1 id="二、Android-上的-Kotlin-协程"><a href="#二、Android-上的-Kotlin-协程" class="headerlink" title="二、Android 上的 Kotlin 协程"></a>二、Android 上的 Kotlin 协程</h1><p>Android的开发文档中是这么介绍协程的：<br>协程是一种并发设计模式，您可以在 Android 平台上使用它来简化异步执行的代码。协程是在版本 1.3 中添加到 Kotlin 的，它基于来自其他语言的既定概念。</p>
<p>在 Android 上，协程有助于管理长时间运行的任务，如果管理不当，这些任务可能会阻塞主线程并导致应用无响应。使用协程的专业开发者中有超过 50% 的人反映使用协程提高了工作效率。本主题介绍如何使用 Kotlin 协程解决以下问题，从而让您能够编写出更清晰、更简洁的应用代码。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>协程是我们在 Android 上进行异步编程的推荐解决方案。值得关注的特点包括：</p>
<ul>
<li><strong>轻量</strong>：您可以在单个线程上运行多个协程，因为协程支持挂起，不会使正在运行协程的线程阻塞。挂起比阻塞节省内存，且支持多个并行操作。</li>
<li><strong>内存泄漏更少</strong>：使用结构化并发机制在一个作用域内执行多项操作。</li>
<li><strong>内置取消支持</strong>：取消操作会自动在运行中的整个协程层次结构内传播。</li>
<li><strong>Jetpack 集成</strong>：许多 Jetpack 库都包含提供全面协程支持的扩展。某些库还提供自己的协程作用域，可供您用于结构化并发。</li>
</ul>
<h2 id="Android-上-Kotlin-协程-Retrofit进行网络请求的示例"><a href="#Android-上-Kotlin-协程-Retrofit进行网络请求的示例" class="headerlink" title="Android 上 Kotlin 协程+Retrofit进行网络请求的示例"></a>Android 上 Kotlin 协程+Retrofit进行网络请求的示例</h2><p>为了方便对比，我们先使用单独的Retrofit，如果对Retrofit不熟悉的同学可以参考笔者的这篇文章</p>
<blockquote>
<p>java版本的,支持协程的Retrofit版本是至少要到大于2.6哦，本文使用的就是2.6版本的Retrofit<br><a class="link"   href="https://blog.csdn.net/shop_and_sleep/article/details/123526236?spm=1001.2014.3001.5502" >android retrofit 从无知到入门（最新最全） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h3 id="一些代码的准备"><a href="#一些代码的准备" class="headerlink" title="一些代码的准备"></a>一些代码的准备</h3><blockquote>
<p>API</p>
</blockquote>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> retrofit2.Call</span><br><span class="line"><span class="keyword">import</span> retrofit2.Response</span><br><span class="line"><span class="keyword">import</span> retrofit2.http.GET</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ISystemRemoteService</span> &#123;</span><br><span class="line">    <span class="meta">@get:GET</span>(<span class="string">&quot;/system/alive&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> systemStatus: Call&lt;Response&lt;Any&gt;&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>RetrofitService</p>
</blockquote>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.util.Log</span><br><span class="line"><span class="keyword">import</span> retrofit2.Retrofit</span><br><span class="line"><span class="keyword">import</span> okhttp3.OkHttpClient</span><br><span class="line"><span class="keyword">import</span> com.zyf.kotlindemo.HttpsUtils</span><br><span class="line"><span class="keyword">import</span> kotlin.Throws</span><br><span class="line"><span class="keyword">import</span> com.zyf.kotlindemo.RetrofitService</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RetrofitService</span> <span class="keyword">private</span> <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> retrofit: Retrofit</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">create</span><span class="params">(clazz: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;?)</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">return</span> retrofit.create(clazz)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">val</span> client = OkHttpClient.Builder()</span><br><span class="line">            .connectTimeout(<span class="number">30</span>, TimeUnit.SECONDS)</span><br><span class="line">            .readTimeout(<span class="number">30</span>, TimeUnit.SECONDS)</span><br><span class="line">            .sslSocketFactory(HttpsUtils.getSslSocketFactory(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>))</span><br><span class="line">            .hostnameVerifier &#123; hostname, session -&gt; <span class="literal">true</span> &#125;</span><br><span class="line">            .writeTimeout(<span class="number">30</span>, TimeUnit.SECONDS).addInterceptor &#123; chain -&gt;</span><br><span class="line">                <span class="keyword">val</span> builder = chain.request()</span><br><span class="line">                    .newBuilder()</span><br><span class="line">                <span class="keyword">val</span> request = builder.build()</span><br><span class="line">                chain.proceed(request)</span><br><span class="line">            &#125;.build()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> i: RetrofitService? = <span class="literal">null</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">i</span><span class="params">()</span></span>: RetrofitService? &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="literal">null</span>) &#123;</span><br><span class="line">                i = RetrofitService()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">rebuild</span><span class="params">()</span></span> &#123;</span><br><span class="line">            i = RetrofitService()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> serverUrl = <span class="string">&quot;https://blog.csdn.net/shop_and_sleep&quot;</span></span><br><span class="line">        retrofit = Retrofit.Builder()</span><br><span class="line">            .baseUrl(serverUrl) <span class="comment">//设置超时时间,intercept</span></span><br><span class="line">            .client(client)</span><br><span class="line">            .build()</span><br><span class="line">        Log.i(<span class="string">&quot;ServerUrl:------&quot;</span>, serverUrl)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Kotlin-简单使用Retrofit"><a href="#Kotlin-简单使用Retrofit" class="headerlink" title="Kotlin 简单使用Retrofit"></a>Kotlin 简单使用Retrofit</h3><blockquote>
<p>只使用Retrofit不使用协程</p>
</blockquote>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> api = RetrofitService.i()?.create(ISystemRemoteService::<span class="keyword">class</span>.java)</span><br><span class="line">       <span class="keyword">val</span> call = api?.systemStatus</span><br><span class="line">       <span class="comment">//这里因为我是在主线程，所以只能异步</span></span><br><span class="line">       <span class="keyword">val</span> result = call?.enqueue(<span class="keyword">object</span> : Callback&lt;Response&lt;Any&gt;&gt;&#123;</span><br><span class="line">           <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResponse</span><span class="params">(call: <span class="type">Call</span>&lt;<span class="type">Response</span>&lt;<span class="type">Any</span>&gt;&gt;, response: <span class="type">Response</span>&lt;<span class="type">Response</span>&lt;<span class="type">Any</span>&gt;&gt;)</span></span> &#123;</span><br><span class="line">               <span class="comment">//成功的回调</span></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(call: <span class="type">Call</span>&lt;<span class="type">Response</span>&lt;<span class="type">Any</span>&gt;&gt;, t: <span class="type">Throwable</span>)</span></span> &#123;</span><br><span class="line">               <span class="comment">//失败的回调</span></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure></div>
<h3 id="Kotlin-android-简单使用协程"><a href="#Kotlin-android-简单使用协程" class="headerlink" title="Kotlin android 简单使用协程"></a>Kotlin android 简单使用协程</h3><p>在第一个协程中我们知道每一个协程都要有一个范围构造器，那么在安卓中之前的第一个协程就可以变为</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line">CoroutineScope(Dispatchers.Main).launch &#123;</span><br><span class="line">    <span class="comment">// non-blocking delay for 1 second (default time unit is ms)延时一秒</span></span><br><span class="line">    delay(<span class="number">1000L</span>)</span><br><span class="line">    <span class="comment">// print after delay 延时后打印</span></span><br><span class="line">    println(<span class="string">&quot;World!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">println(<span class="string">&quot;Hello&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<p><em><strong>Dispatchers.Main</strong></em><br>代表在主线程中开启这个协程，Dispatchers是一个调度器，除了Main，在他的源码中我们还可以看到其他的，以下面这个表格来阐述：</p>
<table>
<thead>
<tr>
<th>分组</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Default</td>
<td>默认的调度器（如果不写得话默认就是这个）</td>
</tr>
<tr>
<td>Main</td>
<td>主线程的调度器（如果不写得话默认就是这个）</td>
</tr>
<tr>
<td>Unconfined</td>
<td>一个不局限于任何特定线程的协同程序调度程序</td>
</tr>
<tr>
<td>IO</td>
<td>顾名思义设计用于将阻塞IO任务卸载到共享线程池的调度器）</td>
</tr>
</tbody></table>
<h3 id="Kotlin-android-简单使用协程-retrofit"><a href="#Kotlin-android-简单使用协程-retrofit" class="headerlink" title="Kotlin android 简单使用协程+retrofit"></a>Kotlin android 简单使用协程+retrofit</h3><p>了解了调度器Dispatchers，协程构造器，和协程构造器的返回job后，一个简单的网络请求就顺其自然的出现了：</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line">CoroutineScope(Dispatchers.Main).launch &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*因为第一个协程还是主线程，</span></span><br><span class="line"><span class="comment">        Android规定网络请求必须在子线程,</span></span><br><span class="line"><span class="comment">        所以这里我们通过withContext获取请求结果,</span></span><br><span class="line"><span class="comment">        通过调度器Dispatcher切换到IO线程,</span></span><br><span class="line"><span class="comment">        这个操作会挂起当前协程,但是不会阻塞当前线程*/</span></span><br><span class="line">        <span class="keyword">val</span> result = withContext(Dispatchers.IO) &#123;</span><br><span class="line">            <span class="comment">/*这里已经是在子线程了,</span></span><br><span class="line"><span class="comment">        	所以使用execute()同步请求</span></span><br><span class="line"><span class="comment">      		withContext会把闭包最后一行代码的返回值返回出去</span></span><br><span class="line"><span class="comment">      		所以上面的result就是Response类型*/</span></span><br><span class="line">            RetrofitService.i()?.create(ISystemRemoteService::<span class="keyword">class</span>.java)?.</span><br><span class="line">            systemStatus?.</span><br><span class="line">            execute()?.</span><br><span class="line">            body()</span><br><span class="line">        &#125;</span><br><span class="line">        Log.d(<span class="string">&quot;onCreate&quot;</span>, <span class="string">&quot;result: &quot;</span>+result.toString())</span><br><span class="line">        <span class="keyword">if</span> (result?.isSuccessful == <span class="literal">true</span>)&#123;</span><br><span class="line">            Toast.makeText(mContext, <span class="string">&quot;请求成功&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>其中 <em><strong>withContext</strong></em> 使用给定的协同路由上下文调用指定的挂起块，挂起直到完成，然后返回，除了 <em><strong>launch</strong></em><br>，<em><strong>withContext</strong></em>，还有 <em><strong>async</strong></em> ，由于篇幅原因不多赘述，有兴趣可以自行了解；</p>
</blockquote>
<p> 值得一提的是，如果调用了<em><strong>withContext</strong></em>，在其调度器开始执行代码时被取消，它将丢弃’withContext’的结果并抛出[CancellationException]。<br> 为了解决这个问题，就不得不提协程的内置取消支持，所以我们的完整代码变成了如下：</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.util.Log</span><br><span class="line"><span class="keyword">import</span> android.view.Gravity</span><br><span class="line"><span class="keyword">import</span> android.widget.Button</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast</span><br><span class="line"><span class="keyword">import</span> kotlinx.android.synthetic.main.activity_main.*</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.*</span><br><span class="line"><span class="keyword">import</span> retrofit2.Call</span><br><span class="line"><span class="keyword">import</span> retrofit2.Callback</span><br><span class="line"><span class="keyword">import</span> retrofit2.Response</span><br><span class="line"><span class="keyword">import</span> kotlin.coroutines.CoroutineContext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : <span class="type">AppCompatActivity</span>() ,CoroutineScope &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mContext <span class="keyword">by</span> lazy &#123; <span class="keyword">this</span> &#125; <span class="comment">//（这里使用了委托，表示只有使用到mContext 才会执行该段代码）</span></span><br><span class="line">    <span class="comment">//job用于控制协程,后面launch&#123;&#125;启动的协程,返回的job就是这个job对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> job: Job</span><br><span class="line">    <span class="comment">//继承CoroutineScope必须初始化coroutineContext变量</span></span><br><span class="line">    <span class="comment">// 这个是标准写法,+其实是plus方法前面表示job,用于控制协程,后面是Dispatchers,指定启动的线程</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> coroutineContext: CoroutineContext</span><br><span class="line">        <span class="keyword">get</span>() = job + Dispatchers.Main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        job = Job()</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        CoroutineScope(Dispatchers.Main).launch &#123;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">             RetrofitService.i()?.create(ISystemRemoteService::<span class="keyword">class</span>.java)?.</span><br><span class="line">                systemStatus?.</span><br><span class="line">                execute()?.</span><br><span class="line">                body()</span><br><span class="line">            &#125;</span><br><span class="line">            Log.d(<span class="string">&quot;onCreate&quot;</span>, <span class="string">&quot;result: &quot;</span>+result.toString())</span><br><span class="line">            <span class="keyword">if</span> (result?.isSuccessful == <span class="literal">true</span>)&#123;</span><br><span class="line">                Toast.makeText(mContext, <span class="string">&quot;请求成功&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span> &#123;</span><br><span class="line">    	<span class="comment">//当acitivity结束之后,我们不需要再请求网络了,结束当前协程</span></span><br><span class="line">        job.cancel()</span><br><span class="line">        <span class="keyword">super</span>.onDestroy()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这个简单示例到此就结束了，但实际项目一般会在viewmodel中使用网络请求而不是在activity中，这就不得不提协程的另一个优点Jetpack 集成了，如果是在viewmodel中，可以使用viewModelScope来绑定viewModel的生命周期，否则就要像示例那样手动调用 job.cancel()方法</p>
<hr>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a class="link"   href="https://www.kotlincn.net/docs/reference/" >kotlin官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://developer.android.google.cn/kotlin" >安卓官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://www.cnblogs.com/sw-code/p/14451921.html" >协程配合retrofit调用网络请求 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://blog.csdn.net/weixin_44407870/article/details/86767075" >Android中使用Kotlin协程(Coroutines)和Retrofit进行网络请求(一) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>andorid</category>
      </categories>
      <tags>
        <tag>Kotlin协程（coroutine）</tag>
      </tags>
  </entry>
  <entry>
    <title>Android在MVVM中使用适配器模式的一些思考</title>
    <url>/2022/12/23/Android%E5%9C%A8MVVM%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/Android%E5%9C%A8MVVM%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>人总是在不断地学习中进步，在学习了设计模式过后，一直想将其用到项目当中，将其融会贯通，但是强行使用反而会适得其反，因此，还是需要在合适的地方使用，方为正道。<em>本文将会介绍在一个fragment中通过适配器设计模式切换不同的viewmodel来展示不同的数据，以达到替换viewpager+fragment的效果。</em></p>
<hr>
<h1 id="一、适配器设计模式是什么？"><a href="#一、适配器设计模式是什么？" class="headerlink" title="一、适配器设计模式是什么？"></a>一、适配器设计模式是什么？</h1><p>如果我们要在手机屏幕上展示如下列表，学过Andorid的朋友都知道，展示一个列表需要使用recycleview，然后新建一个布局展示item，然后就是我们今天的重头戏，<strong>adapter（适配器 ）</strong>，我们需要创建一个adapter来讲item布局填充到recycleview中并展示出来。</p>
<p>这时有的朋友就要笑了，你不会跟我说这就是适配器模式吧？那我会了；没错，这就是适配器模式，通过切换不同的adapter，你可以展示不同的item数据，这其中recycleview是被适配者，我们创建的adapter是具体的适配给recycleview的实现，而我们继承的 RecyclerView.Adapter<br>则是一个通用的规范，告诉recycleview我们是来适配的。</p>
<p>如果用更通俗易懂的话来说，就相当于你去找工作，然后跟老板说我要面试安卓开发工程师，<br>老板就是被适配者，你就是具体的适配，安卓开发工程师就是约定的规范</p>
<h1 id="二、MVVM中使用适配器模式"><a href="#二、MVVM中使用适配器模式" class="headerlink" title="二、MVVM中使用适配器模式"></a>二、MVVM中使用适配器模式</h1><h2 id="1-原因"><a href="#1-原因" class="headerlink" title="1.原因"></a>1.原因</h2><blockquote>
<p>再先说一下哦，不要强行使用设计模式，因为那会显得你在炫技。</p>
</blockquote>
<p>接到一个需求是要在一个fragment中放一张高德地图，然后在地图中动态切换tab过后，切换展示在地图上的数据，本着能抄绝不自己写的工作态度，我在需求会还没开的时候，就在看隔壁业务组的这个需求是怎么写的了，然后我就感受到了隔壁业务组对这个世界深深的恶意，先说下他们的实现吧，屏幕上方是一个tablayout，下方是个viewpager，带了6个模块的fragment，然后每一个fragment都是相同的地图逻辑和布局，唯一不同的是展示数据不同，筛选项不同，每一个fragment达到了惊人的3000+行的代码量，通篇都是重复的逻辑和令人昏昏欲睡的代码，我看了半个小时就困的不行了，醒来过后长叹息以掩泣兮，还是自己写吧；在这个需求的背景下使用这个写法，我只能说脑袋被门夹了。于是就想到了使用适配器模式。毕竟，真的只有展示的数据和筛选项不同，UI都是大同小异的，能用一个布局为什么要用六个呢，是吧</p>
<h2 id="2-实现"><a href="#2-实现" class="headerlink" title="2.实现"></a>2.实现</h2><p>敲定了使用的方法过后，就是设计的阶段了，因为项目是MVVM的，最终敲定对viewmodel下手，因为viewmodel就是对数据的处理，而我们正好差异就在数据层，因此我新创建了一个实体类</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MapEntity</span> &#123;</span><br><span class="line">    <span class="comment">//区域编号</span></span><br><span class="line">    <span class="keyword">var</span> areaCode = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment">//区域名称</span></span><br><span class="line">    <span class="keyword">var</span> areaNames = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment">//纬度</span></span><br><span class="line">    <span class="keyword">var</span> latitude = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment">//经度</span></span><br><span class="line">    <span class="keyword">var</span> longitude = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment">//统计数量</span></span><br><span class="line">    <span class="keyword">var</span> mapCount = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dataList : List&lt;Any&gt; = emptyList()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这里的dataList就是我准备用来展示的数据，但是因为每一个数据类型都有差异，所以没有声明具体的数据类型，而是使用Any代替。<br>然后定义一个安卓开发工程师的职位；（新建一个viewmodel的接口），类似如下</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IBaseMapViewModel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> getList: MutableLiveData&lt;List&lt;Any&gt;&gt;</span><br><span class="line">        <span class="keyword">get</span>() = MutableLiveData&lt;List&lt;Any&gt;&gt;()</span><br><span class="line">        <span class="keyword">set</span>(value) = TODO()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> isEmpty: MutableLiveData&lt;<span class="built_in">Boolean</span>&gt;</span><br><span class="line">        <span class="keyword">get</span>() = MutableLiveData()</span><br><span class="line">        <span class="keyword">set</span>(value) = TODO()</span><br><span class="line">    <span class="keyword">var</span> loading: MutableLiveData&lt;<span class="built_in">Boolean</span>&gt;</span><br><span class="line">        <span class="keyword">get</span>() = MutableLiveData()</span><br><span class="line">        <span class="keyword">set</span>(value) = TODO()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">var</span> hintString : String</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> type : <span class="built_in">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> drawable : <span class="built_in">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> drawableClick : <span class="built_in">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getMapData</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        botRightLat: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        botRightLon: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        categoryNo: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        industryNo: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        thirdCategoryNo: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        keyWord: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        searchType: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        topLeftLat: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        topLeftLon: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        context: <span class="type">Context</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        distance: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        mCenterLatLng: <span class="type">LatLng</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        employmentStatus: <span class="type">String</span>,<span class="comment">//用工状态</span></span></span></span><br><span class="line"><span class="params"><span class="function">        proficiency: <span class="type">String</span>, <span class="comment">//专业职级 	熟练度（专业职级 1:高级工(大工) 2:中级工(中工) 3:初级工(小工)）</span></span></span></span><br><span class="line"><span class="params"><span class="function">        workYear: <span class="type">String</span>, <span class="comment">//工龄 1-3传1 3-5传2 5-10传3 10以上传4</span></span></span></span><br><span class="line"><span class="params"><span class="function">        qualificationTypeNo: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        qualificationClassNo: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        teamNumber: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        businessType : <span class="type">String</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//成都房建水泥工成都房建水… 2.2w/月</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getMarkerText</span><span class="params">(item: <span class="type">MapEntity</span>)</span></span>:String</span><br><span class="line"></span><br><span class="line">    <span class="comment">//等12份工作</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getMarkerNum</span><span class="params">(item: <span class="type">MapEntity</span>,isProvince:<span class="type">Boolean</span>)</span></span>:String</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getUrlSetting</span><span class="params">( id:<span class="type">String</span>,  type:<span class="type">Int</span>,  modelType:<span class="type">String</span>, userNo:<span class="type">String</span>, context: <span class="type">Context</span>)</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>可以看到，在这个抽象的viemodel中我们的入参包含了MapEntity；再看getMapData方法的入参可能会有点多，这是因为他包含了所有六个页面的筛选项，这也算是适配器模式的一种缺点吧</p>
<p>然后就是创建“你”这样一个viemodel啦</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MapViewModel</span> () : BaseViewModel(), IBaseMapViewModel &#123;</span><br></pre></td></tr></table></figure></div>
<p>实现IBaseMapViewModel中的接口，并具体的处理每个数据实体类的展示，这样的具体业务viewmodel，我一共创建了六个！</p>
<p>最后怎么使用这些具体的viewmodel呢，在fragment中，先定义抽象的viewmodel</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//地图viewmodel</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> viewModel: IBaseMapViewModel</span><br></pre></td></tr></table></figure></div>

<p>然后通过tablayout点击不同的position来初始化不同的viewmodel</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">when</span> (selectSecondTap) &#123;</span><br><span class="line">           xxxxType -&gt; &#123;</span><br><span class="line">               viewModel = MapViewModel()</span><br><span class="line">           &#125;</span><br><span class="line">          </span><br><span class="line">          ......</span><br></pre></td></tr></table></figure></div>

<p>这里有个坑就是observe在每次重新初始化viewmodel后也要重新初始化，不然就会得不到请求后的数据</p>
<hr>
<h1 id="这样使用适配器模式的优缺点的总结"><a href="#这样使用适配器模式的优缺点的总结" class="headerlink" title="这样使用适配器模式的优缺点的总结"></a>这样使用适配器模式的优缺点的总结</h1><p>优点：</p>
<ul>
<li>减少了代码量，缩减了fragment的代码量，从3000+行缩减到了1000+行</li>
<li>代码更清晰，基本上只有切换viewmodel的时候才有判断，其他都是实打实的业务代码</li>
<li>减少维护成本，如果要在六个的基础上再新增数据展示只需要再加一个viewmodel和 逻辑判断，非常方便</li>
</ul>
<p> 缺点：</p>
<ul>
<li>不同的地方要做额外的处理，如果不写注释，那一块代码看着就比较吓人了（例如getMapData的入参）</li>
<li>如果需求出现巨大变更，例如不同的数据要采用不同的表现方式，就要推倒重写或者新增很多无意义的接口，让可读性和可维护性变得很差</li>
</ul>
]]></content>
      <categories>
        <category>andorid</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Andserver 配置本地文件浏览器实现webview展现本地图片</title>
    <url>/2022/05/11/Andserver-%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%9E%E7%8E%B0webview%E5%B1%95%E7%8E%B0%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/Andserver-%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%9E%E7%8E%B0webview%E5%B1%95%E7%8E%B0%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>接到一个需求，需要在安卓的vue的本地页面上加载本地的图片，而不是网络图片，这样当设备没有网络的时候图片也能正常显示，因为项目使用的是andserver+webview这种项目结构，用Andserver来解决这个问题最好不过；大概的思路就是先将需要加载的网络图片下载到本地，然后通过andserver提供的WebConfig增加一个类似本地的文件浏览器静态网站，当你的本地端口访问该路径时就可以加载出保存好的本地图片；</p>
<hr>
<h1 id="一、将图片下载到本地"><a href="#一、将图片下载到本地" class="headerlink" title="一、将图片下载到本地"></a>一、将图片下载到本地</h1><p>封装一个写好了的下载网络图片的工具类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</span><br><span class="line"><span class="keyword">import</span> android.os.AsyncTask;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aw.ccpos.client.Client;</span><br><span class="line"><span class="keyword">import</span> com.aw.ccpos.client.logger.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.HttpsURLConnection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ProjectName</span> : xxxx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : yifeng_zeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span> : 2022/2/18 14:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> : 保存网络图片到安卓本地工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NetworkImageUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;NetworkImageUtil&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> Bitmap bitmap;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">corePoolSize</span> <span class="operator">=</span> <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">maximumPoolSize</span> <span class="operator">=</span> <span class="number">80</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">keepAliveTime</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> BlockingQueue&lt;Runnable&gt; workQueue = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(maximumPoolSize);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Executor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(corePoolSize, maximumPoolSize, keepAliveTime, TimeUnit.SECONDS, workQueue);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> NetworkImageUtil instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> NetworkImageUtil <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">NetworkImageUtil</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * params &quot;/fs/img/2494831762213019.猴头菇.jpeg&quot;</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveImage</span><span class="params">(String... params)</span>&#123;</span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Task</span>();</span><br><span class="line">        task.executeOnExecutor(threadPoolExecutor,params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取网络图片</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageurl 图片网络地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Bitmap 返回位图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Bitmap <span class="title function_">getImageInputStream</span><span class="params">(String imageurl)</span>&#123;</span><br><span class="line">        <span class="type">HttpsURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Bitmap bitmap=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(imageurl);</span><br><span class="line">            Logger.d(TAG, <span class="string">&quot;download image with url: &quot;</span> +  url);</span><br><span class="line">            connection = (HttpsURLConnection) url.openConnection();</span><br><span class="line">            connection.setSSLSocketFactory(HttpsUtils.getSslSocketFactory(<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>));</span><br><span class="line">            connection.connect();</span><br><span class="line">            <span class="comment">// expect HTTP 200 OK, so we don&#x27;t mistakenly save error</span></span><br><span class="line">            <span class="comment">// report</span></span><br><span class="line">            <span class="comment">// instead of the file</span></span><br><span class="line">            <span class="keyword">if</span> (connection.getResponseCode() != HttpURLConnection.HTTP_OK) &#123;</span><br><span class="line">                Logger.e(TAG, <span class="string">&quot;Server returned HTTP &quot;</span>+connection.getResponseCode() + <span class="string">&quot; &quot;</span></span><br><span class="line">                        + connection.getResponseMessage() );</span><br><span class="line">            &#125;</span><br><span class="line">            InputStream inputStream=connection.getInputStream();</span><br><span class="line">            bitmap= BitmapFactory.decodeStream(inputStream);</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存位图到本地</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bitmap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 本地路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveImage</span><span class="params">(Bitmap bitmap, String path)</span>&#123;</span><br><span class="line"><span class="comment">//        File file=new File(path);</span></span><br><span class="line">        FileOutputStream fileOutputStream=<span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//文件夹不存在，则创建它</span></span><br><span class="line"><span class="comment">//        if (!file.exists()) &#123;</span></span><br><span class="line"><span class="comment">//            file.mkdirs();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileOutputStream=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/sdcard/image&quot;</span>+path);</span><br><span class="line">            bitmap.compress(Bitmap.CompressFormat.JPEG, <span class="number">100</span>,fileOutputStream);</span><br><span class="line">            fileOutputStream.close();</span><br><span class="line">            Logger.d(TAG, <span class="string">&quot;SavaImage: success: &quot;</span>+path);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Logger.e(TAG, <span class="string">&quot;SavaImage: fail: &quot;</span>+path);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步线程下载图片</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">extends</span> <span class="title class_">AsyncTask</span>&lt;String, Integer, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> String <span class="title function_">doInBackground</span><span class="params">(String... params)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bitmap!=<span class="literal">null</span>)&#123;</span><br><span class="line">                bitmap=<span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            bitmap=NetworkImageUtil.getInstance().getImageInputStream((String)params[<span class="number">0</span>]);</span><br><span class="line">            NetworkImageUtil.getInstance().saveImage(bitmap, (String)params[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onPostExecute</span><span class="params">(String result)</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>注释写的挺详细了，这里就不多赘述，简单提下HttpsUtils是封装的一个HttpsUtils的工具类，有需要可以去我的这篇文章里去找，这也是一篇使用andserver的文章，侧重点不一样，如果你的网络图片是http的，当我没说。<br> 链接:文章地址 <a class="link"   href="https://blog.csdn.net/shop_and_sleep/article/details/122057541?spm=1001.2014.3001.5502" >andriod andserver 全局转发代理（部分接口在本地）的实现思路 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h1 id="二、Andserver-的本地文件浏览器"><a href="#二、Andserver-的本地文件浏览器" class="headerlink" title="二、Andserver 的本地文件浏览器"></a>二、Andserver 的本地文件浏览器</h1><h2 id="1-Andserver-的WebConfig与-Config"><a href="#1-Andserver-的WebConfig与-Config" class="headerlink" title="1.Andserver 的WebConfig与@Config"></a>1.Andserver 的WebConfig与@Config</h2><p>借用andserver文档的解释：<br>我们知道，每个机器上可以部署多个 Web Server，每个 WebServer 可以有不同的配置，同样的 AndServer 也提供了这样的能力，开发者可以使用Config注解来标记某个类是 Server 的配置类，这个配置总不能瞎写吧？所以Config注解的类需要实现WebConfig接口，WebConfig接口用来统一提供配置的 API。<br>代码如下（示例）：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Config</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> <span class="keyword">implements</span> <span class="title class_">WebConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onConfig</span><span class="params">(Context context, Delegate delegate)</span> &#123;</span><br><span class="line">        <span class="comment">// 增加一个静态网站</span></span><br><span class="line">        delegate.addWebsite(<span class="keyword">new</span> <span class="title class_">AssetsWebsite</span>(context, <span class="string">&quot;/web&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置表单请求和文件上传的条件</span></span><br><span class="line">        delegate.setMultipart(Multipart.newBuilder()</span><br><span class="line">            .allFileMaxSize(<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">20</span>) <span class="comment">// 单个请求上传文件总大小</span></span><br><span class="line">            .fileMaxSize(<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>) <span class="comment">// 单个文件的最大大小</span></span><br><span class="line">            .maxInMemorySize(<span class="number">1024</span> * <span class="number">10</span>) <span class="comment">// 保存上传文件时buffer大小</span></span><br><span class="line">            .uploadTempDir(<span class="keyword">new</span> <span class="title class_">File</span>(context.getCacheDir(), <span class="string">&quot;_server_upload_cache_&quot;</span>)) <span class="comment">// 文件保存目录</span></span><br><span class="line">            .build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这样，我们就得到了一个静态的网站，通过本地的端口再加上&#x2F;web就可以访问了，这并不是我们需要的。但我们已经知道通过addWebsite，技能部署一个静态网站了，那么静态文件浏览器就不再遥远。<br>这里值得注意的是因为SD卡也是磁盘，所以路径必须是绝对路径。</p>
<p>注意：FileBrowser支持热插拔。</p>
<h2 id="2-FileBrowse（文件浏览器）"><a href="#2-FileBrowse（文件浏览器）" class="headerlink" title="2.FileBrowse（文件浏览器）"></a>2.FileBrowse（文件浏览器）</h2><p>在andserver的旧版文档中，我发现了我需要的东西<br>FileBrowse可以部署SD卡中的内容供别人以文件的形式浏览。并且它还支持支持热插拔。</p>
<p>我们把上面的示例代码稍微改动一下（示例）：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Config</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AndServerConfig</span> <span class="keyword">implements</span> <span class="title class_">WebConfig</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">localImageUrl</span> <span class="operator">=</span> <span class="string">&quot;/sdcard/image/fs/img/&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onConfig</span><span class="params">(Context context, Delegate delegate)</span> &#123;</span><br><span class="line">        File file=<span class="keyword">new</span> <span class="title class_">File</span>(localImageUrl);</span><br><span class="line">        <span class="comment">//文件夹不存在，则创建它</span></span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 添加一个本地文件浏览器网站</span></span><br><span class="line">        delegate.addWebsite(<span class="keyword">new</span> <span class="title class_">FileBrowser</span>(<span class="string">&quot;/sdcard/image/&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>路径说明<br>例如我们把&#x2F;sdcard目录作为部署目录：</p>
<p>假设我们在某个手机上部署new FileBrowse(“&#x2F;sdcard”);目录，这个手机的本机局域网IP是192.168.1.11，我们指定AndServer监听的端口是8080。</p>
<p>当用户在地址栏输入<a href="http://192.168.1.11:8080时并访问后，用户将看到一个网页，网页上面会列出/sdcard下的所有文件和目录，并且在文件和目录上加上超链接。当用户点击文件时，浏览器可能会直接打开这个文件或者让用户下载这个文件；当用户点击目录时，用户将会看到一个新页面中列出了他点击的目录中的所有目录和文件。">http://192.168.1.11:8080时并访问后，用户将看到一个网页，网页上面会列出/sdcard下的所有文件和目录，并且在文件和目录上加上超链接。当用户点击文件时，浏览器可能会直接打开这个文件或者让用户下载这个文件；当用户点击目录时，用户将会看到一个新页面中列出了他点击的目录中的所有目录和文件。</a></p>
<hr>
<p>至此，Andserver 配置本地文件浏览器实现webview展现本地图片的基本功能大概都实现了，如果想要实现其他的配置，例如加载Assets目录下的静态网站,Sdcard下的静态网站，你可以照猫画虎</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载Assets目录</span></span><br><span class="line">delegate.addWebsite(<span class="keyword">new</span> <span class="title class_">AssetsWebsite</span>(context, <span class="string">&quot;assets/web/website&quot;</span>));</span><br><span class="line"><span class="comment">//Sdcard</span></span><br><span class="line">delegate.addWebsite(<span class="keyword">new</span> <span class="title class_">StorageWebsite</span>(<span class="string">&quot;/sdcard/andserver/website&quot;</span>));</span><br></pre></td></tr></table></figure></div>
<p>甚至于自定义的http路径的静态网站</p>
<h1 id="三、Andserver-的自定义网站"><a href="#三、Andserver-的自定义网站" class="headerlink" title="三、Andserver 的自定义网站"></a>三、Andserver 的自定义网站</h1><p>如果AndServer自带的网站不够用或者和开发者的需求有出入，那么我们可以自定义网站。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWeibsite</span> implement Website &#123;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">delegate.addWebsite(<span class="keyword">new</span> <span class="title class_">MyWeibsite</span> ());</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>实现Website接口，或者继承SimpleWebsite基类，然后添加进去，真的就是你想的那么简单</p>
]]></content>
      <categories>
        <category>andorid</category>
      </categories>
      <tags>
        <tag>Andserver</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose 实战 宝可梦图鉴</title>
    <url>/2023/04/13/Jetpack-Compose-%E5%AE%9E%E6%88%98-%E5%AE%9D%E5%8F%AF%E6%A2%A6%E5%9B%BE%E9%89%B4/Jetpack-Compose-%E5%AE%9E%E6%88%98-%E5%AE%9D%E5%8F%AF%E6%A2%A6%E5%9B%BE%E9%89%B4/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  阅读本文需要一定compose基础，如果没有请移步<a class="link"   href="https://blog.csdn.net/shop_and_sleep/article/details/124569994?spm=1001.2014.3001.5501" >Jetpack Compose入门详解（实时更新） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>  学Compose学了有小半年的时间了，一直都是看官方的一些基础的教程并总结学习。最近终于实战了一个宝可梦图鉴的小项目，麻雀虽小五脏俱全。除了Compose外，还使用了一下一些Jetpack组件</p>
<ul>
<li><p><a class="link"   href="https://google.github.io/accompanist/pager/" >accompanist-pager <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p><a class="link"   href="https://github.com/coil-kt/coil" >coil <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p><a class="link"   href="https://developer.android.google.cn/training/dependency-injection/hilt-jetpack#compose" >hilt <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p><a class="link"   href="https://developer.android.google.cn/topic/libraries/architecture/paging/v3-overview" >paging3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p><a class="link"   href="https://developer.android.google.cn/jetpack/compose/navigation" >navigation-compose <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p><a class="link"   href="https://google.github.io/accompanist/systemuicontroller/" >accompanist-systemuicontroller <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p><a class="link"   href="https://square.github.io/retrofit/" >Retrofit <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> </p>
</li>
<li><p><a class="link"   href="https://developer.android.com/kotlin/flow" >Kotlin Flow <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
<p>接口数据来源于<a class="link"   href="https://pokeapi.co/" >pokeapi <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://github.com/zyf-good/pokemon" >项目源代码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>如果你觉得不错，请给我一个star，THKS</p>
<hr>
<h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><p>闲话不多说，让我们来看看实现效果<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Pokmon1.gif"
                      alt="在这里插入图片描述"
                ><br>可以看到我们实现了一个非常简洁的宝可梦图鉴，展示了所有世代的宝可梦，并提供了搜索，点击进入详情查看他们的属性</p>
<h1 id="一、架构介绍"><a href="#一、架构介绍" class="headerlink" title="一、架构介绍"></a>一、架构介绍</h1><p>如图，展示了主要的一些文件：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Pokmon2.png"
                      alt="在这里插入图片描述"
                ></p>
<ul>
<li>api   - 接口</li>
<li>nav - navigation导航</li>
<li>utils -工具类</li>
<li>view -Compose组件</li>
<li>viewmodels - viewmodel</li>
</ul>
<h1 id="二、一些的功能点的介绍"><a href="#二、一些的功能点的介绍" class="headerlink" title="二、一些的功能点的介绍"></a>二、一些的功能点的介绍</h1><p>主要是开发过程中遇到的一些问题</p>
<h2 id="加载图片并获取主色-再讲主色设置为背景"><a href="#加载图片并获取主色-再讲主色设置为背景" class="headerlink" title="加载图片并获取主色,再讲主色设置为背景"></a>加载图片并获取主色,再讲主色设置为背景</h2><p>展示图片本来有封装好的<em><strong>CommonImage.kt</strong></em>用来展示图片，但是在列表中每一张图片的背景色都是动态获取的，当时做的时候觉得比较难弄，后面实现了过后就觉得还好啦。</p>
<p>引入的库</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&quot;io.coil-kt:coil-compose:2.1.0&quot;</span></span><br><span class="line">    <span class="comment">//get Dominant image color</span></span><br><span class="line">implementation <span class="string">&#x27;androidx.palette:palette-ktx:1.0.0&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>主要代码在<strong>FullScreenView.kt</strong>中的 <strong>item()</strong> 中</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我们所动态获取的图片背景色</span></span><br><span class="line"><span class="keyword">var</span> backgroundColor <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="number">0</span>) &#125;</span><br><span class="line">   <span class="keyword">val</span> context = LocalContext.current</span><br><span class="line">   <span class="comment">//ImageRequest</span></span><br><span class="line">   <span class="keyword">val</span> modelBuilder = ImageRequest.Builder(context).<span class="keyword">data</span>(item.url.getPicUrl()).crossfade(<span class="literal">false</span>)</span><br><span class="line">       .allowHardware(<span class="literal">false</span>).transformations().placeholder(R.drawable.ic_pokeball)</span><br><span class="line">       .error(R.drawable.ic_pokeball)</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启一个获取协程的附带效应当ImageRequest发生改变时，通过ImageRequest来动态获取bitmap</span></span><br><span class="line"><span class="comment">//再通过Palette来获取其主色</span></span><br><span class="line">   LaunchedEffect(modelBuilder.build()) &#123;</span><br><span class="line">       <span class="keyword">val</span> bitmap = context.imageLoader.execute(modelBuilder.build()).drawable?.toBitmap(</span><br><span class="line">           config = Bitmap.Config.RGBA_F16</span><br><span class="line">       )</span><br><span class="line">       bitmap?.let &#123;</span><br><span class="line">           <span class="keyword">val</span> palette = Palette.from(bitmap).generate()</span><br><span class="line">           <span class="comment">//当backgroundColor得到值，可组合项重组</span></span><br><span class="line">           backgroundColor = palette.getDominantColor(<span class="number">0</span>)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>上面的代码最终能实现我想要的效果，但是我始终觉得不够优雅，后面有机会在封装一下吧</p>
<h2 id="一个进度缓慢增加的圆形进度条"><a href="#一个进度缓慢增加的圆形进度条" class="headerlink" title="一个进度缓慢增加的圆形进度条"></a>一个进度缓慢增加的圆形进度条</h2><p>也是封装好的通用组件<strong>CommonCircularProgress.kt</strong> </p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CommonAttributeCircularProgress</span><span class="params">(text:<span class="type">String</span>,content:<span class="type">String</span>,mProgress: <span class="type">Float</span>,modifier: <span class="type">Modifier</span>)</span></span>&#123;</span><br><span class="line">    Column(</span><br><span class="line">        horizontalAlignment = Alignment.CenterHorizontally</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">var</span> progress = remember &#123;</span><br><span class="line">            mutableStateOf(<span class="number">0.0f</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        LaunchedEffect(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> state = <span class="number">0.0f</span></span><br><span class="line">            <span class="keyword">while</span> (state &lt;= mProgress) &#123;</span><br><span class="line">                progress.value = state</span><br><span class="line">                state += mProgress / <span class="number">10f</span></span><br><span class="line">                delay(<span class="number">50</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Box()&#123;</span><br><span class="line">            Text(text = text,modifier = modifier.align(Alignment.Center))</span><br><span class="line">            CircularProgressIndicator(progress = <span class="number">1f</span>,</span><br><span class="line">                color = Color(<span class="number">0xFFffcba4</span>),</span><br><span class="line">                modifier = modifier</span><br><span class="line">                    .align(Alignment.Center)</span><br><span class="line">                    .size(<span class="number">150.</span>cdp, <span class="number">150.</span>cdp)</span><br><span class="line">            )</span><br><span class="line">            CircularProgressIndicator(progress = progress.value,</span><br><span class="line">                color = MaterialTheme.colors.secondary,</span><br><span class="line">                modifier = modifier</span><br><span class="line">                    .align(Alignment.Center)</span><br><span class="line">                    .size(<span class="number">150.</span>cdp, <span class="number">150.</span>cdp)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        Text(text = content, modifier = modifier.padding(top = <span class="number">10.</span>cdp))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>我没有找到能给CircularProgressIndicator可组合项目设置进度条范围内的背景的属性，所以使用了box将其覆盖一个CircularProgressIndicator可组合项来实现其背景的假象</p>
<h2 id="单Activity使用navigation跳转Compose可组合项返回时页面重组的问题"><a href="#单Activity使用navigation跳转Compose可组合项返回时页面重组的问题" class="headerlink" title="单Activity使用navigation跳转Compose可组合项返回时页面重组的问题"></a>单Activity使用navigation跳转Compose可组合项返回时页面重组的问题</h2><p>列表项数据我按照官方推荐使用的方法直接使用了<strong>collectAsLazyPagingItems</strong>，然后我发现它确实起作用了，但是也发生了上诉问题，我每一次从详情页返回到列表页，列表页都会闪烁然后重组。这是因为每一次返回，可组合项都重新进行了请求导致数据发生变化，从而导致重组，为了解决这一问题，我在viewmodel中保存了一份请求得到的数据</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HiltViewModel</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PokemonListViewModel</span> <span class="meta">@Inject</span> <span class="keyword">constructor</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> pokemonRepository: PokemonRepository</span><br><span class="line">) :</span><br><span class="line">    ViewModel() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 宝可梦列表数据流  currentResult是为了保证从详情页面返回时不重新加载数据</span></span><br><span class="line">    <span class="keyword">var</span> currentResult: Flow&lt;PagingData&lt;PokemonResult&gt;&gt;? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getPokemon</span><span class="params">(searchString: <span class="type">String</span>?)</span></span>: Flow&lt;PagingData&lt;PokemonResult&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> newResult = pokemonRepository.getPokemon(searchString).cachedIn(viewModelScope)</span><br><span class="line">        currentResult = newResult</span><br><span class="line">        <span class="keyword">return</span> newResult</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>并在页面中这样正确使用<strong>collectAsLazyPagingItems</strong></p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list: LazyPagingItems&lt;PokemonResult&gt;? = <span class="literal">null</span></span><br><span class="line">list = <span class="keyword">if</span> (vm.currentResult != <span class="literal">null</span>) &#123;</span><br><span class="line">    vm.currentResult!!.collectAsLazyPagingItems()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    vm.getPokemon(searchString.value).collectAsLazyPagingItems()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这样当我从详情页返回到列表页时，页面显示正常</p>
<h2 id="hiltViewModel"><a href="#hiltViewModel" class="headerlink" title="hiltViewModel()"></a>hiltViewModel()</h2><p>在使用viemodel时，一开始我按照官方使用viewmodel的示例使用了**viewModel()**方法，并且在调试中是正常的。</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> vm: PokemonListViewModel = viewModel()</span><br></pre></td></tr></table></figure></div>

<p>可当我在加入<strong>navigation</strong> 后，viewmodel并不能正常的工作，后来查阅资料发现要使用</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&quot;androidx.navigation:navigation-compose:2.5.0-beta01&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>包中的 <strong>hiltViewModel()</strong></p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> vm: PokemonListViewModel = hiltViewModel()</span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="主要参考项目"><a href="#主要参考项目" class="headerlink" title="主要参考项目"></a>主要参考项目</h1><p>Jetpack Compose仿写网易云音乐<br><a class="link"   href="https://github.com/sskEvan/NCMusic" >NCMusic <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>;<br>一个使用原生xml kotlin写的宝可梦图鉴<br><a class="link"   href="https://github.com/ronnieotieno/PokeApi-Pokedex" >PokeApi-Pokedex <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>;</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>整个项目其实就两个可组合项，一个是FullScreenView（列表页），一个是AttributeDetailView（详情页），每个页面就200行代码左右，对比起原生xml，的确是少了很多样板代码</p>
]]></content>
      <categories>
        <category>andorid</category>
      </categories>
      <tags>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose入门</title>
    <url>/2023/04/19/Jetpack-Compose%E5%85%A5%E9%97%A8/Jetpack-Compose%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="一-前言"><a href="#一-前言" class="headerlink" title="一.前言"></a>一.前言</h1><p>本篇文章将简单介绍 <strong>Jectpack Compose</strong>,只带领大家认识在安卓中Compose的使用，既然要使用<strong>Jectpack Compose</strong>，那就必须踩一捧一了（doge）</p>
<h1 id="二-原生View的缺点与Compose的优点"><a href="#二-原生View的缺点与Compose的优点" class="headerlink" title="二.原生View的缺点与Compose的优点"></a>二.原生View的缺点与Compose的优点</h1><h2 id="原生View的缺点"><a href="#原生View的缺点" class="headerlink" title="原生View的缺点"></a>原生View的缺点</h2><blockquote>
<p>以下仅代表个人观点，不可否认view也有自己的优点</p>
</blockquote>
<h2 id="臃肿"><a href="#臃肿" class="headerlink" title="臃肿"></a>臃肿</h2><p>所有人一入行Android都是从xml布局开始的，都是从view开始的，不得不说作为一个基类，它确实很强大，很成熟，但是相信大部分人都不没有去看看view的源码有多少行，今天告诉大家，一共有3468行。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230403175158572.png"
                      alt="image-20230403175158572"
                ></p>
<p>是的，作为一个基类，它太臃肿了。</p>
<hr>
<h2 id="使用麻烦"><a href="#使用麻烦" class="headerlink" title="使用麻烦"></a>使用麻烦</h2><p>大家写xml都写习惯了，各种属性熟记于心，所以并不觉得什么，那么我们通过一个小例子来对比一下</p>
<p>用原生View的方式声明一个文本，不谈动态更改值，你得声明一个xml吧</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">    android:id=<span class="string">&quot;@+id/text&quot;</span></span><br><span class="line">    android:text=<span class="string">&quot;这是一条文本&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></div>

<p>而Compose结合kotlin的Lamda，声明一个文本，只需要一行代码</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line">Text(<span class="string">&quot;这是一条文本&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<hr>
<p>这两种方式的实现效果是一样的，但是很直观的你可以看到</p>
<h2 id="预览功能不够强大"><a href="#预览功能不够强大" class="headerlink" title="预览功能不够强大"></a>预览功能不够强大</h2><p>好了有些杠精就要说了“我可以在xml布局中预览啊”，你先别急，我们再举个在工作当中的例子，当你美滋滋的完成了开发任务，正在进行UI验收时，UI跑过来跟你说，这个发布页下面有一根分割线，我的UI图里分割线是1.dp，你这里有2.dp；你看着你在xml中的预览，确实是1.dp啊，你说好我看下，一跑项目十五分钟过去了，发现确实是2.dp然后再回过头来看为什么，这但是Compose就可以直接指定运行某个页面，甚至可以切换主题和交互，而不是像xml只能看看。</p>
<p><strong>综上所诉，高下立判，xml在现在看来确实不够优雅了</strong></p>
<hr>
<h1 id="Compose的优点"><a href="#Compose的优点" class="headerlink" title="Compose的优点"></a>Compose的优点</h1><h3 id="为什么采用-Compose"><a href="#为什么采用-Compose" class="headerlink" title="为什么采用 Compose"></a>为什么采用 Compose</h3><p>Jetpack Compose 是用于构建原生 Android 界面的新工具包。它使用更少的代码、强大的工具和直观的 Kotlin API，可以帮助您简化并加快 Android 界面开发，打造生动而精彩的应用。它可让您更快速、更轻松地构建 Android 界面。</p>
<h2 id="更少的代码"><a href="#更少的代码" class="headerlink" title="更少的代码"></a>更少的代码</h2><p>编写更少的代码会影响到所有开发阶段：作为代码撰写者，需要测试和调试的代码会更少，出现 bug 的可能性也更小，您就可以专注于解决手头的问题；作为审核人员或维护人员，您需要阅读、理解、审核和维护的代码就更少。</p>
<p>与使用 Android View 系统（按钮、列表或动画）相比，Compose 可让您使用更少的代码实现更多的功能。无论您需要构建什么内容，现在需要编写的代码都更少了。以下是我们的一些合作伙伴的感想：</p>
<ul>
<li>“对于相同的 Button 类，代码的体量要小 10 倍。”(Twitter)</li>
<li>“使用 RecyclerView 构建的任何屏幕（我们的大部分屏幕都使用它构建）的大小也显著减小。”(Monzo)</li>
<li>““只需要很少几行代码就可以在应用中创建列表或动画，这一点令我们非常满意。对于每项功能，我们编写的代码行更少了，这让我们能够将更多精力放在为客户提供价值上。”(Cuvva)</li>
</ul>
<p>编写代码只需要采用 Kotlin，而不必拆分成 Kotlin 和 XML 部分：“当所有代码都使用同一种语言编写并且通常位于同一文件中（而不是在 Kotlin 和 XML 语言之间来回切换）时，跟踪变得更容易”(Monzo)</p>
<p>无论您要构建什么，使用 Compose 编写的代码都很简洁且易于维护。“Compose 的布局系统在概念上更简单，因此可以更轻松地推断。查看复杂组件的代码也更轻松。”(Square)</p>
<h2 id="直观"><a href="#直观" class="headerlink" title="直观"></a>直观</h2><p>Compose 使用声明性 API，这意味着您只需描述界面，Compose 会负责完成其余工作。这类 API 十分直观 - 易于探索和使用：“我们的主题层更加直观，也更加清晰。我们能够在单个 Kotlin 文件中完成之前需要在多个 XML 文件中完成的任务，这些 XML 文件负责通过多个分层主题叠加层定义和分配属性。”(Twitter)</p>
<p>利用 Compose，您可以构建不与特定 activity 或 fragment 相关联的小型无状态组件。这让您可以轻松重用和测试这些组件：“我们给自己设定的目标是，交付一组新的无状态界面组件，确保它们易于使用和维护，且可直观实现&#x2F;扩展&#x2F;自定义。就这一点而言，Compose 确实为我们提供了一个可靠的答案。”(Twitter)</p>
<p>在 Compose 中，状态是显式的，并且会传递给相应的可组合项。这样一来，状态便具有单一可信来源，因而是封装和分离的。然后，应用状态变化时，界面会自动更新。“在对某些内容进行推断时，不必处理太多信息，并且无法控制或难以理解的行为也更少”(Cuvva)</p>
<h2 id="加速开发"><a href="#加速开发" class="headerlink" title="加速开发"></a>加速开发</h2><p>Compose 与您所有的现有代码兼容：您可以从 View 调用 Compose 代码，也可以从 Compose 调用 View。大多数常用库（如 Navigation、ViewModel 和 Kotlin 协程）都适用于 Compose，因此您可以随时随地开始采用。“我们集成 Compose 的初衷是实现互操作性，我们发现这件事情已经‘水到渠成’。我们不必考虑浅色模式和深色模式等问题，整个体验无比顺畅。”(Cuvva)</p>
<p>借助全面的 Android Studio 支持以及实时预览等功能，您可以更快地迭代和交付代码：“<em>Android Studio 中的预览功能极大地节省了我们的时间。构建多个预览的能力也帮我们节省了时间。我们通常需要检查不同状态下或采用不同设置的界面组件（例如错误状态或采用不同的字体大小等）。由于能够创建多个预览，我们可以轻松执行这些检查。</em>”(Square)</p>
<h2 id="功能强大"><a href="#功能强大" class="headerlink" title="功能强大"></a>功能强大</h2><p>利用 Compose，您可以凭借对 Android 平台 API 的直接访问和对于 Material Design、深色主题、动画等的内置支持，创建精美的应用：“Compose 不仅解决了声明性界面的问题，还改进了无障碍功能 API、布局等各种内容。将设想变为现实所需的步骤更少了”(Square)。</p>
<p>利用 Compose，您可以轻松快速地通过动画让应用变得生动有趣：“在 Compose 中添加动画效果非常简单，没有理由不去为颜色&#x2F;大小&#x2F;高度变化添加动画效果”(Monzo)，“不需要任何特殊的工具就能制作动画，这与显示静态屏幕没有什么不同”(Square)。</p>
<p>无论您是使用 Material Design 还是自己的设计系统进行构建，Compose 都可以让您灵活地实现所需的设计：“从基础上将 Material Design 分离出来对我们来说非常有用，因为我们要构建自己的设计系统，这往往需要与 Material 不同的设计要求。”(Square)</p>
<h1 id="三-Hello-Compose"><a href="#三-Hello-Compose" class="headerlink" title="三.Hello Compose"></a>三.Hello Compose</h1><p>光说不练假把式，我们马上操练起来。</p>
<h2 id="先new-一个-project"><a href="#先new-一个-project" class="headerlink" title="先new 一个 project"></a>先new 一个 project</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230404102128397.png"
                      alt="image-20230404102128397"
                ></p>
<h2 id="然后选择创建一个空的Compose-项目"><a href="#然后选择创建一个空的Compose-项目" class="headerlink" title="然后选择创建一个空的Compose 项目"></a>然后选择创建一个空的Compose 项目</h2><blockquote>
<p>注意只有新版AS才有这个选项</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230404102342123.png"
                      alt="image-20230404102342123"
                ></p>
<hr>
<p>名字就叫Hello Compose吧</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230404102915709.png"
                      alt="image-20230404102915709"
                ></p>
<p>finish</p>
<hr>
<p>编译完成后我们可以看到这样一个界面</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230404110658795.png"
                      alt="image-20230404110658795" style="zoom: 200%;" 
                >

<p>可以看到一个适合Compose开发的环境已经搭建好了，后面的介绍也是基于此环境的。</p>
<hr>
<h3 id="setContent函数"><a href="#setContent函数" class="headerlink" title="setContent函数"></a>setContent函数</h3><p>与常规的setContentView函数不同setContent函数必须是activity继承ComponentActivity才能使用，并且其接收参数为声明UI内容的@Composable函数。</p>
<h3 id="Composable-注解"><a href="#Composable-注解" class="headerlink" title="@Composable 注解"></a><strong>@Composable</strong> 注解</h3><p>我们可以看到页面中的带有 <strong>@Composable</strong> 注解的函数 <strong>Greeting()</strong> 与<strong>DefaultPreview()</strong>,它们都是被声明为UI内容的，换句话说，它们都是页面；字面意思来说，它是一个可组合项。（ps：下文所说的可组合项都是指代带有 <strong>@Composable</strong> 注解的函数）</p>
<h3 id="Preview-注解"><a href="#Preview-注解" class="headerlink" title="@Preview 注解"></a>@Preview 注解</h3><p>这是一个配合**@Composable** 注解使用的注解，标识着可组合项可以被预览，这个注解的强大在于可以运行单个页面和查看其点击效果。试想一下如果我们只运行一个页面在手机上，是不是会快很多。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/3B3A9318-411D-4B89-B6CD-7C756B346216.png"
                      alt="在这里插入图片描述"
                ></p>
<p>这是最简单的使用，我们点进@Preview的源码</p>
<p>参数：</p>
<ul>
<li><p>name-此预览的显示名称，允许在面板中识别它。</p>
</li>
<li><p>group-此@Preview的组名称。这允许在UI中对它们进行分组，并仅显示其中一个或多个。</p>
</li>
<li><p>apiLevel—呈现带注释的@Composable时使用的API级别</p>
</li>
<li><p>widthDp—将在其中渲染带注释的@Composable的最大DP宽度。使用此选项可以限制渲染视口的大小。</p>
</li>
<li><p>heightDp-将在其中渲染注释的@Composable的最大高度（以DP为单位）。使用此选项可以限制渲染视口的大小。</p>
</li>
<li><p>locale-区域设置的当前用户首选项，对应于区域设置资源限定符。默认情况下，将使用默认文件夹。</p>
</li>
<li><p>fontScale-用户首选字体的缩放因子，相对于基本密度缩放。</p>
</li>
<li><p>showSystemUi-如果为true，将显示设备的状态栏和操作栏。@Composable将在完整活动的上下文中呈现。</p>
</li>
<li><p>showBackground-如果为true，@Composable将使用默认背景色。</p>
</li>
<li><p>backgroundColor-背景的32位ARGB颜色int，如果未设置，则为0</p>
</li>
<li><p>uiMode—根据android.content.res.Configuration.uiMode的ui模式位掩码</p>
</li>
<li><p>device—指示要在预览中使用的设备的设备字符串。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/361e12b1a2c64b41aa9494d52012bc15.png"
                      alt="在这里插入图片描述"
                ></p>
</li>
</ul>
<p>我们将DefaultPreview改一下（ps：locale为设置不同的用户语言区域的参数；参数 uiMode 可接受任意 Configuration.UI_* 常量，并允许您相应地更改预览的行为。例如，您可以将预览设置为夜间模式，看看主题如何响应。本例中未体现）</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Preview(name = <span class="string">&quot;name&quot;</span>,</span></span><br><span class="line"><span class="meta">    group = <span class="string">&quot;group&quot;</span>,</span></span><br><span class="line"><span class="meta">    widthDp = 100,</span></span><br><span class="line"><span class="meta">    heightDp = 100,</span></span><br><span class="line"><span class="meta">    fontScale = 2f,</span></span><br><span class="line"><span class="meta">    backgroundColor = 0xFF00FF00,</span></span><br><span class="line"><span class="meta">    showBackground = true,</span></span><br><span class="line"><span class="meta">    showSystemUi = true,</span></span><br><span class="line"><span class="meta">    device = Devices.NEXUS_5</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">DefaultPreview</span><span class="params">()</span></span> &#123;</span><br><span class="line">    PlayComposeTheme &#123;</span><br><span class="line">        Greeting(<span class="string">&quot;Android&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>预览效果如下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/6b03da867db348c6a4acb57fdfdb3da7.png"
                      alt="在这里插入图片描述"
                ><br>注意点<br><strong>showBackground 必须为true，backgroundColor 属性才生效，并且backgroundColor 是 ARGB Long，而不是 Color 值</strong><br><strong>同一个函数可以使用多个@Preview注解</strong></p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Preview(</span></span><br><span class="line"><span class="meta">    name = <span class="string">&quot;small font&quot;</span>,</span></span><br><span class="line"><span class="meta">    group = <span class="string">&quot;font scales&quot;</span>,</span></span><br><span class="line"><span class="meta">    fontScale = 0.5f</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@Preview(</span></span><br><span class="line"><span class="meta">    name = <span class="string">&quot;large font&quot;</span>,</span></span><br><span class="line"><span class="meta">    group = <span class="string">&quot;font scales&quot;</span>,</span></span><br><span class="line"><span class="meta">    fontScale = 1.5f</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">DefaultPreview</span><span class="params">()</span></span> &#123;</span><br><span class="line">    PlayComposeTheme &#123;</span><br><span class="line">        Greeting(<span class="string">&quot;Android&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/6e3ebe99526e4bcba3e09b30899629d9.png"
                      alt="在这里插入图片描述"
                ></p>
<blockquote>
<p>如果要传递参数，还有**@PreviewParameter注解**可以配合使用。</p>
</blockquote>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230404114115004.png"
                      alt="image-20230404114115004"
                ></p>
<p>再来看看项目的结构，项目创建成功过后左侧自动帮我们建好了一个叫ui.theme的文件夹，这是Compose提供给开发者控制颜色，形状,主题，字体的文件夹，用以替代xml布局当中的drawble,values文件夹，不难看出以后Compose成熟后的想法，讲个笑话 <strong>官网说：”我们会支持java！“</strong></p>
<p>我们主要讲下主题</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zyf.hellocompose.ui.theme</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.compose.foundation.isSystemInDarkTheme</span><br><span class="line"><span class="keyword">import</span> androidx.compose.material.MaterialTheme</span><br><span class="line"><span class="keyword">import</span> androidx.compose.material.darkColors</span><br><span class="line"><span class="keyword">import</span> androidx.compose.material.lightColors</span><br><span class="line"><span class="keyword">import</span> androidx.compose.runtime.Composable</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> DarkColorPalette = darkColors(</span><br><span class="line">    primary = Purple200,</span><br><span class="line">    primaryVariant = Purple700,</span><br><span class="line">    secondary = Teal200</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> LightColorPalette = lightColors(</span><br><span class="line">    primary = Purple500,</span><br><span class="line">    primaryVariant = Purple700,</span><br><span class="line">    secondary = Teal200</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Other default colors to override</span></span><br><span class="line"><span class="comment">    background = Color.White,</span></span><br><span class="line"><span class="comment">    surface = Color.White,</span></span><br><span class="line"><span class="comment">    onPrimary = Color.White,</span></span><br><span class="line"><span class="comment">    onSecondary = Color.Black,</span></span><br><span class="line"><span class="comment">    onBackground = Color.Black,</span></span><br><span class="line"><span class="comment">    onSurface = Color.Black,</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">HelloComposeTheme</span><span class="params">(darkTheme: <span class="type">Boolean</span> = isSystemInDarkTheme()</span></span>, content: <span class="meta">@Composable</span> () -&gt; <span class="built_in">Unit</span>) &#123;</span><br><span class="line">    <span class="keyword">val</span> colors = <span class="keyword">if</span> (darkTheme) &#123;</span><br><span class="line">        DarkColorPalette</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        LightColorPalette</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MaterialTheme(</span><br><span class="line">        colors = colors,</span><br><span class="line">        typography = Typography,</span><br><span class="line">        shapes = Shapes,</span><br><span class="line">        content = content</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<ul>
<li>DarkColorPalette与LightColorPalette</li>
</ul>
<p>深色主题与亮色主题，如果我们想要更多颜色的主题可以在这里定义，通过定义主题的主要颜色，主要变体及次要颜色等属性配置你想要的主题</p>
<ul>
<li><p>HelloComposeTheme</p>
<p>项目中使用的主题，显而易见这是一个可组合项，通过判定系统的主题来切换合适的样式。一般在setContent{}中 包裹页面使用</p>
<hr>
</li>
</ul>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>复习一下xml布局中常用的五大布局</p>
<ul>
<li><p><a class="link"   href="https://blog.csdn.net/weixin_45932709/article/details/123965369#1_3" >1.线性布局 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p><a class="link"   href="https://blog.csdn.net/weixin_45932709/article/details/123965369#2_37" >2.相对布局 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p><a class="link"   href="https://blog.csdn.net/weixin_45932709/article/details/123965369#3_111" >3.帧布局 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p><a class="link"   href="https://blog.csdn.net/weixin_45932709/article/details/123965369#4_129" >4.表格布局（不常用） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p><a class="link"   href="https://blog.csdn.net/weixin_45932709/article/details/123965369#5_153" >5.绝对布局（不常用） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<hr>
</li>
</ul>
<p>在Compose中，也有几种布局概念，分别为</p>
<h3 id="Column"><a href="#Column" class="headerlink" title="Column"></a>Column</h3><div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Greeting</span><span class="params">(name: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">        Text(text = <span class="string">&quot;Hello <span class="variable">$name</span>!&quot;</span>)</span><br><span class="line">        Text(text = <span class="string">&quot;Hello <span class="variable">$name</span>!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Preview(showBackground = true, showSystemUi = true)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">DefaultPreview</span><span class="params">()</span></span> &#123;</span><br><span class="line">    HelloComposeTheme &#123;</span><br><span class="line">        Greeting(<span class="string">&quot;Compose&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>垂直排列元素的布局</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230404144803400.png"
                      alt="image-20230404144803400"
                ></p>
<hr>
<h3 id="Row"><a href="#Row" class="headerlink" title="Row"></a>Row</h3><div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Greeting</span><span class="params">(name: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//    Column() &#123;</span></span><br><span class="line"><span class="comment">//        Text(text = &quot;Hello $name!&quot;)</span></span><br><span class="line"><span class="comment">//        Text(text = &quot;Hello $name!&quot;)</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    Row() &#123;</span><br><span class="line">        Text(text = <span class="string">&quot;Hello <span class="variable">$name</span>!&quot;</span>)</span><br><span class="line">        Text(text = <span class="string">&quot;Hello <span class="variable">$name</span>!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Preview(showBackground = true, showSystemUi = true)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">DefaultPreview</span><span class="params">()</span></span> &#123;</span><br><span class="line">    HelloComposeTheme &#123;</span><br><span class="line">        Greeting(<span class="string">&quot;Compose&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>水平排列元素的布局</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230404145358361.png"
                      alt="image-20230404145358361"
                ></p>
<hr>
<h3 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Composable</span><br><span class="line">fun Greeting(name: String) &#123;</span><br><span class="line">    Box() &#123;</span><br><span class="line">        Text(text = &quot;Hello $name!&quot;,Modifier.background(Color.Green).size(200.dp))</span><br><span class="line">        Text(text = &quot;11111111111111111111&quot;,Modifier.background(Color.Yellow))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Preview(showBackground = true, showSystemUi = true)</span><br><span class="line">@Composable</span><br><span class="line">fun DefaultPreview() &#123;</span><br><span class="line">    HelloComposeTheme &#123;</span><br><span class="line">        Greeting(&quot;Compose&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>按照代码顺序堆砌在布局中</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230404150122732.png"
                      alt="image-20230404150122732"
                ></p>
<p>上诉代码中<strong>Modifier</strong>为修饰符，其作用在于修饰其可组合项可以更改可组合项的大小、布局、外观，我们就更改了布局的背景和尺寸以更好的表现Box的特性</p>
<hr>
<h3 id="ConstraintLayout"><a href="#ConstraintLayout" class="headerlink" title="ConstraintLayout"></a>ConstraintLayout</h3><p>这个布局要使用需要添加单独的依赖</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation &quot;androidx.constraintlayout:constraintlayout-compose:1.0.1&quot;</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Greeting</span><span class="params">(name: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    ConstraintLayout()&#123;</span><br><span class="line">        <span class="keyword">val</span> (view1, view2,view3) = createRefs()</span><br><span class="line">        Box(</span><br><span class="line">            Modifier.constrainAs(view1) &#123;</span><br><span class="line">                top.linkTo(parent.top)</span><br><span class="line">                start.linkTo(parent.start)</span><br><span class="line">                end.linkTo(parent.end)</span><br><span class="line">                bottom.linkTo(parent.bottom)</span><br><span class="line">            &#125;</span><br><span class="line">                .background(Color.Green)</span><br><span class="line">                .size(<span class="number">200.</span>dp)</span><br><span class="line">        )</span><br><span class="line">        Box(</span><br><span class="line">            Modifier.constrainAs(view2) &#123;</span><br><span class="line">                top.linkTo(view1.bottom)</span><br><span class="line">                start.linkTo(view1.start)</span><br><span class="line">            &#125;</span><br><span class="line">                .background(Color.Yellow)</span><br><span class="line">                .size(<span class="number">200.</span>dp)</span><br><span class="line">        )</span><br><span class="line">        Box(</span><br><span class="line">            Modifier.constrainAs(view3) &#123;</span><br><span class="line">                bottom.linkTo(view1.top)</span><br><span class="line">                start.linkTo(view1.start)</span><br><span class="line">            &#125;</span><br><span class="line">                .background(Color.Blue)</span><br><span class="line">                .size(<span class="number">200.</span>dp)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Preview(showBackground = true, showSystemUi = true)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">DefaultPreview</span><span class="params">()</span></span> &#123;</span><br><span class="line">    HelloComposeTheme &#123;</span><br><span class="line">        Greeting(<span class="string">&quot;Compose&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure></div>

<p>代码将根据约束来确定自己的位置，要使用ConstraintLayout需要经历下列几步操作</p>
<ul>
<li><p>首先要使用**createRefs()**创建约束</p>
</li>
<li><p>然后通过**Modifier.constrainAs()**绑定约束和制定约束</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230404152220446.png"
                      alt="image-20230404152220446"
                ></p>
</li>
</ul>
<h1 id="四-小试牛刀"><a href="#四-小试牛刀" class="headerlink" title="四.小试牛刀"></a>四.小试牛刀</h1><p>相信看了上述的代码过后，你会发现其实很多东西和xml还是互通的，万变不离其宗嘛，只是换了一个表达方式而已；</p>
<p>最后，我们通过一个分享页面的绘制来对比一下两种方式的差别，顺便熟悉下可组合项的使用方法</p>
<p>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/80558c4acda64b398e9a52843cb831a5.png"
                      alt="image-20230404152220446"
                ></p>
<p>上图是我用xml实现的，点击按钮过后弹出二维码分享页面，下面是xml代码</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line">&lt;RelativeLayout</span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:background=<span class="string">&quot;#99000000&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;RelativeLayout</span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_above=<span class="string">&quot;@+id/bottom_layout&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:id=<span class="string">&quot;@+id/ll_qr_code&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;@dimen/dp270&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;@dimen/dp370&quot;</span></span><br><span class="line">            android:layout_centerInParent=<span class="string">&quot;true&quot;</span></span><br><span class="line">            android:background=<span class="string">&quot;@mipmap/self_qr_bg&quot;</span></span><br><span class="line">            android:orientation=<span class="string">&quot;vertical&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:id=<span class="string">&quot;@+id/iv_avatar_address&quot;</span></span><br><span class="line">                android:layout_width=<span class="string">&quot;@dimen/dp40&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;@dimen/dp40&quot;</span></span><br><span class="line">                android:layout_gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">                android:layout_marginTop=<span class="string">&quot;@dimen/dp13&quot;</span></span><br><span class="line">                android:src=<span class="string">&quot;@mipmap/ic_show_qccode_head&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">                android:layout_gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">                android:layout_marginTop=<span class="string">&quot;@dimen/dp4&quot;</span></span><br><span class="line">                android:text=<span class="string">&quot;邀请你加入工队&quot;</span></span><br><span class="line">                android:textColor=<span class="string">&quot;@color/color_1C1C1C&quot;</span></span><br><span class="line">                android:textSize=<span class="string">&quot;@dimen/sp13&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:id=<span class="string">&quot;@+id/tv_title&quot;</span></span><br><span class="line">                android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">                android:layout_gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">                android:layout_marginTop=<span class="string">&quot;@dimen/dp3&quot;</span></span><br><span class="line">                android:ellipsize=<span class="string">&quot;end&quot;</span></span><br><span class="line">                android:singleLine=<span class="string">&quot;true&quot;</span></span><br><span class="line">                android:textColor=<span class="string">&quot;@color/color_969696&quot;</span></span><br><span class="line">                android:textSize=<span class="string">&quot;@dimen/sp12&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:id=<span class="string">&quot;@+id/iv_qr_code&quot;</span></span><br><span class="line">                android:layout_width=<span class="string">&quot;@dimen/dp148&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;@dimen/dp148&quot;</span></span><br><span class="line">                android:layout_gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">                android:layout_marginTop=<span class="string">&quot;@dimen/dp45&quot;</span></span><br><span class="line">                android:src=<span class="string">&quot;@mipmap/add&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">                android:layout_gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">                android:layout_marginTop=<span class="string">&quot;@dimen/dp20&quot;</span></span><br><span class="line">                android:text=<span class="string">&quot;扫码立即加入&quot;</span></span><br><span class="line">                android:textColor=<span class="string">&quot;@color/color_666666&quot;</span></span><br><span class="line">                android:textSize=<span class="string">&quot;@dimen/sp12&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/RelativeLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;RelativeLayout</span><br><span class="line">        android:id=<span class="string">&quot;@+id/bottom_layout&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;@dimen/dp167&quot;</span></span><br><span class="line">        android:layout_alignParentBottom=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:background=<span class="string">&quot;@drawable/shape_top_round_white_14&quot;</span></span><br><span class="line">        android:orientation=<span class="string">&quot;vertical&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:layout_marginTop=<span class="string">&quot;@dimen/dp25&quot;</span></span><br><span class="line">            android:orientation=<span class="string">&quot;horizontal&quot;</span></span><br><span class="line">            android:paddingStart=<span class="string">&quot;@dimen/dp8&quot;</span></span><br><span class="line">            android:paddingEnd=<span class="string">&quot;@dimen/dp8&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:id=<span class="string">&quot;@+id/tv_dingding&quot;</span></span><br><span class="line">                android:layout_width=<span class="string">&quot;@dimen/dp45&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">                android:layout_weight=<span class="string">&quot;1&quot;</span></span><br><span class="line">                android:drawableTop=<span class="string">&quot;@mipmap/icon_details_share_dingding&quot;</span></span><br><span class="line">                android:drawablePadding=<span class="string">&quot;@dimen/dp8&quot;</span></span><br><span class="line">                android:gravity=<span class="string">&quot;center_horizontal&quot;</span></span><br><span class="line">                android:minWidth=<span class="string">&quot;@dimen/dp45&quot;</span></span><br><span class="line">                android:text=<span class="string">&quot;钉钉&quot;</span></span><br><span class="line">                android:textColor=<span class="string">&quot;@color/color_666666&quot;</span></span><br><span class="line">                android:textSize=<span class="string">&quot;12sp&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:id=<span class="string">&quot;@+id/tv_qq&quot;</span></span><br><span class="line">                android:layout_width=<span class="string">&quot;@dimen/dp45&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">                android:layout_weight=<span class="string">&quot;1&quot;</span></span><br><span class="line">                android:drawableTop=<span class="string">&quot;@mipmap/icon_details_share_qq&quot;</span></span><br><span class="line">                android:drawablePadding=<span class="string">&quot;@dimen/dp8&quot;</span></span><br><span class="line">                android:gravity=<span class="string">&quot;center_horizontal&quot;</span></span><br><span class="line">                android:text=<span class="string">&quot;QQ&quot;</span></span><br><span class="line">                android:textColor=<span class="string">&quot;@color/color_666666&quot;</span></span><br><span class="line">                android:textSize=<span class="string">&quot;12sp&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:id=<span class="string">&quot;@+id/tv_wechat&quot;</span></span><br><span class="line">                android:layout_width=<span class="string">&quot;@dimen/dp45&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">                android:layout_weight=<span class="string">&quot;1&quot;</span></span><br><span class="line">                android:drawableTop=<span class="string">&quot;@mipmap/icon_details_share_wechat&quot;</span></span><br><span class="line">                android:drawablePadding=<span class="string">&quot;@dimen/dp8&quot;</span></span><br><span class="line">                android:gravity=<span class="string">&quot;center_horizontal&quot;</span></span><br><span class="line">                android:text=<span class="string">&quot;微信好友&quot;</span></span><br><span class="line">                android:textColor=<span class="string">&quot;@color/color_666666&quot;</span></span><br><span class="line">                android:textSize=<span class="string">&quot;12sp&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:id=<span class="string">&quot;@+id/tv_wechat_moments&quot;</span></span><br><span class="line">                android:layout_width=<span class="string">&quot;@dimen/dp45&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">                android:layout_weight=<span class="string">&quot;1&quot;</span></span><br><span class="line">                android:drawableTop=<span class="string">&quot;@mipmap/icon_details_share_wechat_moments&quot;</span></span><br><span class="line">                android:drawablePadding=<span class="string">&quot;@dimen/dp8&quot;</span></span><br><span class="line">                android:gravity=<span class="string">&quot;center_horizontal&quot;</span></span><br><span class="line">                android:text=<span class="string">&quot;朋友圈&quot;</span></span><br><span class="line">                android:textColor=<span class="string">&quot;@color/color_666666&quot;</span></span><br><span class="line">                android:textSize=<span class="string">&quot;12sp&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:id=<span class="string">&quot;@+id/tv_copy&quot;</span></span><br><span class="line">                android:layout_width=<span class="string">&quot;@dimen/dp45&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">                android:layout_weight=<span class="string">&quot;1&quot;</span></span><br><span class="line">                android:drawableTop=<span class="string">&quot;@mipmap/icon_details_share_copy&quot;</span></span><br><span class="line">                android:drawablePadding=<span class="string">&quot;@dimen/dp8&quot;</span></span><br><span class="line">                android:gravity=<span class="string">&quot;center_horizontal&quot;</span></span><br><span class="line">                android:text=<span class="string">&quot;复制链接&quot;</span></span><br><span class="line">                android:textColor=<span class="string">&quot;@color/color_666666&quot;</span></span><br><span class="line">                android:textSize=<span class="string">&quot;12sp&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:id=<span class="string">&quot;@+id/tv_save&quot;</span></span><br><span class="line">                android:layout_width=<span class="string">&quot;@dimen/dp45&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">                android:layout_weight=<span class="string">&quot;1&quot;</span></span><br><span class="line">                android:drawableTop=<span class="string">&quot;@mipmap/icon_details_share_save&quot;</span></span><br><span class="line">                android:drawablePadding=<span class="string">&quot;@dimen/dp8&quot;</span></span><br><span class="line">                android:gravity=<span class="string">&quot;center_horizontal&quot;</span></span><br><span class="line">                android:text=<span class="string">&quot;保存图片&quot;</span></span><br><span class="line">                android:textColor=<span class="string">&quot;@color/color_666666&quot;</span></span><br><span class="line">                android:textSize=<span class="string">&quot;12sp&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=<span class="string">&quot;@+id/tv_cancel&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;@dimen/dp48&quot;</span></span><br><span class="line">            android:layout_alignParentBottom=<span class="string">&quot;true&quot;</span></span><br><span class="line">            android:background=<span class="string">&quot;@color/white&quot;</span></span><br><span class="line">            android:gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;取消&quot;</span></span><br><span class="line">            android:textColor=<span class="string">&quot;@color/color_666666&quot;</span></span><br><span class="line">            android:textSize=<span class="string">&quot;16sp&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/RelativeLayout&gt;</span><br><span class="line"></span><br><span class="line">&lt;/RelativeLayout&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>因为是透明弹窗，所以需要一个透明弹窗的样式，这个compose也是一样的</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line">&lt;!--透明activity的style--&gt;</span><br><span class="line">&lt;style name=<span class="string">&quot;transparent_activity&quot;</span>&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;android:windowBackground&quot;</span>&gt;<span class="meta">@color</span>/transparent&lt;/item&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;android:windowNoTitle&quot;</span>&gt;<span class="literal">true</span>&lt;/item&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;android:windowIsTranslucent&quot;</span>&gt;<span class="literal">true</span>&lt;/item&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;android:windowAnimationStyle&quot;</span>&gt;<span class="meta">@android</span>:style/Animation.Translucent&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="Compose实现"><a href="#Compose实现" class="headerlink" title="Compose实现"></a>Compose实现</h2><p>通过上面的xml布局不难看出，我们想要实现的这个分享页面，结构如下<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/975cb32ea56f4b50aa1e262e56eab84c.png"
                      alt="image-20230404152220446"
                ><br>接下来我们将分享页面拆分为 二维码分享组件和底部分享组件来实现，底部分享组件在下方，二维码分享组件在中间，所以我采用了约束布局</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分享页面</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ShareQRCode</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ConstraintLayout &#123;</span><br><span class="line">        <span class="keyword">val</span> (bottomLayout, llQrcode) = createRefs()</span><br><span class="line"></span><br><span class="line">		<span class="comment">//二维码分享组件</span></span><br><span class="line">        LinearLayoutQrcode(</span><br><span class="line">            Modifier.constrainAs(llQrcode)&#123;</span><br><span class="line">                top.linkTo(parent.top)</span><br><span class="line">                start.linkTo(parent.start)</span><br><span class="line">                end.linkTo(parent.end)</span><br><span class="line">                bottom.linkTo(parent.bottom)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">		<span class="comment">//底部分享组件</span></span><br><span class="line">        BottomLayout(</span><br><span class="line">            modifier = Modifier.constrainAs(bottomLayout) &#123;</span><br><span class="line">                bottom.linkTo(parent.bottom)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="1-底部分享组件"><a href="#1-底部分享组件" class="headerlink" title="1.底部分享组件"></a>1.底部分享组件</h2><p>让我们来分析下，底部分享组件需要哪些元素<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/7e64312536814309903d71be14bfd921.png"
                      alt="在这里插入图片描述"
                ><br>所以我们需要这样一个结构来实现</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line">Column&#123;<span class="comment">//背景需要半圆角</span></span><br><span class="line"></span><br><span class="line"> Row&#123;</span><br><span class="line">	<span class="comment">//这里有六个按钮</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消按钮需要在底部</span></span><br><span class="line">Button&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="a-背景半圆角"><a href="#a-背景半圆角" class="headerlink" title="a.背景半圆角"></a>a.背景半圆角</h3><div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line">Column(</span><br><span class="line">     modifier = modifier</span><br><span class="line">         .height(<span class="number">167.</span>dp)</span><br><span class="line">         .background(</span><br><span class="line">             colorResource(R.color.color_f5f5f5),</span><br><span class="line">             shape = RoundedCornerShape(<span class="number">16.</span>dp, <span class="number">16.</span>dp, <span class="number">0.</span>dp, <span class="number">0.</span>dp)</span><br><span class="line">         )</span><br><span class="line"> )</span><br></pre></td></tr></table></figure></div>

<p>shape 属性设置圆角，上述代码中RoundedCornerShape分别设置左上，右上，左下，右下的圆角<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/86d942f964f8449db6be0b585c29280a.png"
                      alt="在这里插入图片描述"
                ></p>
<h3 id="b-自定义分享按钮"><a href="#b-自定义分享按钮" class="headerlink" title="b.自定义分享按钮"></a>b.自定义分享按钮</h3><p> 自定义分享按钮的样式是这样的<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/c209d631cc8449ea8e6de929929f6af6.png"
                      alt="在这里插入图片描述"
                ><br>上面是一个图片，下面是文字，然后都有一个局居中，代码如下</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ImageButton</span><span class="params">(<span class="meta">@DrawableRes</span> id: <span class="type">Int</span>, text: <span class="type">String</span>, modifier: <span class="type">Modifier</span>)</span></span> &#123;</span><br><span class="line">    Column(</span><br><span class="line">        modifier</span><br><span class="line">            .width(<span class="number">45.</span>dp),</span><br><span class="line">    ) &#123;</span><br><span class="line">        Image(</span><br><span class="line">            painter = painterResource(id = id),</span><br><span class="line">            contentDescription = <span class="string">&quot;&quot;</span>,</span><br><span class="line">            Modifier</span><br><span class="line">                .fillMaxWidth()</span><br><span class="line">                .padding(bottom = <span class="number">8.</span>dp),</span><br><span class="line">            Alignment.Center</span><br><span class="line">        )</span><br><span class="line">        Text(</span><br><span class="line">            text = text,</span><br><span class="line">            fontSize = <span class="number">11.</span>sp,</span><br><span class="line">            color = colorResource(id = R.color.color_666666),</span><br><span class="line">            textAlign = TextAlign.Center,</span><br><span class="line">            modifier = Modifier.fillMaxWidth()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>Alignment.Center</strong>是一个居中属性，<strong>TextAlign.Center</strong>代表文字居中，但是在实际使用中，我发现单独使用Alignment.Center并不生效，于是我搭配了Modifier.fillMaxWidth()使其生效，painterResource是使用图片资源函数</p>
<p>然后再在row中使用，从xml中可以看到这个地方使用了权重，在compose中我们也可以用 Modifier.weight()属性来代替</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line">Row(</span><br><span class="line">           Modifier</span><br><span class="line">               .fillMaxWidth()</span><br><span class="line">               .padding(<span class="number">8.</span>dp, <span class="number">25.</span>dp, <span class="number">8.</span>dp, <span class="number">0.</span>dp)</span><br><span class="line"></span><br><span class="line">       ) &#123;</span><br><span class="line">           ImageButton(</span><br><span class="line">               id = R.mipmap.icon_details_share_dingding,</span><br><span class="line">               text = <span class="string">&quot;钉钉&quot;</span>,</span><br><span class="line">               Modifier.weight(<span class="number">1f</span>)</span><br><span class="line">           )</span><br><span class="line">           ImageButton(</span><br><span class="line">               id = R.mipmap.icon_details_share_qq,</span><br><span class="line">               text = <span class="string">&quot;QQ&quot;</span>,</span><br><span class="line">               Modifier.weight(<span class="number">1f</span>)</span><br><span class="line">           )</span><br><span class="line">           ImageButton(</span><br><span class="line">               id = R.mipmap.icon_details_share_wechat,</span><br><span class="line">               text = <span class="string">&quot;微信好友&quot;</span>,</span><br><span class="line">               Modifier.weight(<span class="number">1f</span>)</span><br><span class="line">           )</span><br><span class="line">           ImageButton(</span><br><span class="line">               id = R.mipmap.icon_details_share_wechat_moments,</span><br><span class="line">               text = <span class="string">&quot;朋友圈&quot;</span>,</span><br><span class="line">               Modifier.weight(<span class="number">1f</span>)</span><br><span class="line">           )</span><br><span class="line">           ImageButton(</span><br><span class="line">               id = R.mipmap.icon_details_share_copy,</span><br><span class="line">               text = <span class="string">&quot;复制链接&quot;</span>,</span><br><span class="line">               Modifier.weight(<span class="number">1f</span>)</span><br><span class="line">           )</span><br><span class="line">           ImageButton(</span><br><span class="line">               id = R.mipmap.icon_details_share_save,</span><br><span class="line">               text = <span class="string">&quot;保存图片&quot;</span>,</span><br><span class="line">               Modifier.weight(<span class="number">1f</span>)</span><br><span class="line">           )</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="c-在底部的取消按钮"><a href="#c-在底部的取消按钮" class="headerlink" title="c.在底部的取消按钮"></a>c.在底部的取消按钮</h3><p> 为了学习嘛，就尝试了另外一种将控件放于底部的方式</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"> Column(</span><br><span class="line">            Modifier.fillMaxHeight(),</span><br><span class="line">            Arrangement.Bottom</span><br><span class="line">        )&#123;</span><br><span class="line">Button（）&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="d-总体"><a href="#d-总体" class="headerlink" title="d.总体"></a>d.总体</h3><p>这里为了显示点击的Toast，多传递了一个context: Activity，BottomLayout完整代码如下</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">BottomLayout</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    modifier: <span class="type">Modifier</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    context: <span class="type">Activity</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    Column(</span><br><span class="line">        modifier = modifier</span><br><span class="line">            .height(<span class="number">167.</span>dp)</span><br><span class="line">            .background(</span><br><span class="line">                colorResource(R.color.color_f5f5f5),</span><br><span class="line">                shape = RoundedCornerShape(<span class="number">16.</span>dp, <span class="number">16.</span>dp, <span class="number">0.</span>dp, <span class="number">0.</span>dp)</span><br><span class="line">            )</span><br><span class="line">    ) &#123;</span><br><span class="line">        Row(</span><br><span class="line">            Modifier</span><br><span class="line">                .fillMaxWidth()</span><br><span class="line">                .padding(<span class="number">8.</span>dp, <span class="number">25.</span>dp, <span class="number">8.</span>dp, <span class="number">0.</span>dp)</span><br><span class="line"></span><br><span class="line">        ) &#123;</span><br><span class="line">            ImageButton(</span><br><span class="line">                id = R.mipmap.icon_details_share_dingding,</span><br><span class="line">                text = <span class="string">&quot;钉钉&quot;</span>,</span><br><span class="line">                Modifier.weight(<span class="number">1f</span>)</span><br><span class="line">            )</span><br><span class="line">            ImageButton(</span><br><span class="line">                id = R.mipmap.icon_details_share_qq,</span><br><span class="line">                text = <span class="string">&quot;QQ&quot;</span>,</span><br><span class="line">                Modifier.weight(<span class="number">1f</span>)</span><br><span class="line">            )</span><br><span class="line">            ImageButton(</span><br><span class="line">                id = R.mipmap.icon_details_share_wechat,</span><br><span class="line">                text = <span class="string">&quot;微信好友&quot;</span>,</span><br><span class="line">                Modifier.weight(<span class="number">1f</span>)</span><br><span class="line">            )</span><br><span class="line">            ImageButton(</span><br><span class="line">                id = R.mipmap.icon_details_share_wechat_moments,</span><br><span class="line">                text = <span class="string">&quot;朋友圈&quot;</span>,</span><br><span class="line">                Modifier.weight(<span class="number">1f</span>)</span><br><span class="line">            )</span><br><span class="line">            ImageButton(</span><br><span class="line">                id = R.mipmap.icon_details_share_copy,</span><br><span class="line">                text = <span class="string">&quot;复制链接&quot;</span>,</span><br><span class="line">                Modifier.weight(<span class="number">1f</span>)</span><br><span class="line">            )</span><br><span class="line">            ImageButton(</span><br><span class="line">                id = R.mipmap.icon_details_share_save,</span><br><span class="line">                text = <span class="string">&quot;保存图片&quot;</span>,</span><br><span class="line">                Modifier.weight(<span class="number">1f</span>)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Column(</span><br><span class="line">            Modifier.fillMaxHeight(),</span><br><span class="line">            Arrangement.Bottom</span><br><span class="line">        ) &#123;</span><br><span class="line">            Button(</span><br><span class="line">                onClick = &#123;</span><br><span class="line">                    Toast.makeText(context, <span class="string">&quot;取消分享&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">                    context.finish()</span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                Modifier.fillMaxWidth(),</span><br><span class="line">                colors = ButtonDefaults.buttonColors(</span><br><span class="line">                    containerColor = Color.White</span><br><span class="line">                ),</span><br><span class="line">                shape = RoundedCornerShape(<span class="number">0.</span>dp)<span class="comment">//圆角</span></span><br><span class="line"></span><br><span class="line">            ) &#123;</span><br><span class="line">                Text(</span><br><span class="line">                    text = <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">                    fontSize = <span class="number">16.</span>sp,</span><br><span class="line">                    textAlign = TextAlign.Center,</span><br><span class="line">                    modifier = Modifier</span><br><span class="line">                        .fillMaxWidth()</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ImageButton</span><span class="params">(<span class="meta">@DrawableRes</span> id: <span class="type">Int</span>, text: <span class="type">String</span>, modifier: <span class="type">Modifier</span>)</span></span> &#123;</span><br><span class="line">    Column(</span><br><span class="line">        modifier</span><br><span class="line">            .width(<span class="number">45.</span>dp),</span><br><span class="line">    ) &#123;</span><br><span class="line">        Image(</span><br><span class="line">            painter = painterResource(id = id),</span><br><span class="line">            contentDescription = <span class="string">&quot;&quot;</span>,</span><br><span class="line">            Modifier</span><br><span class="line">                .fillMaxWidth()</span><br><span class="line">                .padding(bottom = <span class="number">8.</span>dp),</span><br><span class="line">            Alignment.Center</span><br><span class="line">        )</span><br><span class="line">        Text(</span><br><span class="line">            text = text,</span><br><span class="line">            fontSize = <span class="number">11.</span>sp,</span><br><span class="line">            color = colorResource(id = R.color.color_666666),</span><br><span class="line">            textAlign = TextAlign.Center,</span><br><span class="line">            modifier = Modifier.fillMaxWidth()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>效果如下<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/7344695b99454ad5a355f893d7ffc12c.jpeg"
                      alt="在这里插入图片描述"
                ></p>
<h2 id="2-二维码分享组件"><a href="#2-二维码分享组件" class="headerlink" title="2.二维码分享组件"></a>2.二维码分享组件</h2><p>一样的我们先分析一下<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/c0053df1dead413982c1524b3d9992d0.png"
                      alt="在这里插入图片描述"
                ><br>可以看出二维码分享组件还是比较简单，当然在绘制组件前还要定位</p>
<h3 id="a-组件居中"><a href="#a-组件居中" class="headerlink" title="a.组件居中"></a>a.组件居中</h3><p>首先我们让它显示出来</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">LinearLayoutQrcode</span><span class="params">(modifier: <span class="type">Modifier</span>)</span></span>&#123;</span><br><span class="line">    Column(</span><br><span class="line">        modifier.paint(painterResource(id = R.mipmap.self_qr_bg))</span><br><span class="line">            .width(<span class="number">270.</span>dp)</span><br><span class="line">            .height(<span class="number">370.</span>dp)</span><br><span class="line">    ) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行出来效果如下，显而易见，这和我们理想中的效果有点偏差<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/00145d66ded7497b8250a6950afb373e.png"
                      alt="在这里插入图片描述"
                ><br>对比了下之前的xml布局，发现我们在compose中的组件是居于父布局居中的，xml布局是上半部分布局居中的，下面我们来修改一下，将ConstraintLayout中的居中取消，并在Column中居中</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用</span></span><br><span class="line">        LinearLayoutQrcode(</span><br><span class="line">            Modifier.constrainAs(llQrcode)&#123;</span><br><span class="line"><span class="comment">//                top.linkTo(parent.top)</span></span><br><span class="line"><span class="comment">//                start.linkTo(parent.start)</span></span><br><span class="line"><span class="comment">//                end.linkTo(parent.end)</span></span><br><span class="line"><span class="comment">//                bottom.linkTo(parent.bottom)</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">LinearLayoutQrcode</span><span class="params">(modifier: <span class="type">Modifier</span>)</span></span>&#123;</span><br><span class="line">    Column(</span><br><span class="line">        modifier.paint(painterResource(id = R.mipmap.self_qr_bg))</span><br><span class="line">            .fillMaxSize(),</span><br><span class="line">        verticalArrangement = Arrangement.Center,</span><br><span class="line">        horizontalAlignment = Alignment.CenterHorizontally</span><br><span class="line"></span><br><span class="line">    ) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>然而并没有变化，给我干蒙了，在仔细检查后，我觉得可能是因为LinearLayoutQrcode使用的是父布局的modifier，所以fillMaxSize属性也是父布局的，所以我用了另外一个办法，先让LinearLayoutQrcode组件设置一个和BottomLayout高度一样的外边距，然后再让它居中，就能实现我们想要的效果，可是compose没有外边距，所以我多包了一层Column，代码如下</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用</span></span><br><span class="line">        LinearLayoutQrcode(</span><br><span class="line">            Modifier.constrainAs(llQrcode)&#123;</span><br><span class="line">                top.linkTo(parent.top)</span><br><span class="line">                start.linkTo(parent.start)</span><br><span class="line">                end.linkTo(parent.end)</span><br><span class="line">                bottom.linkTo(parent.bottom)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">LinearLayoutQrcode</span><span class="params">(modifier: <span class="type">Modifier</span>)</span></span>&#123;</span><br><span class="line">    Column(</span><br><span class="line">        modifier</span><br><span class="line">            .padding(bottom = <span class="number">167.</span>dp)</span><br><span class="line">    ) &#123;</span><br><span class="line"></span><br><span class="line">        Column(</span><br><span class="line">            Modifier.paint(painterResource(id = R.mipmap.self_qr_bg)),</span><br><span class="line">            horizontalAlignment = Alignment.CenterHorizontally</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>效果<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/a72ff79407e243d0b66a5f1609d8fd35.jpeg"
                      alt="在这里插入图片描述"
                ><br>可以看到，非常理想啊，我们继续下一步</p>
<h3 id="b-顶部头像"><a href="#b-顶部头像" class="headerlink" title="b.顶部头像"></a>b.顶部头像</h3><div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line">Image(</span><br><span class="line">               painter = painterResource(id = R.mipmap.ic_show_qccode_head),</span><br><span class="line">               contentDescription = <span class="string">&quot;默认头像&quot;</span>,</span><br><span class="line">               Modifier</span><br><span class="line">                   .width(<span class="number">53.</span>dp)</span><br><span class="line">                   .height(<span class="number">53.</span>dp)</span><br><span class="line">                   .padding(top = <span class="number">13.</span>dp)</span><br><span class="line">           )</span><br><span class="line">           Text(</span><br><span class="line">               text = <span class="string">&quot;邀请你加入工队&quot;</span>,</span><br><span class="line">               color = colorResource(id = R.color.color_1C1C1C),</span><br><span class="line">               fontSize = <span class="number">13.</span>sp,</span><br><span class="line">               textAlign = TextAlign.Center,</span><br><span class="line">               modifier = Modifier</span><br><span class="line">                   .fillMaxWidth()</span><br><span class="line">           )</span><br><span class="line">           Text(</span><br><span class="line">               text = <span class="string">&quot;水电费-试一试1-施工队&quot;</span>, color = colorResource(id = R.color.color_969696),</span><br><span class="line">               fontSize = <span class="number">12.</span>sp,</span><br><span class="line">               textAlign = TextAlign.Center,</span><br><span class="line">               modifier = Modifier</span><br><span class="line">                   .fillMaxWidth()</span><br><span class="line">                   .padding(top = <span class="number">3.</span>dp)</span><br><span class="line">           )</span><br></pre></td></tr></table></figure></div>

<p>这就没啥好说的，比较简单，有点不习惯的就是没有了外边距，好难受好难受<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/80558c4acda64b398e9a52843cb831a5.png"
                      alt="在这里插入图片描述"
                ></p>
<h3 id="c-二维码"><a href="#c-二维码" class="headerlink" title="c.二维码"></a>c.二维码</h3><p>最后加上二维码</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line">Image(</span><br><span class="line">               painter = painterResource(id = R.mipmap.qrcode),</span><br><span class="line">               contentDescription = <span class="string">&quot;默认头像&quot;</span>,</span><br><span class="line">               Modifier</span><br><span class="line">                   .width(<span class="number">193.</span>dp)</span><br><span class="line">                   .height(<span class="number">193.</span>dp)</span><br><span class="line">                   .padding(top = <span class="number">45.</span>dp),</span><br><span class="line"></span><br><span class="line">               )</span><br><span class="line"></span><br><span class="line">           Text(</span><br><span class="line">               text = <span class="string">&quot;扫码立即加入&quot;</span>,</span><br><span class="line">               color = colorResource(id = R.color.color_666666),</span><br><span class="line">               fontSize = <span class="number">12.</span>sp,</span><br><span class="line">               textAlign = TextAlign.Center,</span><br><span class="line">               modifier = Modifier</span><br><span class="line">                   .fillMaxWidth()</span><br><span class="line">                   .padding(top = <span class="number">20.</span>dp)</span><br><span class="line">           )</span><br></pre></td></tr></table></figure></div>

<p>大功告成，让我们看看效果</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/80558c4acda64b398e9a52843cb831a5.png"
                      alt="在这里插入图片描述"
                ></p>
<p>非常的完美啊，和xml分毫不差，大功告成，完整代码</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xf.mycomepose</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity</span><br><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageButton</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast</span><br><span class="line"><span class="keyword">import</span> androidx.activity.ComponentActivity</span><br><span class="line"><span class="keyword">import</span> androidx.activity.compose.setContent</span><br><span class="line"><span class="keyword">import</span> androidx.<span class="keyword">annotation</span>.DrawableRes</span><br><span class="line"><span class="keyword">import</span> androidx.compose.foundation.Image</span><br><span class="line"><span class="keyword">import</span> androidx.compose.foundation.background</span><br><span class="line"><span class="keyword">import</span> androidx.compose.foundation.layout.*</span><br><span class="line"><span class="keyword">import</span> androidx.compose.foundation.shape.CornerBasedShape</span><br><span class="line"><span class="keyword">import</span> androidx.compose.foundation.shape.CornerSize</span><br><span class="line"><span class="keyword">import</span> androidx.compose.foundation.shape.RoundedCornerShape</span><br><span class="line"><span class="keyword">import</span> androidx.compose.material3.*</span><br><span class="line"><span class="keyword">import</span> androidx.compose.runtime.Composable</span><br><span class="line"><span class="keyword">import</span> androidx.compose.ui.Alignment</span><br><span class="line"><span class="keyword">import</span> androidx.compose.ui.Modifier</span><br><span class="line"><span class="keyword">import</span> androidx.compose.ui.draw.drawBehind</span><br><span class="line"><span class="keyword">import</span> androidx.compose.ui.draw.paint</span><br><span class="line"><span class="keyword">import</span> androidx.compose.ui.graphics.Color</span><br><span class="line"><span class="keyword">import</span> androidx.compose.ui.graphics.RectangleShape</span><br><span class="line"><span class="keyword">import</span> androidx.compose.ui.res.colorResource</span><br><span class="line"><span class="keyword">import</span> androidx.compose.ui.res.painterResource</span><br><span class="line"><span class="keyword">import</span> androidx.compose.ui.text.style.TextAlign</span><br><span class="line"><span class="keyword">import</span> androidx.compose.ui.tooling.preview.Preview</span><br><span class="line"><span class="keyword">import</span> androidx.compose.ui.unit.dp</span><br><span class="line"><span class="keyword">import</span> androidx.compose.ui.unit.sp</span><br><span class="line"><span class="keyword">import</span> androidx.constraintlayout.compose.ConstraintLayout</span><br><span class="line"><span class="keyword">import</span> com.xf.mycomepose.ui.theme.MyComeposeTheme</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShareQRCodeActivity</span> : <span class="type">ComponentActivity</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContent &#123;</span><br><span class="line">            MyComeposeTheme &#123;</span><br><span class="line">                <span class="comment">// A surface container using the &#x27;background&#x27; color from the theme</span></span><br><span class="line">                Surface(</span><br><span class="line">                    modifier = Modifier.fillMaxSize(),</span><br><span class="line">                    color = Color(<span class="number">99000000</span>)</span><br><span class="line">                ) &#123;</span><br><span class="line">                    ShareQRCode(<span class="keyword">this</span><span class="symbol">@ShareQRCodeActivity</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ShareQRCode</span><span class="params">(context: <span class="type">Activity</span>)</span></span> &#123;</span><br><span class="line">    ConstraintLayout &#123;</span><br><span class="line">        <span class="keyword">val</span> (bottomLayout, llQrcode) = createRefs()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        LinearLayoutQrcode(</span><br><span class="line">            Modifier.constrainAs(llQrcode) &#123;</span><br><span class="line">                top.linkTo(parent.top)</span><br><span class="line">                start.linkTo(parent.start)</span><br><span class="line">                end.linkTo(parent.end)</span><br><span class="line">                bottom.linkTo(parent.bottom)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        BottomLayout(</span><br><span class="line">            modifier = Modifier.constrainAs(bottomLayout) &#123;</span><br><span class="line">                bottom.linkTo(parent.bottom)</span><br><span class="line">            &#125;,</span><br><span class="line">            context = context</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">LinearLayoutQrcode</span><span class="params">(modifier: <span class="type">Modifier</span>)</span></span> &#123;</span><br><span class="line">    Column(</span><br><span class="line">        modifier</span><br><span class="line">            .padding(bottom = <span class="number">167.</span>dp)</span><br><span class="line">    ) &#123;</span><br><span class="line"></span><br><span class="line">        Column(</span><br><span class="line">            Modifier.paint(painterResource(id = R.mipmap.self_qr_bg)),</span><br><span class="line">            horizontalAlignment = Alignment.CenterHorizontally</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            Image(</span><br><span class="line">                painter = painterResource(id = R.mipmap.ic_show_qccode_head),</span><br><span class="line">                contentDescription = <span class="string">&quot;默认头像&quot;</span>,</span><br><span class="line">                Modifier</span><br><span class="line">                    .width(<span class="number">53.</span>dp)</span><br><span class="line">                    .height(<span class="number">53.</span>dp)</span><br><span class="line">                    .padding(top = <span class="number">13.</span>dp)</span><br><span class="line">            )</span><br><span class="line">            Text(</span><br><span class="line">                text = <span class="string">&quot;邀请你加入工队&quot;</span>,</span><br><span class="line">                color = colorResource(id = R.color.color_1C1C1C),</span><br><span class="line">                fontSize = <span class="number">13.</span>sp,</span><br><span class="line">                textAlign = TextAlign.Center,</span><br><span class="line">                modifier = Modifier</span><br><span class="line">                    .fillMaxWidth()</span><br><span class="line">            )</span><br><span class="line">            Text(</span><br><span class="line">                text = <span class="string">&quot;水电费-试一试1-施工队&quot;</span>,</span><br><span class="line">                color = colorResource(id = R.color.color_969696),</span><br><span class="line">                fontSize = <span class="number">12.</span>sp,</span><br><span class="line">                textAlign = TextAlign.Center,</span><br><span class="line">                modifier = Modifier</span><br><span class="line">                    .fillMaxWidth()</span><br><span class="line">                    .padding(top = <span class="number">3.</span>dp)</span><br><span class="line">            )</span><br><span class="line">            Image(</span><br><span class="line">                painter = painterResource(id = R.mipmap.qrcode),</span><br><span class="line">                contentDescription = <span class="string">&quot;默认头像&quot;</span>,</span><br><span class="line">                Modifier</span><br><span class="line">                    .width(<span class="number">193.</span>dp)</span><br><span class="line">                    .height(<span class="number">193.</span>dp)</span><br><span class="line">                    .padding(top = <span class="number">45.</span>dp),</span><br><span class="line"></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">            Text(</span><br><span class="line">                text = <span class="string">&quot;扫码立即加入&quot;</span>,</span><br><span class="line">                color = colorResource(id = R.color.color_666666),</span><br><span class="line">                fontSize = <span class="number">12.</span>sp,</span><br><span class="line">                textAlign = TextAlign.Center,</span><br><span class="line">                modifier = Modifier</span><br><span class="line">                    .fillMaxWidth()</span><br><span class="line">                    .padding(top = <span class="number">20.</span>dp)</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">BottomLayout</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    modifier: <span class="type">Modifier</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    context: <span class="type">Activity</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    Column(</span><br><span class="line">        modifier = modifier</span><br><span class="line">            .height(<span class="number">167.</span>dp)</span><br><span class="line">            .background(</span><br><span class="line">                colorResource(R.color.color_f5f5f5),</span><br><span class="line">                shape = RoundedCornerShape(<span class="number">16.</span>dp, <span class="number">16.</span>dp, <span class="number">0.</span>dp, <span class="number">0.</span>dp)</span><br><span class="line">            )</span><br><span class="line">    ) &#123;</span><br><span class="line">        Row(</span><br><span class="line">            Modifier</span><br><span class="line">                .fillMaxWidth()</span><br><span class="line">                .padding(<span class="number">8.</span>dp, <span class="number">25.</span>dp, <span class="number">8.</span>dp, <span class="number">0.</span>dp)</span><br><span class="line"></span><br><span class="line">        ) &#123;</span><br><span class="line">            ImageButton(</span><br><span class="line">                id = R.mipmap.icon_details_share_dingding,</span><br><span class="line">                text = <span class="string">&quot;钉钉&quot;</span>,</span><br><span class="line">                Modifier.weight(<span class="number">1f</span>)</span><br><span class="line">            )</span><br><span class="line">            ImageButton(</span><br><span class="line">                id = R.mipmap.icon_details_share_qq,</span><br><span class="line">                text = <span class="string">&quot;QQ&quot;</span>,</span><br><span class="line">                Modifier.weight(<span class="number">1f</span>)</span><br><span class="line">            )</span><br><span class="line">            ImageButton(</span><br><span class="line">                id = R.mipmap.icon_details_share_wechat,</span><br><span class="line">                text = <span class="string">&quot;微信好友&quot;</span>,</span><br><span class="line">                Modifier.weight(<span class="number">1f</span>)</span><br><span class="line">            )</span><br><span class="line">            ImageButton(</span><br><span class="line">                id = R.mipmap.icon_details_share_wechat_moments,</span><br><span class="line">                text = <span class="string">&quot;朋友圈&quot;</span>,</span><br><span class="line">                Modifier.weight(<span class="number">1f</span>)</span><br><span class="line">            )</span><br><span class="line">            ImageButton(</span><br><span class="line">                id = R.mipmap.icon_details_share_copy,</span><br><span class="line">                text = <span class="string">&quot;复制链接&quot;</span>,</span><br><span class="line">                Modifier.weight(<span class="number">1f</span>)</span><br><span class="line">            )</span><br><span class="line">            ImageButton(</span><br><span class="line">                id = R.mipmap.icon_details_share_save,</span><br><span class="line">                text = <span class="string">&quot;保存图片&quot;</span>,</span><br><span class="line">                Modifier.weight(<span class="number">1f</span>)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Column(</span><br><span class="line">            Modifier.fillMaxHeight(),</span><br><span class="line">            Arrangement.Bottom</span><br><span class="line">        ) &#123;</span><br><span class="line">            Button(</span><br><span class="line">                onClick = &#123;</span><br><span class="line">                    Toast.makeText(context, <span class="string">&quot;取消分享&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">                    context.finish()</span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                Modifier.fillMaxWidth(),</span><br><span class="line">                colors = ButtonDefaults.buttonColors(</span><br><span class="line">                    containerColor = Color.White</span><br><span class="line">                ),</span><br><span class="line">                shape = RoundedCornerShape(<span class="number">0.</span>dp)<span class="comment">//圆角</span></span><br><span class="line"></span><br><span class="line">            ) &#123;</span><br><span class="line">                Text(</span><br><span class="line">                    text = <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">                    fontSize = <span class="number">16.</span>sp,</span><br><span class="line">                    textAlign = TextAlign.Center,</span><br><span class="line">                    modifier = Modifier</span><br><span class="line">                        .fillMaxWidth()</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ImageButton</span><span class="params">(<span class="meta">@DrawableRes</span> id: <span class="type">Int</span>, text: <span class="type">String</span>, modifier: <span class="type">Modifier</span>)</span></span> &#123;</span><br><span class="line">    Column(</span><br><span class="line">        modifier</span><br><span class="line">            .width(<span class="number">45.</span>dp),</span><br><span class="line">    ) &#123;</span><br><span class="line">        Image(</span><br><span class="line">            painter = painterResource(id = id),</span><br><span class="line">            contentDescription = <span class="string">&quot;&quot;</span>,</span><br><span class="line">            Modifier</span><br><span class="line">                .fillMaxWidth()</span><br><span class="line">                .padding(bottom = <span class="number">8.</span>dp),</span><br><span class="line">            Alignment.Center</span><br><span class="line">        )</span><br><span class="line">        Text(</span><br><span class="line">            text = text,</span><br><span class="line">            fontSize = <span class="number">11.</span>sp,</span><br><span class="line">            color = colorResource(id = R.color.color_666666),</span><br><span class="line">            textAlign = TextAlign.Center,</span><br><span class="line">            modifier = Modifier.fillMaxWidth()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>在MainActivity中跳转到这个页面</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> intent = Intent()</span><br><span class="line">        intent.setClass(<span class="keyword">this</span>, ShareQRCodeActivity::<span class="keyword">class</span>.java)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Button(</span><br><span class="line">            onClick = &#123;</span><br><span class="line">                startActivity(mainActivity, intent, <span class="literal">null</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            modifier = Modifier.constrainAs(button) &#123;</span><br><span class="line">                top.linkTo(parent.top)</span><br><span class="line">                start.linkTo(parent.start)</span><br><span class="line">                end.linkTo(parent.end)</span><br><span class="line">                bottom.linkTo(parent.bottom)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        ) &#123;</span><br><span class="line">            Text(text = <span class="string">&quot;Hello <span class="variable">$name</span>!&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>别忘了透明主题</p>
]]></content>
      <categories>
        <category>andorid</category>
      </categories>
      <tags>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>RecyclerView中让textView动态限制在一行（ViewTreeObserver</title>
    <url>/2023/02/17/RecyclerView%E4%B8%AD%E8%AE%A9textView%E5%8A%A8%E6%80%81%E9%99%90%E5%88%B6%E5%9C%A8%E4%B8%80%E8%A1%8C%EF%BC%88ViewTreeObserver/RecyclerView%E4%B8%AD%E8%AE%A9textView%E5%8A%A8%E6%80%81%E9%99%90%E5%88%B6%E5%9C%A8%E4%B8%80%E8%A1%8C%EF%BC%88ViewTreeObserver/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="关键字：OnPreDrawListener、ViewTreeObserver、正确移除、RecyclerView"><a href="#关键字：OnPreDrawListener、ViewTreeObserver、正确移除、RecyclerView" class="headerlink" title="关键字：OnPreDrawListener、ViewTreeObserver、正确移除、RecyclerView"></a>关键字：OnPreDrawListener、ViewTreeObserver、正确移除、RecyclerView</h2><h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>做安卓的都知道的常识，一般在一个列表中的一项文字显示不下了，一般来说是限制固定行数并在其后方添加省略号，有一次做需求开开心心的写完，结果UI验收时告诉我说这个数据比较重要，需要全部展示，但是呢数据又不能超过一行，这就比较难办了，我好生说这个功能项目中没有，我也没做过，要不然给我一天我研究一下，要不然呢就缓一缓，然后UI就去问了他们管事的，UI管事的说，怎么能做不了呢，不可能需要一天，今天必须要，并反馈给了我的部长，当时我的心情是这样</p>
<p>dog！</p>
<h1 id="二、解决"><a href="#二、解决" class="headerlink" title="二、解决"></a>二、解决</h1><h2 id="1-项目中的使用"><a href="#1-项目中的使用" class="headerlink" title="1.项目中的使用"></a>1.项目中的使用</h2><p>求助同事后在项目中使用下例代码来动态改变textView行数</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">salaryTextObServer</span><span class="params">(TextView textView, <span class="type">float</span> textSize)</span> &#123;</span><br><span class="line">    textView.getViewTreeObserver().addOnPreDrawListener(<span class="keyword">new</span> <span class="title class_">ViewTreeObserver</span>.OnPreDrawListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onPreDraw</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//监听移除，不然就会嘿嘿嘿</span></span><br><span class="line">            textView.getViewTreeObserver().removeOnPreDrawListener(<span class="built_in">this</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">line</span> <span class="operator">=</span> textView.getLineCount();</span><br><span class="line">            <span class="keyword">if</span> (line &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, textSize - <span class="number">1</span>);</span><br><span class="line">                salaryTextObServer(textView, textSize - <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>将需要动态改变行数的textView传入就好了，挺方便并且简单。</p>
<h2 id="2-学习并理解"><a href="#2-学习并理解" class="headerlink" title="2.学习并理解"></a>2.学习并理解</h2><p>平常绘制自定义view或者用画笔绘制自定义view等都没有使用到ViewTreeObserver这个类，本着学习进步的想法，在网上也搜索了相关资料，算是自问自答吧，整理出来。</p>
<h3 id="a-ViewTreeObserver是干嘛的？"><a href="#a-ViewTreeObserver是干嘛的？" class="headerlink" title="a.ViewTreeObserver是干嘛的？"></a>a.ViewTreeObserver是干嘛的？</h3><p>顾名思义，是一个使用观察者模式的view的观测类，当我们需要动态观测View的宽高等属性时可以使用，ViewTreeObserver类下有如下方法可以使用，分别适用于特定场景，酌情使用</p>
<ul>
<li>addOnWindowAttachListener 窗口附加监听器</li>
<li>addOnWindowFocusChangeListener  窗口焦点监听器</li>
<li>addOnGlobalFocusChangeListener 全局焦点监听器</li>
<li>addOnGlobalLayoutListener 全局布局监听器</li>
<li>addOnPreDrawListener 预绘制监听器（这也是本篇文章使用的，我理解为在view绘制之前）</li>
<li>addOnDrawListener 绘制监听器</li>
</ul>
<h3 id="a-ViewTreeObserver有哪些坑？"><a href="#a-ViewTreeObserver有哪些坑？" class="headerlink" title="a.ViewTreeObserver有哪些坑？"></a>a.ViewTreeObserver有哪些坑？</h3><h2 id="1-以上监听器都有与之对应的remove方法，在添加监听器后都需要在方法中remove掉，不然会报错（什么你问为什么会报错？就像让你一直打望一个美女，你能坚持一整天吗？总归是要休息的嘛），并且如本文例子一样，如果在列表中使用，getViewTreeObserver-时加上具体view控件。（什么你又问为什么？就像让你从一群鸭子里面找一只丑小鸭，总归是很费劲的嘛）2-View-getViewTreeObserver每次得到的ViewTreeObserver可能不是同一个实例3-ViewTreeObserver在RecyclerView中的使用"><a href="#1-以上监听器都有与之对应的remove方法，在添加监听器后都需要在方法中remove掉，不然会报错（什么你问为什么会报错？就像让你一直打望一个美女，你能坚持一整天吗？总归是要休息的嘛），并且如本文例子一样，如果在列表中使用，getViewTreeObserver-时加上具体view控件。（什么你又问为什么？就像让你从一群鸭子里面找一只丑小鸭，总归是很费劲的嘛）2-View-getViewTreeObserver每次得到的ViewTreeObserver可能不是同一个实例3-ViewTreeObserver在RecyclerView中的使用" class="headerlink" title="1.以上监听器都有与之对应的remove方法，在添加监听器后都需要在方法中remove掉，不然会报错（什么你问为什么会报错？就像让你一直打望一个美女，你能坚持一整天吗？总归是要休息的嘛），并且如本文例子一样，如果在列表中使用，getViewTreeObserver()时加上具体view控件。（什么你又问为什么？就像让你从一群鸭子里面找一只丑小鸭，总归是很费劲的嘛）2.View#getViewTreeObserver每次得到的ViewTreeObserver可能不是同一个实例3.ViewTreeObserver在RecyclerView中的使用
 "></a>1.以上监听器都有与之对应的remove方法，在添加监听器后都需要在方法中remove掉，不然会报错（什么你问为什么会报错？就像让你一直打望一个美女，你能坚持一整天吗？总归是要休息的嘛），并且如本文例子一样，如果在列表中使用，getViewTreeObserver()时加上具体view控件。（什么你又问为什么？就像让你从一群鸭子里面找一只丑小鸭，总归是很费劲的嘛）<br>2.<a class="link"   href="https://juejin.cn/post/6844903858511020039" >View#getViewTreeObserver每次得到的ViewTreeObserver可能不是同一个实例 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>3.<a class="link"   href="https://juejin.cn/post/6844903939339468814" >ViewTreeObserver在RecyclerView中的使用 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>
 </h2><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>学习如逆水行舟，不进则退</p>
]]></content>
      <categories>
        <category>andorid</category>
      </categories>
      <tags>
        <tag>view</tag>
      </tags>
  </entry>
  <entry>
    <title>andriod andserver 全局转发代理（部分接口在本地）的实现思路</title>
    <url>/2022/05/11/andriod-andserver-%E5%85%A8%E5%B1%80%E8%BD%AC%E5%8F%91%E4%BB%A3%E7%90%86%EF%BC%88%E9%83%A8%E5%88%86%E6%8E%A5%E5%8F%A3%E5%9C%A8%E6%9C%AC%E5%9C%B0%EF%BC%89%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/andriod-andserver-%E5%85%A8%E5%B1%80%E8%BD%AC%E5%8F%91%E4%BB%A3%E7%90%86%EF%BC%88%E9%83%A8%E5%88%86%E6%8E%A5%E5%8F%A3%E5%9C%A8%E6%9C%AC%E5%9C%B0%EF%BC%89%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>AndServer 是 Android 平台的 Web Server 和 Web Framework。 它基于编译时注解提供了类似 SpringMVC 的注解和功能，如果您熟悉 SpringMVC，则可以非常快速地掌握它。—-yanzhenjie</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p> 链接:源码地址 <a class="link"   href="https://github.com/yanzhenjie/AndServer/" >https://github.com/yanzhenjie/AndServer/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.<br>  链接:文档地址 <a class="link"   href="https://yanzhenjie.github.io/AndServer/" >https://yanzhenjie.github.io/AndServer/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.<br>   链接:旧版文档 <a class="link"   href="https://yanzhenjie.github.io/AndServer/1.x/" >https://yanzhenjie.github.io/AndServer/1.x/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><h3 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h3><p>项目采用了andserver的架构来实现一个安卓端的网络框架，由一个webview套一个网页发请求到andserver，但是很多接口是需要中台处理的。</p>
<p>安卓端代码大概是这样的：<br>  项目前期在andserver的接口接收到请求后，使用retrofit转发给中台，接收到中台的请求后，再由andserver返回给网页；甚至有的接口需要在安卓端做一些处理然后再转发。    </p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">    @<span class="title class_">RequestMapping</span>(method = &#123;<span class="title class_">RequestMethod</span>.<span class="property">OPTIONS</span>, <span class="title class_">RequestMethod</span>.<span class="property">GET</span>&#125;, path = <span class="string">&quot;/test&quot;</span>)</span><br><span class="line">    public <span class="title class_">AndroidResponse</span> <span class="title function_">test</span>(@<span class="title class_">RequestParam</span>(<span class="string">&quot;organizationId&quot;</span>) <span class="title class_">String</span> store, @<span class="title class_">RequestParam</span>(<span class="string">&quot;customerId&quot;</span>) <span class="title class_">String</span> customer) throws <span class="title class_">IOException</span> &#123;</span><br><span class="line">        <span class="title class_">AndroidResponse</span> response = <span class="keyword">new</span> <span class="title class_">AndroidResponse</span>();</span><br><span class="line">        <span class="comment">//这里可以自己做处理(请求前)</span></span><br><span class="line">        <span class="title class_">Call</span>&lt;<span class="title class_">AndroidResponse</span>&gt; call = api.<span class="title function_">test</span>(store, customer);</span><br><span class="line">        <span class="title class_">Response</span>&lt;<span class="title class_">AndroidResponse</span>&gt; responseResponse = call.<span class="title function_">execute</span>();</span><br><span class="line">        <span class="keyword">if</span> (!responseResponse.<span class="title function_">isSuccessful</span>() || responseResponse.<span class="title function_">errorBody</span>() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="title class_">Logger</span>.<span class="title function_">err</span>(<span class="string">&quot;Unable to sysLookupItem request:isSuccessful&quot;</span> + responseResponse.<span class="title function_">isSuccessful</span>() + <span class="string">&quot;,errorBody:&quot;</span> + responseResponse.<span class="title function_">errorBody</span>());</span><br><span class="line"><span class="comment">//                throw new RuntimeException(&quot;Unable to reqeust&quot;);</span></span><br><span class="line">            <span class="title class_">List</span>&lt;<span class="title class_">LookupitemModel</span>&gt; lookupitemModels = <span class="title function_">offlineLookupitem</span>();</span><br><span class="line">            <span class="keyword">if</span> (lookupitemModels != <span class="literal">null</span>) &#123;</span><br><span class="line">                response .<span class="title function_">setData</span>(lookupitemModels);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> response ;</span><br><span class="line">        &#125;</span><br><span class="line">        response = responseResponse.<span class="title function_">body</span>();</span><br><span class="line">        <span class="comment">//这里可以自己做处理(请求后)</span></span><br><span class="line">        <span class="keyword">return</span> response ;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="瓶颈"><a href="#瓶颈" class="headerlink" title="瓶颈"></a>瓶颈</h3><p>前面写的挺顺畅的，看到这儿大家可能都觉得没什么问题，这确实是一个能解决问题的方案，但是有一天前后台的接口因为业务需求进行了一些改动，比如加了个入参之类的，这个时候安卓端不仅需要改动andserver的api，还需要改动retrofit的api，改一个接口没有问题，改两个接口也没有问题，但是当改动的接口涉及到整个项目，且项目比较赶的时候，这个问题就很大了。</p>
<p>架构师说：“我们必须要有一个全局的转发，然后还不能全转发，一些调硬件的接口得你自己处理，一些登录的初始化你的拦截做了处理然后发中台……”</p>
<p>我的内心：“&#x2F;-+！@#￥%&amp;**”</p>
<p>我的回答：“好的，我下去看看”<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/e245f3d9f01e4ea6af2f7f35e8e8c9ff.jpg"
                      alt="在这里插入图片描述"
                ></p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>然后就是查资料哇，面向百度编程嘛，开始我就想，既然andserver提供了类似 SpringMVC 的注解和功能，我是不是可以通过Interceptor拦截器来实现然后把文档墙放好，一头撞了上去</p>
<p>andserver的文档是这么解释的：<br>   链接:  HandlerInterceptor <a class="link"   href="https://yanzhenjie.com/AndServer/class/HandlerInterceptor.html" >https://yanzhenjie.com/AndServer/class/HandlerInterceptor.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.<span class="property">aw</span>.<span class="property">ccpos</span>.<span class="property">client</span>.<span class="property">logger</span>.<span class="property">Logger</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">yanzhenjie</span>.<span class="property">andserver</span>.<span class="property">annotation</span>.<span class="property">Interceptor</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">yanzhenjie</span>.<span class="property">andserver</span>.<span class="property">framework</span>.<span class="property">HandlerInterceptor</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">yanzhenjie</span>.<span class="property">andserver</span>.<span class="property">framework</span>.<span class="property">handler</span>.<span class="property">RequestHandler</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">yanzhenjie</span>.<span class="property">andserver</span>.<span class="property">http</span>.<span class="property">HttpRequest</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">yanzhenjie</span>.<span class="property">andserver</span>.<span class="property">http</span>.<span class="property">HttpResponse</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.<span class="property">annotation</span>.<span class="property">NonNull</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Interceptor</span></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">SysInterceptor</span> implements <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Intercept the execution of a handler.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request  current request.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response current response.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler  the corresponding handler of the current request.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true if the interceptor has processed the request and responded.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public boolean <span class="title function_">onIntercept</span>(@<span class="title class_">NonNull</span> <span class="title class_">HttpRequest</span> request, @<span class="title class_">NonNull</span> <span class="title class_">HttpResponse</span> response, @<span class="title class_">NonNull</span> <span class="title class_">RequestHandler</span> handler) throws <span class="title class_">Exception</span> &#123;</span><br><span class="line">        <span class="title class_">RequestModel</span> requestModel = <span class="keyword">new</span> <span class="title class_">RequestModel</span>();</span><br><span class="line">        <span class="title class_">String</span> app = request.<span class="title function_">getHeader</span>(<span class="string">&quot;app&quot;</span>);</span><br><span class="line">        requestModel.<span class="title function_">setApp</span>(app);</span><br><span class="line">        <span class="title class_">String</span> token = request.<span class="title function_">getHeader</span>(<span class="string">&quot;x-token&quot;</span>);</span><br><span class="line">        requestModel.<span class="title function_">setToken</span>(token);</span><br><span class="line">        <span class="title class_">String</span> storeId = request.<span class="title function_">getHeader</span>(<span class="string">&quot;storeId&quot;</span>);</span><br><span class="line">        requestModel.<span class="title function_">setStoreId</span>(storeId);</span><br><span class="line">        <span class="title class_">String</span> terminalId = request.<span class="title function_">getHeader</span>(<span class="string">&quot;terminalId&quot;</span>);</span><br><span class="line">        requestModel.<span class="title function_">setTerminalId</span>(terminalId);</span><br><span class="line">        <span class="title class_">String</span> terminalNo = request.<span class="title function_">getHeader</span>(<span class="string">&quot;terminalNo&quot;</span>);</span><br><span class="line">        requestModel.<span class="title function_">setTerminalNo</span>(terminalNo);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">String</span> organizationId = request.<span class="title function_">getHeader</span>(<span class="string">&quot;organizationId&quot;</span>);</span><br><span class="line">        requestModel.<span class="title function_">setOrganizationId</span>(organizationId);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">String</span> userid = request.<span class="title function_">getHeader</span>(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">        requestModel.<span class="title function_">setUserid</span>(userid);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">String</span> username = request.<span class="title function_">getHeader</span>(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        requestModel.<span class="title function_">setUsername</span>(username);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">String</span> displayName = request.<span class="title function_">getHeader</span>(<span class="string">&quot;displayname&quot;</span>);</span><br><span class="line">        requestModel.<span class="title function_">setDisplayName</span>(displayName);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">String</span> customerId = request.<span class="title function_">getHeader</span>(<span class="string">&quot;terminalCustomerId&quot;</span>);</span><br><span class="line">        requestModel.<span class="title function_">setCustomerId</span>(customerId);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">String</span> storeCode = request.<span class="title function_">getHeader</span>(<span class="string">&quot;storeCode&quot;</span>);</span><br><span class="line">        requestModel.<span class="title function_">setStoreCode</span>(storeCode);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">String</span> sName = request.<span class="title function_">getHeader</span>(<span class="string">&quot;storeName&quot;</span>);</span><br><span class="line">        requestModel.<span class="title function_">setStoreNameOriginal</span>(sName);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">SysUtil</span>.<span class="title function_">create</span>(requestModel);</span><br><span class="line">        <span class="title class_">Logger</span>.<span class="title function_">d</span>(<span class="string">&quot;SysInterceptor check : requestModel &quot;</span> + requestModel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//外部链接拒绝访问</span></span><br><span class="line"><span class="comment">//        String ip = request.getHeader(&quot;Host&quot;);</span></span><br><span class="line"><span class="comment">//        if (!ip.equals(&quot;0.0.0.0:8080&quot;))&#123;</span></span><br><span class="line"><span class="comment">//            Logger.w(&quot;External address access, blocked&quot;);</span></span><br><span class="line"><span class="comment">//            return true;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>示例中写的功能和我们需要转发的接口功能差不多，看到过后我就开撸代码，撸完一跑，确实能拦截到，可以转发，就是所有的接口都被拦截了，我一个接口都别想处理，有的同学就说了，你每一个要处理的url判断一下放过去不就行了？<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/e245f3d9f01e4ea6af2f7f35e8e8c9ff.jpg"
                      alt="在这里插入图片描述"
                ><br>确实可以，没有问题，但是这个方法和第一种有什么区别呢？所以还是另寻它法吧</p>
<h3 id="最终解决"><a href="#最终解决" class="headerlink" title="最终解决"></a>最终解决</h3><p>ExeceptionResolver<br>   链接:  ExeceptionResolver<a class="link"   href="https://yanzhenjie.com/AndServer/class/ExceptionResolver.html" >https://yanzhenjie.com/AndServer/class/ExceptionResolver.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.<br>andserver的文档是这么解释的：<br>ExeceptionResolver用来处理所有请求Http Api时发生的异常，默认情况下会输出异常的Message到客户端。</p>
<p>这个时候又有同学要说了，看起来和我们需求没关系啊<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/e245f3d9f01e4ea6af2f7f35e8e8c9ff.jpg"
                      alt="在这里插入图片描述"
                ><br>别着急，我给你讲讲我清晰的脑回路，当我们本地有接口的时候，andserver正常走接口，我们正常处理然后返回，需要在接口中请求中台就使用retrofit，接口有改动安卓端必须跟着改，这个是无法避免的，但是如果是直接转发走的接口，我们自定义的ExeceptionResolver就会捕获到异常然后从新转发出去就好了<br>代码如下：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.<span class="property">aw</span>.<span class="property">ccpos</span>.<span class="property">client</span>.<span class="property">Client</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">aw</span>.<span class="property">ccpos</span>.<span class="property">client</span>.<span class="property">logger</span>.<span class="property">Logger</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">yanzhenjie</span>.<span class="property">andserver</span>.<span class="property">annotation</span>.<span class="property">Resolver</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">yanzhenjie</span>.<span class="property">andserver</span>.<span class="property">error</span>.<span class="property">MethodNotSupportException</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">yanzhenjie</span>.<span class="property">andserver</span>.<span class="property">error</span>.<span class="property">NotFoundException</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">yanzhenjie</span>.<span class="property">andserver</span>.<span class="property">framework</span>.<span class="property">ExceptionResolver</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">yanzhenjie</span>.<span class="property">andserver</span>.<span class="property">framework</span>.<span class="property">body</span>.<span class="property">JsonBody</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">yanzhenjie</span>.<span class="property">andserver</span>.<span class="property">http</span>.<span class="property">HttpMethod</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">yanzhenjie</span>.<span class="property">andserver</span>.<span class="property">http</span>.<span class="property">HttpRequest</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">yanzhenjie</span>.<span class="property">andserver</span>.<span class="property">http</span>.<span class="property">HttpResponse</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">yanzhenjie</span>.<span class="property">andserver</span>.<span class="property">http</span>.<span class="property">RequestBody</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">HashMap</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">Map</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.<span class="property">annotation</span>.<span class="property">NonNull</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ProjectName</span> : </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : yifeng_zeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span> : 2021/2/5 10:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> : Andserver GlobalExceptionSolver</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@<span class="title class_">Resolver</span></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">GlobalExceptionSolver</span> implements <span class="title class_">ExceptionResolver</span> &#123;</span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">onResolve</span>(<span class="params">@NonNull HttpRequest request, @NonNull HttpResponse response, @NonNull Throwable e</span>) &#123;</span><br><span class="line">        <span class="title class_">HttpMethod</span> method = request.<span class="title function_">getMethod</span>();</span><br><span class="line">	<span class="comment">//GlobalException后面再说</span></span><br><span class="line">        <span class="keyword">if</span> (!(e <span class="keyword">instanceof</span> <span class="title class_">NotFoundException</span>) &amp;&amp; !(e <span class="keyword">instanceof</span> <span class="title class_">MethodNotSupportException</span>)</span><br><span class="line">                &amp;&amp; !(e <span class="keyword">instanceof</span> <span class="title class_">GlobalException</span>)) &#123;</span><br><span class="line">            <span class="title class_">Logger</span>.<span class="title function_">err</span>(<span class="string">&quot;handle request failed&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">String</span> uri = request.<span class="title function_">getURI</span>();</span><br><span class="line">        uri = uri.<span class="title function_">replace</span>(<span class="string">&quot;scheme:&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//        uri = uri.replace(&quot;/spin/user&quot;,&quot;/user&quot;);</span></span><br><span class="line">        <span class="keyword">if</span> (uri.<span class="title function_">startsWith</span>(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">            uri = uri.<span class="title function_">substring</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Logger</span>.<span class="title function_">i</span>(<span class="string">&quot;redirect with URI &quot;</span> + uri);</span><br><span class="line">        <span class="title class_">String</span> url = <span class="title class_">Client</span>.<span class="title function_">i</span>().<span class="title function_">getServerUrl</span>() + uri;</span><br><span class="line"></span><br><span class="line">       	<span class="title class_">Logger</span>.<span class="title function_">i</span>(<span class="string">&quot;redirect to url &quot;</span> + url);</span><br><span class="line">        <span class="title class_">String</span> terminalId = request.<span class="title function_">getHeader</span>(<span class="string">&quot;terminalId&quot;</span>);</span><br><span class="line">        <span class="title class_">SysUtil</span>.<span class="property">requestModelLocal</span>.<span class="title function_">setTerminalId</span>(terminalId);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">String</span> token = request.<span class="title function_">getHeader</span>(<span class="string">&quot;x-token&quot;</span>);</span><br><span class="line">        <span class="title class_">SysUtil</span>.<span class="property">requestModelLocal</span>.<span class="title function_">setToken</span>(token);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">String</span> terminalNo = request.<span class="title function_">getHeader</span>(<span class="string">&quot;terminalNo&quot;</span>);</span><br><span class="line">         <span class="title class_">SysUtil</span>.<span class="property">requestModelLocal</span>.<span class="title function_">setTerminalNo</span>(terminalNo);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">String</span> organizationId = request.<span class="title function_">getHeader</span>(<span class="string">&quot;organizationId&quot;</span>);</span><br><span class="line">         <span class="title class_">SysUtil</span>.<span class="property">requestModelLocal</span>.<span class="title function_">setOrganizationId</span>(organizationId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="attr">POST</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="title class_">RequestBody</span> body = request.<span class="title function_">getBody</span>();</span><br><span class="line">                    <span class="title class_">String</span> string = body.<span class="title function_">string</span>();</span><br><span class="line">                    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> <span class="title class_">GlobalException</span>)&#123;</span><br><span class="line">                        string = e.<span class="title function_">getMessage</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="title class_">Map</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; headers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="title class_">String</span> header : request.<span class="title function_">getHeaderNames</span>()) &#123;</span><br><span class="line">                        headers.<span class="title function_">put</span>(header, request.<span class="title function_">getHeader</span>(header));</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="comment">//                    List&lt;Cookie&gt; cookies= request.getCookies();</span></span><br><span class="line">                    <span class="title class_">String</span> result = <span class="title class_">HttpUtils</span>.<span class="title function_">postSync</span>(url, string, headers);</span><br><span class="line">                    response.<span class="title function_">setBody</span>(<span class="keyword">new</span> <span class="title class_">JsonBody</span>(result));</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> ioException) &#123;</span><br><span class="line">                    <span class="title class_">Logger</span>.<span class="title function_">err</span>(<span class="string">&quot;Exception redirect post&quot;</span>, ioException);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="attr">GET</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="title class_">Map</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; parameters = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//                    for (String parameter : request.getParameterNames()) &#123;</span></span><br><span class="line"><span class="comment">//                        parameters.put(parameter, request.getParameter(parameter));</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"></span><br><span class="line">                    <span class="title class_">Map</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; headers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="title class_">String</span> header : request.<span class="title function_">getHeaderNames</span>()) &#123;</span><br><span class="line">                        headers.<span class="title function_">put</span>(header, request.<span class="title function_">getHeader</span>(header));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="title class_">String</span> result = <span class="title class_">HttpUtils</span>.<span class="title function_">getSync</span>(url, headers, parameters);</span><br><span class="line">                    response.<span class="title function_">setBody</span>(<span class="keyword">new</span> <span class="title class_">JsonBody</span>(result));</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> ioException) &#123;</span><br><span class="line">                    <span class="title class_">Logger</span>.<span class="title function_">err</span>(<span class="string">&quot;Exception redirect get&quot;</span>, ioException);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="attr">DELETE</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="title class_">Map</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; parameters = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="title class_">String</span> parameter : request.<span class="title function_">getParameterNames</span>()) &#123;</span><br><span class="line">                        parameters.<span class="title function_">put</span>(parameter, request.<span class="title function_">getParameter</span>(parameter));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="title class_">Map</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; headers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="title class_">String</span> header : request.<span class="title function_">getHeaderNames</span>()) &#123;</span><br><span class="line">                        headers.<span class="title function_">put</span>(header, request.<span class="title function_">getHeader</span>(header));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (parameters.<span class="title function_">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="title class_">RequestBody</span> body = request.<span class="title function_">getBody</span>();</span><br><span class="line">                        <span class="title class_">String</span> string = body.<span class="title function_">string</span>();</span><br><span class="line">                        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> <span class="title class_">GlobalException</span>)&#123;</span><br><span class="line">                            string = e.<span class="title function_">getMessage</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="title class_">String</span> result = <span class="title class_">HttpUtils</span>.<span class="title function_">deleteSync</span>(url, string, headers);</span><br><span class="line">                        response.<span class="title function_">setBody</span>(<span class="keyword">new</span> <span class="title class_">JsonBody</span>(result));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title class_">String</span> result = <span class="title class_">HttpUtils</span>.<span class="title function_">deleteSync</span>(url, headers, parameters);</span><br><span class="line">                        response.<span class="title function_">setBody</span>(<span class="keyword">new</span> <span class="title class_">JsonBody</span>(result));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> ioException) &#123;</span><br><span class="line">                    <span class="title class_">Logger</span>.<span class="title function_">err</span>(<span class="string">&quot;Exception redirect DELETE&quot;</span>, ioException);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="attr">PUT</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="title class_">RequestBody</span> body = request.<span class="title function_">getBody</span>();</span><br><span class="line">                    <span class="title class_">String</span> string = body.<span class="title function_">string</span>();</span><br><span class="line">                    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> <span class="title class_">GlobalException</span>)&#123;</span><br><span class="line">                        string = e.<span class="title function_">getMessage</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="title class_">Map</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; headers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="title class_">String</span> header : request.<span class="title function_">getHeaderNames</span>()) &#123;</span><br><span class="line">                        headers.<span class="title function_">put</span>(header, request.<span class="title function_">getHeader</span>(header));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="title class_">String</span> result = <span class="title class_">HttpUtils</span>.<span class="title function_">putSync</span>(url, string, headers);</span><br><span class="line">                    response.<span class="title function_">setBody</span>(<span class="keyword">new</span> <span class="title class_">JsonBody</span>(result));</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> ioException) &#123;</span><br><span class="line">                    <span class="title class_">Logger</span>.<span class="title function_">err</span>(<span class="string">&quot;Exception redirect PUT&quot;</span>, ioException);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>有伸手党就要说了，我没有你转发这个HttpUtils，我又难得找，你想不想要赞啊，emmm<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/e245f3d9f01e4ea6af2f7f35e8e8c9ff.jpg"
                      alt="在这里插入图片描述"
                ></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.<span class="property">io</span>.<span class="property">IOException</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">net</span>.<span class="property">ConnectException</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">net</span>.<span class="property">SocketTimeoutException</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">net</span>.<span class="property">UnknownHostException</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">Map</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">concurrent</span>.<span class="property">TimeUnit</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.<span class="property">net</span>.<span class="property">ssl</span>.<span class="property">HostnameVerifier</span>;</span><br><span class="line"><span class="keyword">import</span> javax.<span class="property">net</span>.<span class="property">ssl</span>.<span class="property">SSLSession</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">concurrent</span>.<span class="property">TimeUnit</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> okhttp3.<span class="property">Call</span>;</span><br><span class="line"><span class="keyword">import</span> okhttp3.<span class="property">Callback</span>;</span><br><span class="line"><span class="keyword">import</span> okhttp3.<span class="property">HttpUrl</span>;</span><br><span class="line"><span class="keyword">import</span> okhttp3.<span class="property">Interceptor</span>;</span><br><span class="line"><span class="keyword">import</span> okhttp3.<span class="property">MediaType</span>;</span><br><span class="line"><span class="keyword">import</span> okhttp3.<span class="property">OkHttpClient</span>;</span><br><span class="line"><span class="keyword">import</span> okhttp3.<span class="property">Request</span>;</span><br><span class="line"><span class="keyword">import</span> okhttp3.<span class="property">RequestBody</span>;</span><br><span class="line"><span class="keyword">import</span> okhttp3.<span class="property">Response</span>;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">HttpUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> final <span class="title class_">MediaType</span> <span class="title class_">JSON</span> = <span class="title class_">MediaType</span>.<span class="title function_">parse</span>(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">    public <span class="keyword">static</span> <span class="title class_">OkHttpClient</span> client = <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.<span class="title class_">Builder</span>().</span><br><span class="line">    <span class="title function_">connectTimeout</span>(<span class="number">300</span>, <span class="title class_">TimeUnit</span>.<span class="property">SECONDS</span>).</span><br><span class="line">    <span class="title function_">readTimeout</span>(<span class="number">300</span>, <span class="title class_">TimeUnit</span>.<span class="property">SECONDS</span>)</span><br><span class="line">    .<span class="title function_">sslSocketFactory</span>(<span class="title class_">HttpsUtils</span>.<span class="title function_">getSslSocketFactory</span>(<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>))</span><br><span class="line">    .<span class="title function_">hostnameVerifier</span>(<span class="keyword">new</span> <span class="title class_">HostnameVerifier</span>() &#123;</span><br><span class="line">        @<span class="title class_">Override</span></span><br><span class="line">        public boolean <span class="title function_">verify</span>(<span class="params"><span class="built_in">String</span> hostname, SSLSession session</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">writeTimeout</span>(<span class="number">300</span>, <span class="title class_">TimeUnit</span>.<span class="property">SECONDS</span>).<span class="title function_">addInterceptor</span>(<span class="keyword">new</span> <span class="title class_">Interceptor</span>() &#123;</span><br><span class="line">        @<span class="title class_">Override</span></span><br><span class="line">        public <span class="title class_">Response</span> <span class="title function_">intercept</span>(<span class="title class_">Chain</span> chain) throws <span class="title class_">IOException</span> &#123;</span><br><span class="line">            <span class="title class_">Request</span>.<span class="property">Builder</span> builder = chain.<span class="title function_">request</span>()</span><br><span class="line">                    .<span class="title function_">newBuilder</span>();</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">SysUtil</span>.<span class="title function_">get</span>().<span class="title function_">getToken</span>() != <span class="literal">null</span>) &#123;</span><br><span class="line">                builder.<span class="title function_">addHeader</span>(<span class="string">&quot;x-token&quot;</span>, <span class="title class_">SysUtil</span>.<span class="title function_">get</span>().<span class="title function_">getToken</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">SysUtil</span>.<span class="title function_">get</span>().<span class="title function_">getOrganizationId</span>() != <span class="literal">null</span>) &#123;</span><br><span class="line">                builder.<span class="title function_">addHeader</span>(<span class="string">&quot;organizationId&quot;</span>, <span class="title class_">SysUtil</span>.<span class="title function_">get</span>().<span class="title function_">getOrganizationId</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">SysUtil</span>.<span class="title function_">get</span>().<span class="title function_">getTerminalId</span>() != <span class="literal">null</span>) &#123;</span><br><span class="line">                builder.<span class="title function_">addHeader</span>(<span class="string">&quot;terminalId&quot;</span>, <span class="title class_">SysUtil</span>.<span class="title function_">get</span>().<span class="title function_">getTerminalId</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">SysUtil</span>.<span class="title function_">get</span>().<span class="title function_">getTerminalNo</span>() != <span class="literal">null</span>) &#123;</span><br><span class="line">                builder.<span class="title function_">addHeader</span>(<span class="string">&quot;terminalNo&quot;</span>, <span class="title class_">SysUtil</span>.<span class="title function_">get</span>().<span class="title function_">getTerminalNo</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title class_">Request</span> request = builder.<span class="title function_">build</span>();</span><br><span class="line">            <span class="keyword">return</span> chain.<span class="title function_">proceed</span>(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">build</span>();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *�첽http post����</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">postAsync</span>(<span class="title class_">String</span> url, <span class="title class_">String</span> body) throws <span class="title class_">Exception</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">RequestBody</span> params = <span class="title class_">RequestBody</span>.<span class="title function_">create</span>(<span class="title class_">JSON</span>, body);</span><br><span class="line">        <span class="title class_">Request</span> request = <span class="keyword">new</span> <span class="title class_">Request</span>.<span class="title class_">Builder</span>().<span class="title function_">addHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>).<span class="title function_">url</span>(url).<span class="title function_">post</span>(params).<span class="title function_">build</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title class_">Call</span> call = client.<span class="title function_">newCall</span>(request);</span><br><span class="line">            call.<span class="title function_">enqueue</span>(<span class="keyword">new</span> <span class="title class_">Callback</span>() &#123;</span><br><span class="line">                @<span class="title class_">Override</span></span><br><span class="line">                public <span class="keyword">void</span> <span class="title function_">onFailure</span>(<span class="params">Call call, IOException e</span>) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @<span class="title class_">Override</span></span><br><span class="line">                public <span class="keyword">void</span> <span class="title function_">onResponse</span>(<span class="title class_">Call</span> call, <span class="title class_">Response</span> response) throws <span class="title class_">IOException</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (response.<span class="title function_">isSuccessful</span>()) &#123;</span><br><span class="line">                        response.<span class="title function_">body</span>().<span class="title function_">string</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * �첽http get����</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getAsync</span>(<span class="title class_">String</span> url, <span class="title class_">String</span> body) throws <span class="title class_">Exception</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Request</span> request = <span class="keyword">new</span> <span class="title class_">Request</span>.<span class="title class_">Builder</span>().<span class="title function_">addHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>).<span class="title function_">url</span>(url).<span class="title function_">get</span>().<span class="title function_">build</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title class_">Call</span> call = client.<span class="title function_">newCall</span>(request);</span><br><span class="line">            call.<span class="title function_">enqueue</span>(<span class="keyword">new</span> <span class="title class_">Callback</span>() &#123;</span><br><span class="line">                @<span class="title class_">Override</span></span><br><span class="line">                public <span class="keyword">void</span> <span class="title function_">onFailure</span>(<span class="params">Call call, IOException e</span>) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @<span class="title class_">Override</span></span><br><span class="line">                public <span class="keyword">void</span> <span class="title function_">onResponse</span>(<span class="title class_">Call</span> call, <span class="title class_">Response</span> response) throws <span class="title class_">IOException</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (response.<span class="title function_">isSuccessful</span>()) &#123;</span><br><span class="line">                        response.<span class="title function_">body</span>().<span class="title function_">string</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * ͬ��http post����</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="title class_">String</span> <span class="title function_">postSync</span>(<span class="title class_">String</span> url, <span class="title class_">String</span> body, <span class="title class_">Map</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; headers) throws <span class="title class_">Exception</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">String</span> returnMessage = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="title class_">RequestBody</span> params = <span class="title class_">RequestBody</span>.<span class="title function_">create</span>(<span class="title class_">JSON</span>, body);</span><br><span class="line">        <span class="title class_">Request</span>.<span class="property">Builder</span> builder = <span class="keyword">new</span> <span class="title class_">Request</span>.<span class="title class_">Builder</span>();</span><br><span class="line">        builder.<span class="title function_">addHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="title class_">Map</span>.<span class="property">Entry</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; header : headers.<span class="title function_">entrySet</span>()) &#123;</span><br><span class="line">            builder.<span class="title function_">addHeader</span>(header.<span class="title function_">getKey</span>(), header.<span class="title function_">getValue</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Request</span> request = builder.<span class="title function_">url</span>(url).<span class="title function_">post</span>(params).<span class="title function_">build</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title class_">Response</span> response = client.<span class="title function_">newCall</span>(request).<span class="title function_">execute</span>();</span><br><span class="line">            <span class="keyword">if</span> (response.<span class="title function_">isSuccessful</span>()) &#123;</span><br><span class="line"></span><br><span class="line">                returnMessage = response.<span class="title function_">body</span>().<span class="title function_">string</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title class_">Exception</span> e = <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;�������쳣��Ϣ��&quot;</span> + response.<span class="title function_">code</span>() + <span class="string">&quot;:&quot;</span> + response.<span class="title function_">message</span>());</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">UnknownHostException</span> e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">ConnectException</span> e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">SocketTimeoutException</span> e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> returnMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * ͬ��http get����</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="title class_">String</span> <span class="title function_">getSync</span>(<span class="title class_">String</span> url,<span class="title class_">Map</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; headers,<span class="title class_">Map</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; params) throws <span class="title class_">Exception</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">String</span> returnMessage = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">HttpUrl</span>.<span class="property">Builder</span> httpBuilder = <span class="title class_">HttpUrl</span>.<span class="title function_">parse</span>(url).<span class="title function_">newBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (params != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="title class_">Map</span>.<span class="property">Entry</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; param : params.<span class="title function_">entrySet</span>()) &#123;</span><br><span class="line">                httpBuilder.<span class="title function_">addQueryParameter</span>(param.<span class="title function_">getKey</span>(), param.<span class="title function_">getValue</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Request</span>.<span class="property">Builder</span> builder = <span class="keyword">new</span> <span class="title class_">Request</span>.<span class="title class_">Builder</span>();</span><br><span class="line">        builder.<span class="title function_">addHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="title class_">Map</span>.<span class="property">Entry</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; header : headers.<span class="title function_">entrySet</span>()) &#123;</span><br><span class="line">            builder.<span class="title function_">addHeader</span>(header.<span class="title function_">getKey</span>(), header.<span class="title function_">getValue</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Request</span> request = builder.<span class="title function_">url</span>(httpBuilder.<span class="title function_">build</span>())</span><br><span class="line">                .<span class="title function_">build</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title class_">Response</span> response = client.<span class="title function_">newCall</span>(request).<span class="title function_">execute</span>();</span><br><span class="line">            <span class="keyword">if</span> (response.<span class="title function_">isSuccessful</span>()) &#123;</span><br><span class="line"></span><br><span class="line">                returnMessage = response.<span class="title function_">body</span>().<span class="title function_">string</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title class_">Exception</span> e = <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;&quot;</span> + response.<span class="title function_">code</span>() + <span class="string">&quot;:&quot;</span> + response.<span class="title function_">message</span>());</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">UnknownHostException</span> e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">ConnectException</span> e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">SocketTimeoutException</span> e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> returnMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 同步put请求*</span></span><br><span class="line"><span class="comment">    /</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="title class_">String</span> <span class="title function_">putSync</span>(<span class="title class_">String</span> url, <span class="title class_">String</span> body,<span class="title class_">Map</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; headers) throws <span class="title class_">Exception</span> &#123;</span><br><span class="line">        <span class="title class_">String</span> returnMessage = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="title class_">RequestBody</span> params = <span class="title class_">RequestBody</span>.<span class="title function_">create</span>(<span class="title class_">JSON</span>, body);</span><br><span class="line">        <span class="title class_">Request</span>.<span class="property">Builder</span> builder = <span class="keyword">new</span> <span class="title class_">Request</span>.<span class="title class_">Builder</span>();</span><br><span class="line">        builder.<span class="title function_">addHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="title class_">Map</span>.<span class="property">Entry</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; header : headers.<span class="title function_">entrySet</span>()) &#123;</span><br><span class="line">            builder.<span class="title function_">addHeader</span>(header.<span class="title function_">getKey</span>(), header.<span class="title function_">getValue</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Request</span> request = builder.<span class="title function_">url</span>(url).<span class="title function_">put</span>(params).<span class="title function_">build</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title class_">Response</span> response = client.<span class="title function_">newCall</span>(request).<span class="title function_">execute</span>();</span><br><span class="line">            <span class="keyword">if</span> (response.<span class="title function_">isSuccessful</span>()) &#123;</span><br><span class="line"></span><br><span class="line">                returnMessage = response.<span class="title function_">body</span>().<span class="title function_">string</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title class_">Exception</span> e = <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;�������쳣��Ϣ��&quot;</span> + response.<span class="title function_">code</span>() + <span class="string">&quot;:&quot;</span> + response.<span class="title function_">message</span>());</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">UnknownHostException</span> e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">ConnectException</span> e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">SocketTimeoutException</span> e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> returnMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 同步delete请求,body</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="title class_">String</span> <span class="title function_">deleteSync</span>(<span class="title class_">String</span> url, <span class="title class_">String</span> body,<span class="title class_">Map</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; headers) throws <span class="title class_">Exception</span> &#123;</span><br><span class="line">        <span class="title class_">String</span> returnMessage = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="title class_">RequestBody</span> params = <span class="title class_">RequestBody</span>.<span class="title function_">create</span>(<span class="title class_">JSON</span>, body);</span><br><span class="line">        <span class="title class_">Request</span>.<span class="property">Builder</span> builder = <span class="keyword">new</span> <span class="title class_">Request</span>.<span class="title class_">Builder</span>();</span><br><span class="line">        builder.<span class="title function_">addHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="title class_">Map</span>.<span class="property">Entry</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; header : headers.<span class="title function_">entrySet</span>()) &#123;</span><br><span class="line">            builder.<span class="title function_">addHeader</span>(header.<span class="title function_">getKey</span>(), header.<span class="title function_">getValue</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Request</span> request = builder.<span class="title function_">url</span>(url).<span class="title function_">delete</span>(params).<span class="title function_">build</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title class_">Response</span> response = client.<span class="title function_">newCall</span>(request).<span class="title function_">execute</span>();</span><br><span class="line">            <span class="keyword">if</span> (response.<span class="title function_">isSuccessful</span>()) &#123;</span><br><span class="line"></span><br><span class="line">                returnMessage = response.<span class="title function_">body</span>().<span class="title function_">string</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title class_">Exception</span> e = <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;�������쳣��Ϣ��&quot;</span> + response.<span class="title function_">code</span>() + <span class="string">&quot;:&quot;</span> + response.<span class="title function_">message</span>());</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">UnknownHostException</span> e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">ConnectException</span> e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">SocketTimeoutException</span> e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> returnMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 同步delete请求,body</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="title class_">String</span> <span class="title function_">deleteSync</span>(<span class="title class_">String</span> url,<span class="title class_">Map</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; headers,<span class="title class_">Map</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; params) throws <span class="title class_">Exception</span> &#123;</span><br><span class="line">        <span class="title class_">String</span> returnMessage = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="title class_">HttpUrl</span>.<span class="property">Builder</span> httpBuilder = <span class="title class_">HttpUrl</span>.<span class="title function_">parse</span>(url).<span class="title function_">newBuilder</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (params != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="title class_">Map</span>.<span class="property">Entry</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; param : params.<span class="title function_">entrySet</span>()) &#123;</span><br><span class="line">                httpBuilder.<span class="title function_">addQueryParameter</span>(param.<span class="title function_">getKey</span>(), param.<span class="title function_">getValue</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Request</span>.<span class="property">Builder</span> builder = <span class="keyword">new</span> <span class="title class_">Request</span>.<span class="title class_">Builder</span>();</span><br><span class="line">        builder.<span class="title function_">addHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="title class_">Map</span>.<span class="property">Entry</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; header : headers.<span class="title function_">entrySet</span>()) &#123;</span><br><span class="line">            builder.<span class="title function_">addHeader</span>(header.<span class="title function_">getKey</span>(), header.<span class="title function_">getValue</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Request</span> request = builder.<span class="title function_">addHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">                .<span class="title function_">url</span>(httpBuilder.<span class="title function_">build</span>())</span><br><span class="line">                .<span class="title function_">delete</span>()</span><br><span class="line">                .<span class="title function_">build</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title class_">Response</span> response = client.<span class="title function_">newCall</span>(request).<span class="title function_">execute</span>();</span><br><span class="line">            <span class="keyword">if</span> (response.<span class="title function_">isSuccessful</span>()) &#123;</span><br><span class="line"></span><br><span class="line">                returnMessage = response.<span class="title function_">body</span>().<span class="title function_">string</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title class_">Exception</span> e = <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;�������쳣��Ϣ��&quot;</span> + response.<span class="title function_">code</span>() + <span class="string">&quot;:&quot;</span> + response.<span class="title function_">message</span>());</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">UnknownHostException</span> e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">ConnectException</span> e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">SocketTimeoutException</span> e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> returnMessage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="property">io</span>.<span class="property">IOException</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">io</span>.<span class="property">InputStream</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">lang</span>.<span class="property">reflect</span>.<span class="property">Field</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">security</span>.<span class="property">KeyManagementException</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">security</span>.<span class="property">KeyStore</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">security</span>.<span class="property">KeyStoreException</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">security</span>.<span class="property">NoSuchAlgorithmException</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">security</span>.<span class="property">SecureRandom</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">security</span>.<span class="property">cert</span>.<span class="property">CertificateException</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">security</span>.<span class="property">cert</span>.<span class="property">CertificateFactory</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">security</span>.<span class="property">cert</span>.<span class="property">X509Certificate</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.<span class="property">net</span>.<span class="property">ssl</span>.<span class="property">HostnameVerifier</span>;</span><br><span class="line"><span class="keyword">import</span> javax.<span class="property">net</span>.<span class="property">ssl</span>.<span class="property">KeyManager</span>;</span><br><span class="line"><span class="keyword">import</span> javax.<span class="property">net</span>.<span class="property">ssl</span>.<span class="property">KeyManagerFactory</span>;</span><br><span class="line"><span class="keyword">import</span> javax.<span class="property">net</span>.<span class="property">ssl</span>.<span class="property">SSLContext</span>;</span><br><span class="line"><span class="keyword">import</span> javax.<span class="property">net</span>.<span class="property">ssl</span>.<span class="property">SSLSession</span>;</span><br><span class="line"><span class="keyword">import</span> javax.<span class="property">net</span>.<span class="property">ssl</span>.<span class="property">SSLSocketFactory</span>;</span><br><span class="line"><span class="keyword">import</span> javax.<span class="property">net</span>.<span class="property">ssl</span>.<span class="property">TrustManager</span>;</span><br><span class="line"><span class="keyword">import</span> javax.<span class="property">net</span>.<span class="property">ssl</span>.<span class="property">TrustManagerFactory</span>;</span><br><span class="line"><span class="keyword">import</span> javax.<span class="property">net</span>.<span class="property">ssl</span>.<span class="property">X509TrustManager</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> okhttp3.<span class="property">OkHttpClient</span>;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">HttpsUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="title class_">SSLSocketFactory</span> <span class="title function_">getSslSocketFactory</span>(<span class="params">InputStream[] certificates, InputStream bksFile, <span class="built_in">String</span> password</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title class_">TrustManager</span>[] trustManagers = <span class="title function_">prepareTrustManager</span>(certificates);</span><br><span class="line">            <span class="title class_">KeyManager</span>[] keyManagers = <span class="title function_">prepareKeyManager</span>(bksFile, password);</span><br><span class="line">            <span class="title class_">SSLContext</span> sslContext = <span class="title class_">SSLContext</span>.<span class="title function_">getInstance</span>(<span class="string">&quot;TLS&quot;</span>);</span><br><span class="line">            <span class="title class_">TrustManager</span> trustManager = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (trustManagers != <span class="literal">null</span>) &#123;</span><br><span class="line">                trustManager = <span class="keyword">new</span> <span class="title class_">MyTrustManager</span>(<span class="title function_">chooseTrustManager</span>(trustManagers));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                trustManager = <span class="keyword">new</span> <span class="title class_">UnSafeTrustManager</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            sslContext.<span class="title function_">init</span>(keyManagers, <span class="keyword">new</span> <span class="title class_">TrustManager</span>[]&#123;trustManager&#125;, <span class="keyword">new</span> <span class="title class_">SecureRandom</span>());</span><br><span class="line">            <span class="keyword">return</span> sslContext.<span class="title function_">getSocketFactory</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">NoSuchAlgorithmException</span> e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">KeyManagementException</span> e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">KeyStoreException</span> e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> <span class="title class_">TrustManager</span>[] <span class="title function_">prepareTrustManager</span>(<span class="params">InputStream... certificates</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (certificates == <span class="literal">null</span> || certificates.<span class="property">length</span> &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title class_">CertificateFactory</span> certificateFactory = <span class="title class_">CertificateFactory</span>.<span class="title function_">getInstance</span>(<span class="string">&quot;X.509&quot;</span>);</span><br><span class="line">            <span class="title class_">KeyStore</span> keyStore = <span class="title class_">KeyStore</span>.<span class="title function_">getInstance</span>(<span class="title class_">KeyStore</span>.<span class="title function_">getDefaultType</span>());</span><br><span class="line">            keyStore.<span class="title function_">load</span>(<span class="literal">null</span>);</span><br><span class="line">            int index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="title class_">InputStream</span> certificate : certificates) &#123;</span><br><span class="line">                <span class="title class_">String</span> certificateAlias = <span class="title class_">Integer</span>.<span class="title function_">toString</span>(index++);</span><br><span class="line">                keyStore.<span class="title function_">setCertificateEntry</span>(certificateAlias, certificateFactory.<span class="title function_">generateCertificate</span>(certificate));</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (certificate != <span class="literal">null</span>)</span><br><span class="line">                        certificate.<span class="title function_">close</span>();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="title class_">IOException</span> e) &#123;</span><br><span class="line">                    <span class="title class_">Logger</span>.<span class="title function_">err</span>(<span class="string">&quot;error to close certificate&quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title class_">TrustManagerFactory</span> trustManagerFactory = <span class="literal">null</span>;</span><br><span class="line">            trustManagerFactory = <span class="title class_">TrustManagerFactory</span>.<span class="title function_">getInstance</span>(<span class="title class_">TrustManagerFactory</span>.<span class="title function_">getDefaultAlgorithm</span>());</span><br><span class="line">            trustManagerFactory.<span class="title function_">init</span>(keyStore);</span><br><span class="line">            <span class="title class_">TrustManager</span>[] trustManagers = trustManagerFactory.<span class="title function_">getTrustManagers</span>();</span><br><span class="line">            <span class="keyword">return</span> trustManagers;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> e) &#123;</span><br><span class="line">            <span class="title class_">Logger</span>.<span class="title function_">err</span>(<span class="string">&quot;fail to prepareTrustManager&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> <span class="title class_">KeyManager</span>[] <span class="title function_">prepareKeyManager</span>(<span class="params">InputStream bksFile, <span class="built_in">String</span> password</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bksFile == <span class="literal">null</span> || password == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="title class_">KeyStore</span> clientKeyStore = <span class="title class_">KeyStore</span>.<span class="title function_">getInstance</span>(<span class="string">&quot;BKS&quot;</span>);</span><br><span class="line">            clientKeyStore.<span class="title function_">load</span>(bksFile, password.<span class="title function_">toCharArray</span>());</span><br><span class="line">            <span class="title class_">KeyManagerFactory</span> keyManagerFactory = <span class="title class_">KeyManagerFactory</span>.<span class="title function_">getInstance</span>(<span class="title class_">KeyManagerFactory</span>.<span class="title function_">getDefaultAlgorithm</span>());</span><br><span class="line">            keyManagerFactory.<span class="title function_">init</span>(clientKeyStore, password.<span class="title function_">toCharArray</span>());</span><br><span class="line">            <span class="keyword">return</span> keyManagerFactory.<span class="title function_">getKeyManagers</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> e) &#123;</span><br><span class="line">            <span class="title class_">Logger</span>.<span class="title function_">err</span>(<span class="string">&quot;fail to prepareKeyManager&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> X509TrustManager <span class="title function_">chooseTrustManager</span>(<span class="params">TrustManager[] trustManagers</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="title class_">TrustManager</span> trustManager : trustManagers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (trustManager <span class="keyword">instanceof</span> X509TrustManager) &#123;</span><br><span class="line">                <span class="keyword">return</span> (X509TrustManager) trustManager;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ignoreSSLCheck</span>(<span class="params">OkHttpClient sClient</span>) &#123;</span><br><span class="line">        <span class="title class_">SSLContext</span> sc = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sc = <span class="title class_">SSLContext</span>.<span class="title function_">getInstance</span>(<span class="string">&quot;SSL&quot;</span>);</span><br><span class="line">            sc.<span class="title function_">init</span>(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">TrustManager</span>[]&#123;<span class="keyword">new</span> <span class="title function_">X509TrustManager</span>(<span class="params"></span>) &#123;</span><br><span class="line">                @<span class="title class_">Override</span></span><br><span class="line">                public <span class="keyword">void</span> <span class="title function_">checkClientTrusted</span>(java.<span class="property">security</span>.<span class="property">cert</span>.<span class="property">X509Certificate</span>[] chain, <span class="title class_">String</span> authType) throws java.<span class="property">security</span>.<span class="property">cert</span>.<span class="property">CertificateException</span> &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @<span class="title class_">Override</span></span><br><span class="line">                public <span class="keyword">void</span> <span class="title function_">checkServerTrusted</span>(java.<span class="property">security</span>.<span class="property">cert</span>.<span class="property">X509Certificate</span>[] chain, <span class="title class_">String</span> authType) throws java.<span class="property">security</span>.<span class="property">cert</span>.<span class="property">CertificateException</span> &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @<span class="title class_">Override</span></span><br><span class="line">                public java.<span class="property">security</span>.<span class="property">cert</span>.<span class="property">X509Certificate</span>[] <span class="title function_">getAcceptedIssuers</span>(<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;&#125;, <span class="keyword">new</span> <span class="title class_">SecureRandom</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> e) &#123;</span><br><span class="line">            <span class="title class_">Logger</span>.<span class="title function_">err</span>(<span class="string">&quot;fail to ignoreSSLCheck&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">HostnameVerifier</span> hv1 = <span class="keyword">new</span> <span class="title class_">HostnameVerifier</span>() &#123;</span><br><span class="line">            @<span class="title class_">Override</span></span><br><span class="line">            public boolean <span class="title function_">verify</span>(<span class="params"><span class="built_in">String</span> hostname, SSLSession session</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">String</span> workerClassName = <span class="string">&quot;okhttp3.OkHttpClient&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title class_">Class</span> workerClass = <span class="title class_">Class</span>.<span class="title function_">forName</span>(workerClassName);</span><br><span class="line">            <span class="title class_">Field</span> hostnameVerifier = workerClass.<span class="title function_">getDeclaredField</span>(<span class="string">&quot;hostnameVerifier&quot;</span>);</span><br><span class="line">            hostnameVerifier.<span class="title function_">setAccessible</span>(<span class="literal">true</span>);</span><br><span class="line">            hostnameVerifier.<span class="title function_">set</span>(sClient, hv1);</span><br><span class="line"></span><br><span class="line">            <span class="title class_">Field</span> sslSocketFactory = workerClass.<span class="title function_">getDeclaredField</span>(<span class="string">&quot;sslSocketFactory&quot;</span>);</span><br><span class="line">            sslSocketFactory.<span class="title function_">setAccessible</span>(<span class="literal">true</span>);</span><br><span class="line">            sslSocketFactory.<span class="title function_">set</span>(sClient, sc.<span class="title function_">getSocketFactory</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> e) &#123;</span><br><span class="line">            <span class="title class_">Logger</span>.<span class="title function_">err</span>(<span class="string">&quot;fail to hostnameVerifier&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UnSafeTrustManager</span> implements X509TrustManager &#123;</span><br><span class="line">        @<span class="title class_">Override</span></span><br><span class="line">        public <span class="keyword">void</span> <span class="title function_">checkClientTrusted</span>(X509Certificate[] chain, <span class="title class_">String</span> authType) throws <span class="title class_">CertificateException</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="title class_">Override</span></span><br><span class="line">        public <span class="keyword">void</span> <span class="title function_">checkServerTrusted</span>(X509Certificate[] chain, <span class="title class_">String</span> authType) throws <span class="title class_">CertificateException</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="title class_">Override</span></span><br><span class="line">        public X509Certificate[] <span class="title function_">getAcceptedIssuers</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyTrustManager</span> implements X509TrustManager &#123;</span><br><span class="line">        private X509TrustManager defaultTrustManager;</span><br><span class="line">        private X509TrustManager localTrustManager;</span><br><span class="line"></span><br><span class="line">        public <span class="title class_">MyTrustManager</span>(X509TrustManager localTrustManager) throws <span class="title class_">NoSuchAlgorithmException</span>, <span class="title class_">KeyStoreException</span> &#123;</span><br><span class="line">            <span class="title class_">TrustManagerFactory</span> var4 = <span class="title class_">TrustManagerFactory</span>.<span class="title function_">getInstance</span>(<span class="title class_">TrustManagerFactory</span>.<span class="title function_">getDefaultAlgorithm</span>());</span><br><span class="line">            var4.<span class="title function_">init</span>((<span class="title class_">KeyStore</span>) <span class="literal">null</span>);</span><br><span class="line">            defaultTrustManager = <span class="title function_">chooseTrustManager</span>(var4.<span class="title function_">getTrustManagers</span>());</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">localTrustManager</span> = localTrustManager;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="title class_">Override</span></span><br><span class="line">        public <span class="keyword">void</span> <span class="title function_">checkClientTrusted</span>(X509Certificate[] chain, <span class="title class_">String</span> authType) throws <span class="title class_">CertificateException</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="title class_">Override</span></span><br><span class="line">        public <span class="keyword">void</span> <span class="title function_">checkServerTrusted</span>(X509Certificate[] chain, <span class="title class_">String</span> authType) throws <span class="title class_">CertificateException</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                defaultTrustManager.<span class="title function_">checkServerTrusted</span>(chain, authType);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="title class_">CertificateException</span> ce) &#123;</span><br><span class="line">                localTrustManager.<span class="title function_">checkServerTrusted</span>(chain, authType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="title class_">Override</span></span><br><span class="line">        public X509Certificate[] <span class="title function_">getAcceptedIssuers</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">class</span> <span class="title class_">UnSafeHostnameVerifier</span> implements <span class="title class_">HostnameVerifier</span> &#123;</span><br><span class="line">        @<span class="title class_">Override</span></span><br><span class="line">        public boolean <span class="title function_">verify</span>(<span class="params"><span class="built_in">String</span> hostname, SSLSession session</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="升级版本"><a href="#升级版本" class="headerlink" title="升级版本"></a>升级版本</h3><p>有细心的同学发现我们还有一个GlobalException的异常，这个东西是我们在andserver接收到请求，对请求处理过后不需要处理返回的信息的时候使用的自定义Exception；可以根据你们自己的业务需求取用</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : yifeng_zeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span> : 2021/11/5 14:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> : 全局转发异常，为了把body传给GlobalExceptionSolver</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">GlobalException</span> <span class="keyword">extends</span> <span class="title class_ inherited__">BasicException</span> &#123;</span><br><span class="line">    private <span class="keyword">static</span> int statusCode = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    public <span class="title class_">GlobalException</span>(<span class="title class_">DataRequest</span> request) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(statusCode,<span class="title class_">JSON</span>.<span class="title function_">toJSONString</span>(request));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="title class_">GlobalException</span>(<span class="title class_">String</span> request) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(statusCode,request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Override</span></span><br><span class="line">	@<span class="title class_">RequestMapping</span>(method = &#123;<span class="title class_">RequestMethod</span>.<span class="property">OPTIONS</span>, <span class="title class_">RequestMethod</span>.<span class="property">POST</span>&#125;, path = <span class="string">&quot;/finishOrderSale&quot;</span>)</span><br><span class="line">	public <span class="title class_">Response</span> <span class="title function_">finishOrderSale</span>(@<span class="title class_">RequestBody</span> <span class="title class_">Request</span> requestModel)throws <span class="title class_">IOException</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (requestModel.<span class="title function_">getData</span>()!=<span class="literal">null</span>)&#123;</span><br><span class="line">		<span class="comment">//这里可以对requestModel进行处理</span></span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GlobalException</span>(requestModel);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="title class_">Response</span>  response = <span class="keyword">new</span>  <span class="title class_">Response</span>();</span><br><span class="line">		<span class="keyword">return</span> response;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>这个时候，坐在屏幕前的你是不是应该说一句：“秒啊！”<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/e245f3d9f01e4ea6af2f7f35e8e8c9ff.jpg"
                      alt="在这里插入图片描述"
                ></p>
]]></content>
      <categories>
        <category>andorid</category>
      </categories>
      <tags>
        <tag>Andserver</tag>
      </tags>
  </entry>
  <entry>
    <title>android retrofit 从无知到入门</title>
    <url>/2022/07/29/android-retrofit-%E4%BB%8E%E6%97%A0%E7%9F%A5%E5%88%B0%E5%85%A5%E9%97%A8/android-retrofit-%E4%BB%8E%E6%97%A0%E7%9F%A5%E5%88%B0%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文会从零开始介绍retrofit的一些简单使用和封装，基于retrofit:2.3.0</p>
<hr>
<h1 id="一、初识retrofit"><a href="#一、初识retrofit" class="headerlink" title="一、初识retrofit"></a>一、初识retrofit</h1><h2 id="1-retrofit是什么？"><a href="#1-retrofit是什么？" class="headerlink" title="1.retrofit是什么？"></a>1.retrofit是什么？</h2><p>retrofit官方文档的介绍非常的简洁明了，俗话说得好，字越少越牛逼，它是一个适用于Android和Java的类型安全HTTP客户端，它的底层是基于okhttp的，用了各种各样的设计模式封装起来的，在这里我们不多赘述，至于也不了解okhttp的，emmm，懂的都懂</p>
<h2 id="2-一些配置和数据准备"><a href="#2-一些配置和数据准备" class="headerlink" title="2.一些配置和数据准备"></a>2.一些配置和数据准备</h2><blockquote>
<p>既然是用于通信的，就不要忘记添加网络权限，在项目的Androidmanifest中添加</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 访问网络的权限 --&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.INTERNET&quot;</span>&gt;&lt;/uses-permission&gt;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>当然也少不了添加依赖，为了不过多赘述这些，我们一次添加齐全，在build.gradle中添加</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//retrofit</span></span><br><span class="line">api <span class="string">&#x27;com.squareup.retrofit2:retrofit:2.3.0&#x27;</span></span><br><span class="line">api <span class="string">&#x27;com.squareup.retrofit2:converter-gson:2.3.0&#x27;</span></span><br><span class="line">api <span class="string">&#x27;com.squareup.retrofit2:adapter-rxjava2:2.3.0&#x27;</span></span><br><span class="line">api <span class="string">&#x27;com.trello.rxlifecycle2:rxlifecycle-components:2.2.1&#x27;</span></span><br><span class="line">api <span class="string">&#x27;com.facebook.stetho:stetho:1.5.0&#x27;</span></span><br><span class="line">api <span class="string">&#x27;com.facebook.stetho:stetho-okhttp3:1.5.0&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>我们来一个请求的返回体<br>“为了规范我们写的规范一点”</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModel(</span></span><br><span class="line"><span class="meta">    value = &quot;DataResponse&quot;,</span></span><br><span class="line"><span class="meta">    description = &quot;请求返回值&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">DataResponse</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">7574544066074667453L</span>;</span><br><span class="line">    <span class="meta">@ApiModelProperty(</span></span><br><span class="line"><span class="meta">        value = &quot;错误编码,0代表无错误&quot;,</span></span><br><span class="line"><span class="meta">        name = &quot;errorCode&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">errorCode</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@ApiModelProperty(</span></span><br><span class="line"><span class="meta">        value = &quot;结果编码&quot;,</span></span><br><span class="line"><span class="meta">        name = &quot;resultCode&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">resultCode</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="meta">@ApiModelProperty(</span></span><br><span class="line"><span class="meta">        value = &quot;结果信息&quot;,</span></span><br><span class="line"><span class="meta">        name = &quot;message&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="meta">@ApiModelProperty(</span></span><br><span class="line"><span class="meta">        value = &quot;附加信息&quot;,</span></span><br><span class="line"><span class="meta">        name = &quot;extInfo&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; extInfo = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="meta">@ApiModelProperty(</span></span><br><span class="line"><span class="meta">        value = &quot;请求返回数据&quot;,</span></span><br><span class="line"><span class="meta">        name = &quot;data&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">private</span> String requestId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DataResponse</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DataResponse</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DataResponse</span><span class="params">(T data, <span class="type">int</span> errorCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getErrorCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setErrorCode</span><span class="params">(<span class="type">int</span> errorCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getExtInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.extInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setExtInfo</span><span class="params">(Map&lt;String, Object&gt; extInfo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.extInfo = extInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getResultCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.resultCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResultCode</span><span class="params">(String resultCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resultCode = resultCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isError</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.errorCode != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRequestId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.requestId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRequestId</span><span class="params">(String requestId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.requestId = requestId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        builder.append(<span class="string">&quot;DataResponse [errorCode=&quot;</span>);</span><br><span class="line">        builder.append(<span class="built_in">this</span>.errorCode);</span><br><span class="line">        builder.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.resultCode != <span class="literal">null</span>) &#123;</span><br><span class="line">            builder.append(<span class="string">&quot;resultCode=&quot;</span>);</span><br><span class="line">            builder.append(<span class="built_in">this</span>.resultCode);</span><br><span class="line">            builder.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.message != <span class="literal">null</span>) &#123;</span><br><span class="line">            builder.append(<span class="string">&quot;message=&quot;</span>);</span><br><span class="line">            builder.append(<span class="built_in">this</span>.message);</span><br><span class="line">            builder.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.extInfo != <span class="literal">null</span>) &#123;</span><br><span class="line">            builder.append(<span class="string">&quot;extInfo=&quot;</span>);</span><br><span class="line">            builder.append(<span class="built_in">this</span>.extInfo);</span><br><span class="line">            builder.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.data != <span class="literal">null</span>) &#123;</span><br><span class="line">            builder.append(<span class="string">&quot;data=&quot;</span>);</span><br><span class="line">            builder.append(<span class="built_in">this</span>.data);</span><br><span class="line">            builder.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.requestId != <span class="literal">null</span>) &#123;</span><br><span class="line">            builder.append(<span class="string">&quot;requestId=&quot;</span>);</span><br><span class="line">            builder.append(<span class="built_in">this</span>.requestId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        builder.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>自然我们也需要个请求头</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModel(</span></span><br><span class="line"><span class="meta">    value = &quot;DataRequest&quot;,</span></span><br><span class="line"><span class="meta">    description = &quot;请求&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">DataRequest</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">7574544066074667453L</span>;</span><br><span class="line">    <span class="meta">@ApiModelProperty(</span></span><br><span class="line"><span class="meta">        value = &quot;请求数据&quot;,</span></span><br><span class="line"><span class="meta">        name = &quot;data&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="meta">@ApiModelProperty(</span></span><br><span class="line"><span class="meta">        value = &quot;附加信息&quot;,</span></span><br><span class="line"><span class="meta">        name = &quot;extInfo&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; extInfo = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="meta">@ApiModelProperty(</span></span><br><span class="line"><span class="meta">        value = &quot;附加动作&quot;,</span></span><br><span class="line"><span class="meta">        name = &quot;action&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> String action;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String requestId;</span><br><span class="line">    <span class="keyword">private</span> Date requestTime;</span><br><span class="line">    <span class="keyword">private</span> String security;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DataRequest</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getExtInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.extInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setExtInfo</span><span class="params">(Map&lt;String, String&gt; extInfo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.extInfo = extInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAction</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAction</span><span class="params">(String action)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.action = action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        builder.append(<span class="string">&quot;DataRequest [&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.data != <span class="literal">null</span>) &#123;</span><br><span class="line">            builder.append(<span class="string">&quot;data=&quot;</span>);</span><br><span class="line">            builder.append(<span class="built_in">this</span>.data);</span><br><span class="line">            builder.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.extInfo != <span class="literal">null</span>) &#123;</span><br><span class="line">            builder.append(<span class="string">&quot;extInfo=&quot;</span>);</span><br><span class="line">            builder.append(<span class="built_in">this</span>.extInfo);</span><br><span class="line">            builder.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.action != <span class="literal">null</span>) &#123;</span><br><span class="line">            builder.append(<span class="string">&quot;action=&quot;</span>);</span><br><span class="line">            builder.append(<span class="built_in">this</span>.action);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        builder.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSecurity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.security;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSecurity</span><span class="params">(String security)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.security = security;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRequestId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.requestId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRequestId</span><span class="params">(String requestId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.requestId = requestId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getRequestTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.requestTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRequestTime</span><span class="params">(Date requestTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.requestTime = requestTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="3-快速上手retrofit"><a href="#3-快速上手retrofit" class="headerlink" title="3.快速上手retrofit"></a>3.快速上手retrofit</h2><p>如果你学习过springboot，那么你对接下来这一套不要太熟悉，我们先来一个最简单的不带参get请求熟悉一下</p>
<h3 id="a-接口"><a href="#a-接口" class="headerlink" title="a.接口"></a>a.接口</h3><p>首先我们来一个Retrofit标准的接口</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ITestService</span> &#123;</span><br><span class="line">    <span class="meta">@GET(&quot;/test&quot;)</span></span><br><span class="line">    Call&lt;DefaultResponse&lt;Object&gt;&gt; <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>其中<br><em><strong>“&#x2F;test”</strong></em><br>代表我们与后台约定的路径；<br><em><strong>DefaultResponse<Object></strong></em><br>代表我们与后台约定的发返回体<br><em><strong>@GET</strong></em><br>注解代表我们与后台约定这是一个get请求的注解；<br>    <em><strong>Call方法</strong></em><br>是我们需要了解的重中之重<br>retrofit2中的call方法源代码如下<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/retrofit1.png"
                      alt="在这里插入图片描述"
                ><br>翻译过来大概意思是该方法向Web服务器发送请求并返回响应，每个调用都会产生自己的HTTP请求和响应对。其他的方法一般用的不多，重点是execute()和enqueue(Callback<T> callback)，稍后我们会有示例</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//execute同步执行请求</span></span><br><span class="line"> 	Response&lt;T&gt; <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"><span class="comment">//enqueue异步执行请求</span></span><br><span class="line">  	<span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(Callback&lt;T&gt; callback)</span>;</span><br><span class="line"><span class="comment">//无论是哪种情况，都可以随时使用cancel取消通话。</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">cancel</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//使用clone对同一Web服务器进行多个参数相同的调用；这可用于实现轮询或重试失败的呼叫。</span></span><br><span class="line">	Call&lt;T&gt; <span class="title function_">clone</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></div>

<p>call接口的实现在源码的OkHttpCall中，这说明retrofit确实是基于OkHttp的，我们以execute()为例</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="keyword">public</span> Response&lt;T&gt; <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  okhttp3.Call call;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (executed) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Already executed.&quot;</span>);</span><br><span class="line">    executed = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (creationFailure != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (creationFailure <span class="keyword">instanceof</span> IOException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (IOException) creationFailure;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> (RuntimeException) creationFailure;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    call = rawCall;</span><br><span class="line">    <span class="keyword">if</span> (call == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        call = rawCall = createRawCall();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException | RuntimeException e) &#123;</span><br><span class="line">        creationFailure = e;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (canceled) &#123;</span><br><span class="line">    call.cancel();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> parseResponse(call.execute());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>  至于为什么同步方法要抛异常，这是因为同步请求可能忙于写请求或读取响应的呼叫，这时就会抛出异常</p>
<h3 id="b-实现"><a href="#b-实现" class="headerlink" title="b.实现"></a>b.实现</h3><p>然后我们实现我们写的ITestService 接口，当然，这也是最简单的方式，并且这和springboot有一些区别<br>  <div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//这是后台的url</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;xxxxxxxxx&quot;</span></span><br><span class="line"><span class="type">Retrofit</span> <span class="variable">retrofit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">    .baseUrl(url)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line"><span class="type">ITestService</span> <span class="variable">service</span> <span class="operator">=</span> retrofit.create(ITestService .class);</span><br></pre></td></tr></table></figure></div></p>
<h3 id="c-execute-和enqueue-Callback-callback"><a href="#c-execute-和enqueue-Callback-callback" class="headerlink" title="c.execute()和enqueue(Callback callback)"></a>c.execute()和enqueue(Callback<T> callback)</h3><p>最后我们来调用我们写的第一个接口，前面说了，有两种方式<br>  <div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"> Call&lt;DefaultResponse&lt;Object&gt;&gt; responseCall = service .get()</span><br><span class="line"> <span class="comment">//同步</span></span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> Response&lt;DefaultResponse&lt;Object&gt;&gt; responseResponse = responseCall.execute();</span><br><span class="line"> <span class="comment">//判断请求是否成功</span></span><br><span class="line">    <span class="keyword">if</span> (responseResponse.isSuccessful())&#123;</span><br><span class="line">   			 DefaultResponse&lt;Object&gt; response = responseResponse.body();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异步</span></span><br><span class="line">responseCall.enqueue(<span class="keyword">new</span> <span class="title class_">Callback</span>&lt;DefaultResponse&lt;Object&gt;&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(Call&lt;DefaultResponse&lt;Object&gt;&gt; call, Response&lt;DefaultResponse&lt;Object&gt;&gt; response)</span> &#123;</span><br><span class="line">                    <span class="comment">//成功的回调</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Call&lt;DefaultResponse&lt;Object&gt;&gt; call, Throwable t)</span> &#123;</span><br><span class="line"> 					<span class="comment">//失败的回调</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;); </span><br><span class="line"></span><br></pre></td></tr></table></figure></div><br>这样，我们就能拿到后台接口的返回，这只是帮助你理解retrofit的模式，接下来，我们来深入了解一下其他的用法。</p>
<h1 id="二、更多用法（注解介绍）"><a href="#二、更多用法（注解介绍）" class="headerlink" title="二、更多用法（注解介绍）"></a>二、更多用法（注解介绍）</h1><p>之前我们展示了最简单的Get请求，并了解到可以使用@GET注解<br>如果你要使用别的请求，retrofit也提供了相对应的注解,可以满足我们的需求，甚至可以定制化请求，十分方便快捷。</p>
<h2 id="1-八种请求注解"><a href="#1-八种请求注解" class="headerlink" title="1.八种请求注解"></a>1.八种请求注解</h2><table>
<thead>
<tr>
<th>注解</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>@GET</td>
<td>get请求</td>
</tr>
<tr>
<td>@POST</td>
<td>post请求</td>
</tr>
<tr>
<td>@PUT</td>
<td>put请求</td>
</tr>
<tr>
<td>@DELETE</td>
<td>delete请求</td>
</tr>
<tr>
<td>@OPTIONS</td>
<td>OPTIONS请求</td>
</tr>
<tr>
<td>@PATCH</td>
<td>PATCH请求</td>
</tr>
<tr>
<td>@HEAD</td>
<td>HEAD请求</td>
</tr>
<tr>
<td>@HTTP</td>
<td>是上面注解的总和，可以实现上面所有请求，并可以拓展</td>
</tr>
<tr>
<td>下面是代码一些代码示例：</td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>@GET</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//如果你的get请求想要带参数，你可以加上@Query</span></span><br><span class="line">   <span class="meta">@GET(&quot;/test&quot;)</span></span><br><span class="line">   Call&lt;DefaultResponse&lt;Object&gt;&gt; <span class="title function_">get</span><span class="params">(<span class="meta">@Query(&quot;id&quot;)</span> String id)</span>;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>@POST</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//post请求带请求体,加上@Body</span></span><br><span class="line"><span class="meta">@POST(&quot;/test&quot;)</span>	</span><br><span class="line">Call&lt;DefaultResponse&lt;Object&gt;&gt; <span class="title function_">post</span><span class="params">(<span class="meta">@Body</span> DataRequest request )</span>;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>@PUT</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PUT(&quot;/test&quot;)</span>	</span><br><span class="line">Call&lt;DefaultResponse&lt;Object&gt;&gt; <span class="title function_">put</span><span class="params">(<span class="meta">@Body</span> DataRequest request )</span>;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>@DELETE</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DELETE(&quot;/test&quot;)</span>	</span><br><span class="line">Call&lt;DefaultResponse&lt;Object&gt;&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@Body</span> DataRequest request )</span>;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>@HTTP</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * method：网络请求的方法（区分大小写）</span></span><br><span class="line"><span class="comment">  * path：网络请求地址路径</span></span><br><span class="line"><span class="comment">  * hasBody：是否有请求体</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@HTTP(method = &quot;GET&quot;, path = &quot;blog/&#123;id&#125;&quot;, hasBody = false)</span></span><br><span class="line"> Call&lt;DefaultResponse&lt;Object&gt;&gt; <span class="title function_">gethttp</span><span class="params">(<span class="meta">@Path(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line"> <span class="comment">// &#123;id&#125; 表示是一个变量，@Path是他的路径</span></span><br><span class="line"> <span class="comment">// method 的值 retrofit 不会做处理，所以要自行保证准确</span></span><br></pre></td></tr></table></figure></div>
<p>  @OPTIONS与 @PATCH由于篇幅原因不多做示例</p>
<h2 id="2-四种标记注解"><a href="#2-四种标记注解" class="headerlink" title="2.四种标记注解"></a>2.四种标记注解</h2><table>
<thead>
<tr>
<th>注解</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>@Headers</td>
<td>使用 @Headers 注解设置固定的请求头，所有请求头不会相互覆盖，即使名字相同。</td>
</tr>
<tr>
<td>@FormUrlEncoded</td>
<td>表示发送form-encoded的数据，每个键值对需要用@Filed来注解键名，随后的对象需要提供值。</td>
</tr>
<tr>
<td>@Multipart</td>
<td>表示发送form-encoded的数据（适用于 有文件 上传的场景），每个键值对需要用@Part来注解键名，随后的对象需要提供值。</td>
</tr>
<tr>
<td>@Streaming</td>
<td>表示返回的数据将以流来返回,默认是载入内存的</td>
</tr>
</tbody></table>
<blockquote>
<p>注解太多了，下面的代码示例为官网示例</p>
</blockquote>
<blockquote>
<p>@Headers</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Headers(&quot;Cache-Control: max-age=640000&quot;)</span></span><br><span class="line"><span class="meta">@GET(&quot;widget/list&quot;)</span></span><br><span class="line">Call&lt;List&lt;Widget&gt;&gt; <span class="title function_">widgetList</span><span class="params">()</span>;</span><br><span class="line"><span class="meta">@Headers(&#123;</span></span><br><span class="line"><span class="meta">    &quot;Accept: application/vnd.github.v3.full+json&quot;,</span></span><br><span class="line"><span class="meta">    &quot;User-Agent: Retrofit-Sample-App&quot;</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>@FormUrlEncoded</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FormUrlEncoded</span></span><br><span class="line"><span class="meta">@POST(&quot;user/edit&quot;)</span></span><br><span class="line">Call&lt;User&gt; <span class="title function_">updateUser</span><span class="params">(<span class="meta">@Field(&quot;first_name&quot;)</span> String first, <span class="meta">@Field(&quot;last_name&quot;)</span> String last)</span>;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>@Multipart</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Multipart</span></span><br><span class="line"><span class="meta">@PUT(&quot;user/photo&quot;)</span></span><br><span class="line">Call&lt;User&gt; <span class="title function_">updateUser</span><span class="params">(<span class="meta">@Part(&quot;photo&quot;)</span> RequestBody photo, <span class="meta">@Part(&quot;description&quot;)</span> RequestBody description)</span>;</span><br></pre></td></tr></table></figure></div>
<p>@Streaming由于篇幅原因不多做示例</p>
<h2 id="3-十二个参数注解"><a href="#3-十二个参数注解" class="headerlink" title="3.十二个参数注解"></a>3.十二个参数注解</h2><blockquote>
<p>@Url<br>@Path<br>@Query  @QueryName  @QueryMap<br>@Header  @HeaderMap<br>@Field  @FieldMap<br>@Part  @PartMap<br>@Body<br>这十二个参数注解是搭配上面的八种请求注解使用的，上面的示例代码也有部分使用到，有各种用途，这里以@Path为例。</p>
</blockquote>
<table>
<thead>
<tr>
<th>注解</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>@Path</td>
<td>接收一个字符串表示接口 path ，与 baseUrl 组成完整的 Url</td>
</tr>
</tbody></table>
<blockquote>
<p>@Path</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GET(&quot;users/&#123;username&#125;&quot;)</span></span><br><span class="line">Call&lt;User&gt; <span class="title function_">getUser</span><span class="params">(<span class="meta">@Path(&quot;username&quot;)</span> String username)</span>;</span><br></pre></td></tr></table></figure></div>

<h1 id="三、进阶使用"><a href="#三、进阶使用" class="headerlink" title="三、进阶使用"></a>三、进阶使用</h1><p>在初识retrofit中，我们了解了retrofit的基本构造方法和使用，但如果要实际运用到项目当中，那么简单的使用方法还不够，因为在实际项目中不可能每一个请求都像我们开始那样写一遍，所以我们要自己封装更好的</p>
<h2 id="1-RetrofitService"><a href="#1-RetrofitService" class="headerlink" title="1.RetrofitService"></a>1.RetrofitService</h2><p>这是我们一开始的使用方法，url一般是不会变的<br>  <div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//这是后台的url</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;xxxxxxxxx&quot;</span></span><br><span class="line"><span class="type">Retrofit</span> <span class="variable">retrofit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">    .baseUrl(url)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure></div><br>  正如前言，这太low了，你拿这个跟别人说你会retrofit,大佬们看到了都会笑的,就像这样<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/retrofit2.png"
                      alt="在这里插入图片描述"
                ><br>  所以我们需要<strong>RetrofitService</strong><br>  让我们基于之前的代码加上一点点的改动<br>  <div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RetrofitService</span> &#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> RetrofitService i;</span><br><span class="line"><span class="keyword">private</span> Retrofit retrofit;</span><br><span class="line"> <span class="keyword">private</span>  <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;xxxxxxxxx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> RetrofitService <span class="title function_">i</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="literal">null</span>) &#123;</span><br><span class="line">            i = <span class="keyword">new</span> <span class="title class_">RetrofitService</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RetrofitService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            retrofit = <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">                    .baseUrl(url)</span><br><span class="line">                    .build();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            Log.e(<span class="string">&quot;RetrofitService&quot;</span>, <span class="string">&quot;RetrofitService: &quot;</span>+url+<span class="string">&quot; ExceptionMessage: &quot;</span>+e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">create</span><span class="params">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> retrofit.create(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//当我们需要使用的时候，后面的使用方式是相同的哦</span></span><br><span class="line"><span class="type">ITestService</span> <span class="variable">api</span> <span class="operator">=</span> RetrofitService.i().create(ITestService .class);</span><br></pre></td></tr></table></figure></div></p>
<h2 id="2-ConverterFactory"><a href="#2-ConverterFactory" class="headerlink" title="2.ConverterFactory"></a>2.ConverterFactory</h2><p>  只有一个单例模式的RetrofitService还远远不够，我们再在基础的构造方法中加一个全局的date类型转换，我们以Jackson为例，改动RetrofitService()方法<br>   <div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="title function_">RetrofitService</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    	<span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line">        <span class="type">JacksonConverterFactory</span> <span class="variable">jacksonConverterFactory</span> <span class="operator">=</span> JacksonConverterFactory.create(objectMapper);</span><br><span class="line">        retrofit = <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">                .baseUrl(url)</span><br><span class="line">                <span class="comment">//设置全局date类型转换</span></span><br><span class="line">                .addConverterFactory(jacksonConverterFactory)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        Log.e(<span class="string">&quot;RetrofitService&quot;</span>, <span class="string">&quot;RetrofitService: &quot;</span>+url+<span class="string">&quot; ExceptionMessage: &quot;</span>+e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h2 id="3-OkHttpClient"><a href="#3-OkHttpClient" class="headerlink" title="3.OkHttpClient"></a>3.OkHttpClient</h2><p>  有了类型转换，又怎么能没有超时时间和intercept呢？，这里使用了OkHttpClient，我们在RetrofitService中加入了如下改动<br>   <div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder()</span><br><span class="line">		 <span class="comment">//设置超时时间</span></span><br><span class="line">          .connectTimeout(<span class="number">30</span>, TimeUnit.SECONDS)</span><br><span class="line">          .readTimeout(<span class="number">30</span>, TimeUnit.SECONDS)</span><br><span class="line">          <span class="comment">//设置https证书</span></span><br><span class="line">          .sslSocketFactory(HttpsUtils.getSslSocketFactory(<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>))</span><br><span class="line">          .hostnameVerifier(<span class="keyword">new</span> <span class="title class_">HostnameVerifier</span>() &#123;</span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String hostname, SSLSession session)</span> &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          .writeTimeout(<span class="number">30</span>, TimeUnit.SECONDS).addInterceptor(<span class="keyword">new</span> <span class="title class_">Interceptor</span>() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> Response <span class="title function_">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">          Request.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> chain.request()</span><br><span class="line">                  .newBuilder();</span><br><span class="line">          	<span class="comment">//添加头</span></span><br><span class="line">              builder.addHeader(<span class="string">&quot;token&quot;</span>, <span class="number">111222333</span>);</span><br><span class="line">          </span><br><span class="line">          <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> builder.build();</span><br><span class="line">          <span class="keyword">return</span> chain.proceed(request);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;).build();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> <span class="title function_">RetrofitService</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">      	<span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">          objectMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line">          <span class="type">JacksonConverterFactory</span> <span class="variable">jacksonConverterFactory</span> <span class="operator">=</span> JacksonConverterFactory.create(objectMapper);</span><br><span class="line">          retrofit = <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">                  .baseUrl(url)</span><br><span class="line">                  <span class="comment">//设置超时时间,intercept</span></span><br><span class="line">                  .client(client)</span><br><span class="line">                  <span class="comment">//设置全局date类型转换</span></span><br><span class="line">                  .addConverterFactory(jacksonConverterFactory)</span><br><span class="line">                  .build();</span><br><span class="line">      &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">          Log.e(<span class="string">&quot;RetrofitService&quot;</span>, <span class="string">&quot;RetrofitService: &quot;</span>+url+<span class="string">&quot; ExceptionMessage: &quot;</span>+e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></p>
<p>至此，一个Retrofit工具类完成，如果你需要更多功能可以阅读Retrofit.java的源码<br>如果你想了解更多retrofit的基础用法，这里有官方的文档和供你参考</p>
<h2 id="retrofit官网"><a href="#retrofit官网" class="headerlink" title=" retrofit官网."></a> <a class="link"   href="https://square.github.io/retrofit/#download" >retrofit官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</h2>]]></content>
      <categories>
        <category>andorid</category>
      </categories>
      <tags>
        <tag>retrofit</tag>
      </tags>
  </entry>
  <entry>
    <title>kotlin 将List＜Any＞转为List＜Object ＞</title>
    <url>/2023/01/16/kotlin-%E5%B0%86List%EF%BC%9CAny%EF%BC%9E%E8%BD%AC%E4%B8%BAList%EF%BC%9CObject-%EF%BC%9E/kotlin-%E5%B0%86List%EF%BC%9CAny%EF%BC%9E%E8%BD%AC%E4%B8%BAList%EF%BC%9CObject-%EF%BC%9E/</url>
    <content><![CDATA[<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.gson.Gson; </span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T&gt;</span> List<span class="type">&lt;Any&gt;</span>.<span class="title">toBeanList</span><span class="params">()</span></span>: List&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> newList : MutableList&lt;T&gt; = arrayListOf()</span><br><span class="line">        <span class="keyword">for</span> (item <span class="keyword">in</span> <span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="keyword">val</span> toJson = gson.toJson( item)</span><br><span class="line">            <span class="keyword">val</span> entity: T = gson.fromJson(toJson,T::<span class="keyword">class</span>.java)</span><br><span class="line">            newList.add(entity)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newList.toList()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>主要是记录inline与reified，怕忘记了，另一个就是书不要读太死了，灵活变通吧</p>
]]></content>
      <categories>
        <category>andorid</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot 部分转发（不使用拦截器）</title>
    <url>/2022/05/10/springboot-%E9%83%A8%E5%88%86%E8%BD%AC%E5%8F%91%EF%BC%88%E4%B8%8D%E4%BD%BF%E7%94%A8%E6%8B%A6%E6%88%AA%E5%99%A8%EF%BC%89/springboot-%E9%83%A8%E5%88%86%E8%BD%AC%E5%8F%91%EF%BC%88%E4%B8%8D%E4%BD%BF%E7%94%A8%E6%8B%A6%E6%88%AA%E5%99%A8%EF%BC%89/</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章实现springboot在没有接口可以访问的时候，也就是正常来说服务器应该返回404的接口转发到其他的服务器上的功能<br><code>需要有一定的springboot基础</code></p>
<hr>
<h1 id="一、Interceptor"><a href="#一、Interceptor" class="headerlink" title="一、Interceptor"></a>一、Interceptor</h1><p>一想到转发，首先我想到的就是拦截器了，噼里啪啦就开始操作，代码类似如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aw.ccpos.util.HttpServletRequestReader;</span><br><span class="line"><span class="keyword">import</span> com.aw.ccpos.util.HttpUtils;</span><br><span class="line"><span class="keyword">import</span> com.aw.ccpos.util.SysUtil;</span><br><span class="line"><span class="keyword">import</span> com.aw.service.pos.base.model.RequestModel;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StreamUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InfoInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(InfoInterceptor.class);</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span><br><span class="line">			<span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">// 只有返回true才会继续向下执行，返回false取消当前请求</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span><br><span class="line"><span class="params">						  ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">						  </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>postHandle</strong>方法中的ModelAndView 可以自定义404的错误页面，HttpServletResponse 则是返回，但是尝试过后发现所有的接口都要这么搞一遍，意思是如果通过这个办法所有的接口都会被拦截转发，这并不是我们想要的</p>
<h1 id="二、-x2F"><a href="#二、-x2F" class="headerlink" title="二、&#x2F;**"></a>二、&#x2F;**</h1><p>左思右想过后采用了如下方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aw.ccpos.constants.Constants;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(value = &quot;GraphDB&quot;, tags = &#123;</span></span><br><span class="line"><span class="meta">        &quot;graphdb-Api&quot;</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GraphDBController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoutingDelegate routingDelegate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/**&quot;, method = &#123;RequestMethod.GET, RequestMethod.POST, RequestMethod.PUT, RequestMethod.DELETE&#125;, produces = MediaType.TEXT_PLAIN_VALUE)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity <span class="title function_">catchAll</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> routingDelegate.redirect(request, response,  Constants.SERVER_URL, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>既然我们只需要处理服务器找不到的方法，那么只需要&#x2F;**然后包含我们页面的请求类型就好了，因为我代理转发的工具类需要MediaType.TEXT_PLAIN_VALUE类型，所以我这么设置，读者可以如不需要可以自己写转发，RoutingDelegate 转发工具类会在后文提供</p>
<h2 id="1-RoutingDelegate"><a href="#1-RoutingDelegate" class="headerlink" title="1.RoutingDelegate"></a>1.RoutingDelegate</h2><p>转发工具类   代码如下（示例）：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aw.ccpos.util.HttpsUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.NoopHostnameVerifier;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.TrustStrategy;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.HttpComponentsClientHttpRequestFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StreamUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyManagementException;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStoreException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.X509Certificate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoutingDelegate</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">redirect</span><span class="params">(HttpServletRequest request, HttpServletResponse response,String routeUrl, String prefix)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// build up the redirect URL</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">redirectUrl</span> <span class="operator">=</span> createRedictUrl(request,routeUrl, prefix);</span><br><span class="line">            <span class="type">RequestEntity</span> <span class="variable">requestEntity</span> <span class="operator">=</span> createRequestEntity(request, redirectUrl);</span><br><span class="line">            <span class="keyword">return</span> route(requestEntity);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>(<span class="string">&quot;REDIRECT ERROR&quot;</span>, HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">createRedictUrl</span><span class="params">(HttpServletRequest request, String routeUrl, String prefix)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">queryString</span> <span class="operator">=</span> request.getQueryString();</span><br><span class="line">        <span class="keyword">return</span> routeUrl + request.getRequestURI() +</span><br><span class="line">                (queryString != <span class="literal">null</span> ? <span class="string">&quot;?&quot;</span> + queryString : <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RequestEntity <span class="title function_">createRequestEntity</span><span class="params">(HttpServletRequest request, String url)</span> <span class="keyword">throws</span> URISyntaxException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">        <span class="type">HttpMethod</span> <span class="variable">httpMethod</span> <span class="operator">=</span> HttpMethod.resolve(method);</span><br><span class="line">        MultiValueMap&lt;String, String&gt; headers = parseRequestHeader(request);</span><br><span class="line">        <span class="type">byte</span>[] body = parseRequestBody(request);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestEntity</span>&lt;&gt;(body, headers, httpMethod, <span class="keyword">new</span> <span class="title class_">URI</span>(url));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ResponseEntity&lt;String&gt; <span class="title function_">route</span><span class="params">(RequestEntity requestEntity)</span> &#123;</span><br><span class="line">        ResponseEntity&lt;String&gt; responseEntity;</span><br><span class="line">        responseEntity = getRestTemplate().exchange(requestEntity, String.class);</span><br><span class="line">        <span class="keyword">return</span> responseEntity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] parseRequestBody(HttpServletRequest request) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> request.getInputStream();</span><br><span class="line">        <span class="keyword">return</span> StreamUtils.copyToByteArray(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MultiValueMap&lt;String, String&gt; <span class="title function_">parseRequestHeader</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">        List&lt;String&gt; headerNames = Collections.list(request.getHeaderNames());</span><br><span class="line">        <span class="keyword">for</span> (String headerName : headerNames) &#123;</span><br><span class="line">            List&lt;String&gt; headerValues = Collections.list(request.getHeaders(headerName));</span><br><span class="line">            <span class="keyword">for</span> (String headerValue : headerValues) &#123;</span><br><span class="line">                headers.add(headerName, headerValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> headers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SSLContext</span> <span class="variable">sslContext</span> <span class="operator">=</span> SSLContext.getInstance(<span class="string">&quot;TLS&quot;</span>);</span><br><span class="line">            KeyManager[] keyManagers = HttpsUtils.prepareKeyManager(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            TrustManager[] trustManagers = HttpsUtils.prepareTrustManager(<span class="literal">null</span>);</span><br><span class="line">            <span class="type">TrustManager</span> <span class="variable">trustManager</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (trustManagers != <span class="literal">null</span>) &#123;</span><br><span class="line">                trustManager = <span class="keyword">new</span> <span class="title class_">HttpsUtils</span>.MyTrustManager( HttpsUtils.chooseTrustManager(trustManagers));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                trustManager = <span class="keyword">new</span> <span class="title class_">HttpsUtils</span>.UnSafeTrustManager();</span><br><span class="line">            &#125;</span><br><span class="line">            sslContext.init(keyManagers, <span class="keyword">new</span> <span class="title class_">TrustManager</span>[]&#123;trustManager&#125;, <span class="keyword">new</span> <span class="title class_">SecureRandom</span>());</span><br><span class="line">            <span class="type">SSLConnectionSocketFactory</span> <span class="variable">csf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SSLConnectionSocketFactory</span>(sslContext,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;TLSv1&quot;</span>&#125;,</span><br><span class="line">                    <span class="literal">null</span>,</span><br><span class="line">                    NoopHostnameVerifier.INSTANCE);</span><br><span class="line"></span><br><span class="line">            <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.custom()</span><br><span class="line">                    .setSSLSocketFactory(csf)</span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">            <span class="type">HttpComponentsClientHttpRequestFactory</span> <span class="variable">requestFactory</span> <span class="operator">=</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">HttpComponentsClientHttpRequestFactory</span>();</span><br><span class="line"></span><br><span class="line">            requestFactory.setHttpClient(httpClient);</span><br><span class="line">            <span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>(requestFactory);</span><br><span class="line">            <span class="keyword">return</span> restTemplate;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NoSuchAlgorithmException | KeyManagementException | KeyStoreException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>就是一个比较标准的https的转发类，比较值得一提的是getRestTemplate()方法，它封装了一个信任任何证书的RestTemplate转发，不然https请求转发会报错，工具类HttpsUtil在下文会给出</p>
<h2 id="2-HttpsUtils（https支持）"><a href="#2-HttpsUtils（https支持）" class="headerlink" title="2.HttpsUtils（https支持）"></a>2.HttpsUtils（https支持）</h2><p>代码如下（示例）：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyManagementException;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStore;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStoreException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertificateException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertificateFactory;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.X509Certificate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.HostnameVerifier;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.KeyManager;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.KeyManagerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSession;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.TrustManager;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.TrustManagerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.X509TrustManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpsUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.<span class="type">Logger</span> <span class="variable">Logger</span> <span class="operator">=</span> LoggerFactory.getLogger(HttpsUtils.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SSLSocketFactory <span class="title function_">getSslSocketFactory</span><span class="params">(InputStream[] certificates, InputStream bksFile, String password)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TrustManager[] trustManagers = prepareTrustManager(certificates);</span><br><span class="line">            KeyManager[] keyManagers = prepareKeyManager(bksFile, password);</span><br><span class="line">            <span class="type">SSLContext</span> <span class="variable">sslContext</span> <span class="operator">=</span> SSLContext.getInstance(<span class="string">&quot;TLS&quot;</span>);</span><br><span class="line">            <span class="type">TrustManager</span> <span class="variable">trustManager</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (trustManagers != <span class="literal">null</span>) &#123;</span><br><span class="line">                trustManager = <span class="keyword">new</span> <span class="title class_">MyTrustManager</span>(chooseTrustManager(trustManagers));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                trustManager = <span class="keyword">new</span> <span class="title class_">UnSafeTrustManager</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            sslContext.init(keyManagers, <span class="keyword">new</span> <span class="title class_">TrustManager</span>[]&#123;trustManager&#125;, <span class="keyword">new</span> <span class="title class_">SecureRandom</span>());</span><br><span class="line">            <span class="keyword">return</span> sslContext.getSocketFactory();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeyManagementException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeyStoreException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TrustManager[] prepareTrustManager(InputStream... certificates) &#123;</span><br><span class="line">        <span class="keyword">if</span> (certificates == <span class="literal">null</span> || certificates.length &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">CertificateFactory</span> <span class="variable">certificateFactory</span> <span class="operator">=</span> CertificateFactory.getInstance(<span class="string">&quot;X.509&quot;</span>);</span><br><span class="line">            <span class="type">KeyStore</span> <span class="variable">keyStore</span> <span class="operator">=</span> KeyStore.getInstance(KeyStore.getDefaultType());</span><br><span class="line">            keyStore.load(<span class="literal">null</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (InputStream certificate : certificates) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">certificateAlias</span> <span class="operator">=</span> Integer.toString(index++);</span><br><span class="line">                keyStore.setCertificateEntry(certificateAlias, certificateFactory.generateCertificate(certificate));</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (certificate != <span class="literal">null</span>)</span><br><span class="line">                        certificate.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    Logger.error(<span class="string">&quot;error to close certificate&quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">TrustManagerFactory</span> <span class="variable">trustManagerFactory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</span><br><span class="line">            trustManagerFactory.init(keyStore);</span><br><span class="line">            TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();</span><br><span class="line">            <span class="keyword">return</span> trustManagers;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Logger.error(<span class="string">&quot;fail to prepareTrustManager&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> KeyManager[] prepareKeyManager(InputStream bksFile, String password) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bksFile == <span class="literal">null</span> || password == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">KeyStore</span> <span class="variable">clientKeyStore</span> <span class="operator">=</span> KeyStore.getInstance(<span class="string">&quot;BKS&quot;</span>);</span><br><span class="line">            clientKeyStore.load(bksFile, password.toCharArray());</span><br><span class="line">            <span class="type">KeyManagerFactory</span> <span class="variable">keyManagerFactory</span> <span class="operator">=</span> KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());</span><br><span class="line">            keyManagerFactory.init(clientKeyStore, password.toCharArray());</span><br><span class="line">            <span class="keyword">return</span> keyManagerFactory.getKeyManagers();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Logger.error(<span class="string">&quot;fail to prepareKeyManager&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> X509TrustManager <span class="title function_">chooseTrustManager</span><span class="params">(TrustManager[] trustManagers)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (TrustManager trustManager : trustManagers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (trustManager <span class="keyword">instanceof</span> X509TrustManager) &#123;</span><br><span class="line">                <span class="keyword">return</span> (X509TrustManager) trustManager;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ignoreSSLCheck</span><span class="params">(OkHttpClient sClient)</span> &#123;</span><br><span class="line">        <span class="type">SSLContext</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sc = SSLContext.getInstance(<span class="string">&quot;SSL&quot;</span>);</span><br><span class="line">            sc.init(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">TrustManager</span>[]&#123;<span class="keyword">new</span> <span class="title class_">X509TrustManager</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;&#125;, <span class="keyword">new</span> <span class="title class_">SecureRandom</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Logger.error(<span class="string">&quot;fail to ignoreSSLCheck&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">HostnameVerifier</span> <span class="variable">hv1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HostnameVerifier</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String hostname, SSLSession session)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">workerClassName</span> <span class="operator">=</span> <span class="string">&quot;okhttp3.OkHttpClient&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">workerClass</span> <span class="operator">=</span> Class.forName(workerClassName);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">hostnameVerifier</span> <span class="operator">=</span> workerClass.getDeclaredField(<span class="string">&quot;hostnameVerifier&quot;</span>);</span><br><span class="line">            hostnameVerifier.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            hostnameVerifier.set(sClient, hv1);</span><br><span class="line"></span><br><span class="line">            <span class="type">Field</span> <span class="variable">sslSocketFactory</span> <span class="operator">=</span> workerClass.getDeclaredField(<span class="string">&quot;sslSocketFactory&quot;</span>);</span><br><span class="line">            sslSocketFactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            sslSocketFactory.set(sClient, sc.getSocketFactory());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Logger.error(<span class="string">&quot;fail to hostnameVerifier&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UnSafeTrustManager</span> <span class="keyword">implements</span> <span class="title class_">X509TrustManager</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">X509Certificate</span>[]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyTrustManager</span> <span class="keyword">implements</span> <span class="title class_">X509TrustManager</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> X509TrustManager defaultTrustManager;</span><br><span class="line">        <span class="keyword">private</span> X509TrustManager localTrustManager;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyTrustManager</span><span class="params">(X509TrustManager localTrustManager)</span> <span class="keyword">throws</span> NoSuchAlgorithmException, KeyStoreException &#123;</span><br><span class="line">            <span class="type">TrustManagerFactory</span> <span class="variable">var4</span> <span class="operator">=</span> TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</span><br><span class="line">            var4.init((KeyStore) <span class="literal">null</span>);</span><br><span class="line">            defaultTrustManager = chooseTrustManager(var4.getTrustManagers());</span><br><span class="line">            <span class="built_in">this</span>.localTrustManager = localTrustManager;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                defaultTrustManager.checkServerTrusted(chain, authType);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CertificateException ce) &#123;</span><br><span class="line">                localTrustManager.checkServerTrusted(chain, authType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">X509Certificate</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">UnSafeHostnameVerifier</span> <span class="keyword">implements</span> <span class="title class_">HostnameVerifier</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String hostname, SSLSession session)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>


<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上完成springboot部分代理转发，共勉</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓EditText.requestFocus失效</title>
    <url>/2021/10/20/%E5%AE%89%E5%8D%93EditText-requestFocus%E5%A4%B1%E6%95%88/%E5%AE%89%E5%8D%93EditText-requestFocus%E5%A4%B1%E6%95%88/</url>
    <content><![CDATA[<p>   之前项目需求要求在进入一个activity的时候自动获取页面内某个EditText的焦点，让用户可以进入页面过后马上输入，这里我使用了</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">editText.requestFocus();</span><br></pre></td></tr></table></figure></div>
<p>  我经过调试过后这行代码并没有生效，于是在网上查找了一些资料发现了原因，<br>因为我是在onCreate（）方法中调用的这行代码，但是在activity的生命周期中这个时候editText这个时候并没有被渲染在界面上，所以这行代码理所当然的失效了。</p>
<p>话不多说，下面上解决办法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一次设置延时，等待页面渲染完毕再设置焦点</span></span><br><span class="line">editText.postDelayed(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        editText.requestFocus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>andorid</category>
      </categories>
      <tags>
        <tag>-开发日常 -java</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓使用fastjson解析带BigDecimal参数的实体类报错java.lang.NumberFormatException: For input string:乱码...</title>
    <url>/2021/09/26/%E5%AE%89%E5%8D%93%E4%BD%BF%E7%94%A8fastjson%E8%A7%A3%E6%9E%90%E5%B8%A6BigDecimal%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E4%BD%93%E7%B1%BB%E6%8A%A5%E9%94%99java-lang-NumberFormatException-For-input-string-%E4%B9%B1%E7%A0%81/%E5%AE%89%E5%8D%93%E4%BD%BF%E7%94%A8fastjson%E8%A7%A3%E6%9E%90%E5%B8%A6BigDecimal%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E4%BD%93%E7%B1%BB%E6%8A%A5%E9%94%99java-lang-NumberFormatException-For-input-string-%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<h1 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h1><p>今天在公司工作的时用fastjson beancopy数据，出现了一个报错类似如下</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">java.<span class="property">lang</span>.<span class="property">NumberFormatException</span>: <span class="title class_">For</span> input <span class="attr">string</span>:</span><br><span class="line"><span class="comment">// 此处乱码</span></span><br><span class="line">at java.<span class="property">lang</span>.<span class="property">Integer</span>.<span class="built_in">parseInt</span>(<span class="title class_">Integer</span>.<span class="property">java</span>:<span class="number">521</span>)</span><br><span class="line">at java.<span class="property">lang</span>.<span class="property">Integer</span>.<span class="built_in">parseInt</span>(<span class="title class_">Integer</span>.<span class="property">java</span>:<span class="number">556</span>)</span><br><span class="line">at java.<span class="property">math</span>.<span class="property">BigDecimal</span>.(<span class="title class_">BigDecimal</span>.<span class="property">java</span>:<span class="number">336</span>)</span><br><span class="line">at java.<span class="property">math</span>.<span class="property">BigDecimal</span>.(<span class="title class_">BigDecimal</span>.<span class="property">java</span>:<span class="number">374</span>)</span><br><span class="line">at com.<span class="property">alibaba</span>.<span class="property">fastjson</span>.<span class="property">parser</span>.<span class="property">JSONLexerBase</span>.<span class="title function_">scanFieldDecimal</span>(<span class="title class_">JSON</span>LexerBase.<span class="property">java</span>:<span class="number">3727</span>)</span><br><span class="line">at com.<span class="property">alibaba</span>.<span class="property">fastjson</span>.<span class="property">parser</span>.<span class="property">deserializer</span>.<span class="property">JavaBeanDeserializer</span>.<span class="title function_">deserialze</span>(<span class="title class_">JavaBeanDeserializer</span>.<span class="property">java</span>:<span class="number">594</span>)</span><br><span class="line">at com.<span class="property">alibaba</span>.<span class="property">fastjson</span>.<span class="property">parser</span>.<span class="property">deserializer</span>.<span class="property">JavaBeanDeserializer</span>.<span class="title function_">deserialze</span>(<span class="title class_">JavaBeanDeserializer</span>.<span class="property">java</span>:<span class="number">295</span>)</span><br><span class="line">at com.<span class="property">alibaba</span>.<span class="property">fastjson</span>.<span class="property">parser</span>.<span class="property">deserializer</span>.<span class="property">JavaBeanDeserializer</span>.<span class="title function_">deserialze</span>(<span class="title class_">JavaBeanDeserializer</span>.<span class="property">java</span>:<span class="number">291</span>)</span><br><span class="line">at com.<span class="property">alibaba</span>.<span class="property">fastjson</span>.<span class="property">parser</span>.<span class="property">deserializer</span>.<span class="property">DefaultFieldDeserializer</span>.<span class="title function_">parseField</span>(<span class="title class_">DefaultFieldDeserializer</span>.<span class="property">java</span>:<span class="number">88</span>)</span><br><span class="line">at com.<span class="property">alibaba</span>.<span class="property">fastjson</span>.<span class="property">parser</span>.<span class="property">deserializer</span>.<span class="property">JavaBeanDeserializer</span>.<span class="title function_">parseField</span>(<span class="title class_">JavaBeanDeserializer</span>.<span class="property">java</span>:<span class="number">1282</span>)</span><br><span class="line">at com.<span class="property">alibaba</span>.<span class="property">fastjson</span>.<span class="property">parser</span>.<span class="property">deserializer</span>.<span class="property">JavaBeanDeserializer</span>.<span class="title function_">deserialze</span>(<span class="title class_">JavaBeanDeserializer</span>.<span class="property">java</span>:<span class="number">897</span>)</span><br><span class="line">at com.<span class="property">alibaba</span>.<span class="property">fastjson</span>.<span class="property">parser</span>.<span class="property">deserializer</span>.<span class="property">JavaBeanDeserializer</span>.<span class="title function_">deserialze</span>(<span class="title class_">JavaBeanDeserializer</span>.<span class="property">java</span>:<span class="number">295</span>)</span><br><span class="line">at com.<span class="property">alibaba</span>.<span class="property">fastjson</span>.<span class="property">parser</span>.<span class="property">DefaultJSONParser</span>.<span class="title function_">parseObject</span>(<span class="title class_">DefaultJSONParser</span>.<span class="property">java</span>:<span class="number">706</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Caused</span> <span class="attr">by</span>: com.<span class="property">alibaba</span>.<span class="property">fastjson</span>.<span class="property">JSONException</span>: <span class="title class_">For</span> input <span class="attr">string</span>:</span><br><span class="line"><span class="comment">//此处 乱码</span></span><br><span class="line">at com.<span class="property">alibaba</span>.<span class="property">fastjson</span>.<span class="property">parser</span>.<span class="property">DefaultJSONParser</span>.<span class="title function_">parseObject</span>(<span class="title class_">DefaultJSONParser</span>.<span class="property">java</span>:<span class="number">713</span>)</span><br><span class="line">at com.<span class="property">alibaba</span>.<span class="property">fastjson</span>.<span class="property">JSON</span>.<span class="title function_">parseObject</span>(<span class="title class_">JSON</span>.<span class="property">java</span>:<span class="number">394</span>)</span><br><span class="line">at com.<span class="property">alibaba</span>.<span class="property">fastjson</span>.<span class="property">JSON</span>.<span class="title function_">parseObject</span>(<span class="title class_">JSON</span>.<span class="property">java</span>:<span class="number">357</span>)</span><br><span class="line">at rxhttp.<span class="property">wrapper</span>.<span class="property">converter</span>.<span class="property">FastJsonConverter</span>.<span class="title function_">convert</span>(<span class="title class_">FastJsonConverter</span>.<span class="property">java</span>:<span class="number">59</span>)</span><br><span class="line">at rxhttp.<span class="property">wrapper</span>.<span class="property">utils</span>.<span class="property">Converter</span>.<span class="title function_">convert</span>(<span class="title class_">Converter</span>.<span class="property">kt</span>:<span class="number">45</span>)</span><br><span class="line">at rxhttp.<span class="property">wrapper</span>.<span class="property">parse</span>.<span class="property">AbstractParser</span>.<span class="title function_">convert</span>(<span class="title class_">AbstractParser</span>.<span class="property">kt</span>:<span class="number">33</span>)</span><br><span class="line">at com.<span class="property">galaxis</span>.<span class="property">paser</span>.<span class="property">ResultPaser</span>.<span class="title function_">onParse</span>(<span class="title class_">ResultPaser</span>.<span class="property">java</span>:<span class="number">41</span>)</span><br><span class="line">at rxhttp.<span class="property">wrapper</span>.<span class="property">param</span>.<span class="property">ObservableParser$SyncParserObserver</span>.<span class="title function_">onNext</span>(<span class="title class_">ObservableParser</span>.<span class="property">java</span>:<span class="number">103</span>)</span><br><span class="line">at rxhttp.<span class="property">wrapper</span>.<span class="property">param</span>.<span class="property">ObservableParser$SyncParserObserver</span>.<span class="title function_">onNext</span>(<span class="title class_">ObservableParser</span>.<span class="property">java</span>:<span class="number">54</span>)</span><br><span class="line">at rxhttp.<span class="property">wrapper</span>.<span class="property">param</span>.<span class="property">ObservableCallEnqueue$HttpDisposable</span>.<span class="title function_">onResponse</span>(<span class="title class_">ObservableCallEnqueue</span>.<span class="property">java</span>:<span class="number">79</span>)</span><br><span class="line">at okhttp3.<span class="property">internal</span>.<span class="property">connection</span>.<span class="property">RealCall$AsyncCall</span>.<span class="title function_">run</span>(<span class="title class_">RealCall</span>.<span class="property">kt</span>:<span class="number">504</span>)</span><br><span class="line">at java.<span class="property">util</span>.<span class="property">concurrent</span>.<span class="property">ThreadPoolExecutor</span>.<span class="title function_">runWorker</span>(<span class="title class_">ThreadPoolExecutor</span>.<span class="property">java</span>:<span class="number">1133</span>)</span><br><span class="line">at java.<span class="property">util</span>.<span class="property">concurrent</span>.<span class="property">ThreadPoolExecutor$Worker</span>.<span class="title function_">run</span>(<span class="title class_">ThreadPoolExecutor</span>.<span class="property">java</span>:<span class="number">607</span>)</span><br><span class="line">at java.<span class="property">lang</span>.<span class="property">Thread</span>.<span class="title function_">run</span>(<span class="title class_">Thread</span>.<span class="property">java</span>:<span class="number">761</span>)</span><br></pre></td></tr></table></figure></div>
<p>我心中的当时十分平静，不就是不能强转吗？我来看看怎么强转不就行了，但是仔细一看不太对BigDecimal怎么转到Integer就不行了，也太low了吧</p>
<h1 id="找到问题"><a href="#找到问题" class="headerlink" title="找到问题"></a>找到问题</h1><p>然后就是漫长的查找问题的过程，发现报错的乱码和我代码里的都没有相符合的地方，最终把问题确定在了fastjson本身上，虽然有点不相信，但是排除法只能在它上面了。<br>功夫不负有心人，终于找到了github上面的这个issue，网址如下：<br>链接: <a class="link"   href="https://github.com/alibaba/fastjson/pull/3555" >https://github.com/alibaba/fastjson/pull/3555 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<p>大概说的就是修复了一个fastjson在Android系统上处理BigDecimal解析错误的一个bug，并且已经修复。</p>
<h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><p>我一看那好吧，谁叫我没本事不能自己解析呢是吧，既然你都修了我升个版本总可以用了吧，然后我发现最新的版本还是有这个问题，根本没提上去！！o(╥﹏╥)o</p>
<p>经历了九九八十一难，最后我使用了 fastjson自带的@JSONField的序列化和反序列化绕开了这个bug完成了解析</p>
<p>在BigDecimal的字段上加上了这个注解，然后自己写转换的方法，就可以绕开这个bug啦</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JSONField(serializeUsing= BigDecimalToDouble.class,deserializeUsing = DoubleToBigDecimal.class)</span></span><br></pre></td></tr></table></figure></div>
<p>BigDecimalToDouble .class</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.JSONSerializer;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.ObjectSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ProjectName</span> : ccpos</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : yifeng_zeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span> : 2021/9/23 12:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> : fastjson轉換</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">BigDecimalToDouble</span> <span class="keyword">implements</span> <span class="title class_">ObjectSerializer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class="type">int</span> features)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">value</span> <span class="operator">=</span> (BigDecimal) object;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">doubleValue</span> <span class="operator">=</span> value.doubleValue();</span><br><span class="line">        serializer.write(doubleValue);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>DoubleToBigDecimal .class</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ProjectName</span> : ccpos</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : yifeng_zeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span> : 2021/9/23 12:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> : fastjson轉換</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleToBigDecimal</span> <span class="keyword">implements</span> <span class="title class_">ObjectDeserializer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">deserialze</span><span class="params">(DefaultJSONParser parser, Type type, Object fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">value</span> <span class="operator">=</span> parser.parseObject(Double.class);</span><br><span class="line">        <span class="comment">// DataType 数据类型 枚举</span></span><br><span class="line">       <span class="keyword">return</span> (T) <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(value);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getFastMatchToken</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>还是挺简单的，不是吗？(简单个鬼，半天没有了，小声bibi）</p>
]]></content>
      <categories>
        <category>andorid</category>
      </categories>
      <tags>
        <tag>开发日常</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓设置了带drawable的background后部分机型margin失效</title>
    <url>/2023/02/13/%E5%AE%89%E5%8D%93%E8%AE%BE%E7%BD%AE%E4%BA%86%E5%B8%A6drawable%E7%9A%84background%E5%90%8E%E9%83%A8%E5%88%86%E6%9C%BA%E5%9E%8Bmargin%E5%A4%B1%E6%95%88/%E5%AE%89%E5%8D%93%E8%AE%BE%E7%BD%AE%E4%BA%86%E5%B8%A6drawable%E7%9A%84background%E5%90%8E%E9%83%A8%E5%88%86%E6%9C%BA%E5%9E%8Bmargin%E5%A4%B1%E6%95%88/</url>
    <content><![CDATA[<h1 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h1><p>接收了“前辈”的宝贵布局，在此基础上更改的需求，UI验收时发现了这部分异常，真是谢谢前辈</p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>android:layout_marginLeft在设置drawable的android:background时，在部分机型上失效</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line">&lt;LinearLayout</span><br><span class="line">     android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">     android:layout_height=<span class="string">&quot;@dimen/dp100&quot;</span></span><br><span class="line">     android:layout_marginLeft=<span class="string">&quot;@dimen/dp15&quot;</span></span><br><span class="line">     android:layout_marginTop=<span class="string">&quot;@dimen/dp10&quot;</span></span><br><span class="line">     android:layout_marginEnd=<span class="string">&quot;@dimen/dp15&quot;</span></span><br><span class="line">     android:background=<span class="string">&quot;@drawable/bg_corner5_fafafa&quot;</span></span><br><span class="line">     android:orientation=<span class="string">&quot;vertical&quot;</span>&gt;</span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h1><p>但是布局预览上和部分机型是生效的，并且失效的机型在更改drawable为color时是生效的，这一度让我认为这是drawable资源文件的问题，但是我看了半天drawable资源文件也没看出来，就那么两行代码；最后发现<strong>android:layout_marginLeft</strong>与其他的<strong>android:layout_marginEnd</strong>等属性不匹配！！！！！这时我反应过来，应该是同事写代码不规范导致的</p>
<hr>
<h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><p>将<strong>layout_marginLeft</strong>更换为<strong>layout_marginStart</strong></p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line">&lt;LinearLayout</span><br><span class="line">     android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">     android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">     android:layout_marginStart=<span class="string">&quot;@dimen/dp15&quot;</span></span><br><span class="line">     android:layout_marginEnd=<span class="string">&quot;@dimen/dp15&quot;</span></span><br><span class="line">     android:layout_marginTop=<span class="string">&quot;@dimen/dp10&quot;</span></span><br><span class="line">     android:layout_marginBottom=<span class="string">&quot;@dimen/dp15&quot;</span></span><br><span class="line">     android:background=<span class="string">&quot;@drawable/bg_corner5_fafafa&quot;</span></span><br><span class="line">     android:orientation=<span class="string">&quot;vertical&quot;</span>&gt;</span><br></pre></td></tr></table></figure></div>
<p>代码生效，所以平时写代码还是要规范</p>
]]></content>
      <categories>
        <category>andorid</category>
      </categories>
      <tags>
        <tag>开发日常</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓：初识Presentation（实现双屏异显，特殊的权限添加）</title>
    <url>/2023/03/09/%E5%AE%89%E5%8D%93%EF%BC%9A%E5%88%9D%E8%AF%86Presentation%EF%BC%88%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%B1%8F%E5%BC%82%E6%98%BE%EF%BC%8C%E7%89%B9%E6%AE%8A%E7%9A%84%E6%9D%83%E9%99%90%E6%B7%BB%E5%8A%A0%EF%BC%89/%E5%AE%89%E5%8D%93%EF%BC%9A%E5%88%9D%E8%AF%86Presentation%EF%BC%88%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%B1%8F%E5%BC%82%E6%98%BE%EF%BC%8C%E7%89%B9%E6%AE%8A%E7%9A%84%E6%9D%83%E9%99%90%E6%B7%BB%E5%8A%A0%EF%BC%89/</url>
    <content><![CDATA[<p> @<a href="%E5%AE%89%E5%8D%93%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E5%8F%8C%E5%B1%8F%E5%BC%82%E6%98%BE">TOC</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>  链接: <a class="link"   href="https://blog.csdn.net/wlwl0071986/article/details/48542923?spm=1001.2101.3001.6650.15&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-15.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-15.no_search_link" >Android实现双屏异显 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.<br>  链接: <a class="link"   href="https://blog.csdn.net/pugongying1988/article/details/70597492" >Android 6.0:Unable to add window android.view.ViewRootImpl$W@5e2d85a – permission denied <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.<br>     公司项目后期需要设备支持双屏异显，家境贫寒的我表示压根没听过，赶紧码起来，自己建了一个小demo。</p>
<h1 id="初识Presentation"><a href="#初识Presentation" class="headerlink" title="初识Presentation"></a>初识Presentation</h1><p>  我发现了Presentation，安卓官方对于Presentation是这样描述的<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/9276ac5819cf44d092f303408f6fae2c.png"
                      alt="在这里插入图片描述"
                ><br>大致意思就是，是一种特殊的对话框，是为了在辅助显示器上演示内容。</p>
<h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><p>想要使用Presentation，首先得找到自己的辅助屏幕，这里我们使用了安卓官方推荐的第二种方式<br>    创建一个activity，然后在里面写一个内部类继承于Presentation，当然我只是图方便，实际上肯定是要新建一个的</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">private <span class="keyword">class</span> <span class="title class_">DifferentDislay</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Presentation</span> &#123;</span><br><span class="line">    public <span class="title class_">DifferentDislay</span>(<span class="title class_">Context</span> outerContext, <span class="title class_">Display</span> display) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(outerContext, display);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="title class_">DifferentDislay</span>(<span class="title class_">Context</span> outerContext, <span class="title class_">Display</span> display, int theme) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(outerContext, display, theme);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    protected <span class="keyword">void</span> <span class="title function_">onCreate</span>(<span class="params">Bundle savedInstanceState</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">onCreate</span>(savedInstanceState);</span><br><span class="line">        <span class="comment">//这个地方的布局就是你副屏的布局拉！布局我就不贴了</span></span><br><span class="line">        <span class="title function_">setContentView</span>(R.<span class="property">layout</span>.<span class="property">diffrentdisplay</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后开始简单快乐的找副屏，找到过后显示出来</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">DisplayManager</span> mDisplayManager;<span class="comment">//屏幕管理类</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Display</span>[] displays;<span class="comment">//屏幕数组</span></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> int <span class="variable constant_">OVERLAY_PERMISSION_REQ_CODE</span> = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    protected <span class="keyword">void</span> <span class="title function_">onCreate</span>(<span class="params">Bundle savedInstanceState</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">onCreate</span>(savedInstanceState);</span><br><span class="line">        <span class="title function_">setContentView</span>(R.<span class="property">layout</span>.<span class="property">activity_main</span>);</span><br><span class="line">        <span class="title function_">initPresentation</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">void</span> <span class="title function_">initPresentation</span>(<span class="params"></span>) &#123;</span><br><span class="line">        mDisplayManager = (<span class="title class_">DisplayManager</span>) <span class="variable language_">this</span>.<span class="title function_">getSystemService</span>(<span class="title class_">Context</span>.<span class="property">DISPLAY_SERVICE</span>);</span><br><span class="line"></span><br><span class="line">        displays = mDisplayManager.<span class="title function_">getDisplays</span>();</span><br><span class="line"></span><br><span class="line">        <span class="title class_">DifferentDislay</span> mPresentation = <span class="keyword">new</span> <span class="title class_">DifferentDislay</span>(<span class="variable language_">this</span></span><br><span class="line">                , displays[<span class="number">1</span>]);<span class="comment">//displays[1]是副屏</span></span><br><span class="line"></span><br><span class="line">        mPresentation.<span class="title function_">getWindow</span>().<span class="title function_">setType</span>(</span><br><span class="line"></span><br><span class="line">                <span class="title class_">WindowManager</span>.<span class="property">LayoutParams</span>.<span class="property">TYPE_SYSTEM_ALERT</span>);</span><br><span class="line"></span><br><span class="line">        mPresentation.<span class="title function_">show</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>然后就开始血泪填坑史，运行过后果断的闪退了，一看报错，哦，没有加权限嘛，小事，在AndroidManifest.xml中加上权限</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 显示系统窗口权限 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure></div>
<p>ok，再次运行，果断又闪退，等等，我的设备是安卓7.0的，要动态申请，那就申请一个呗。可是我发现我的动态申请权限代码不起作用，最后发现这个权限要跳到单独的页面申请，完全代码如下：</p>
<h1 id="懒人直达"><a href="#懒人直达" class="headerlink" title="懒人直达"></a>懒人直达</h1><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">DisplayManager</span> mDisplayManager;<span class="comment">//屏幕管理类</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Display</span>[] displays;<span class="comment">//屏幕数组</span></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> int <span class="variable constant_">OVERLAY_PERMISSION_REQ_CODE</span> = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    protected <span class="keyword">void</span> <span class="title function_">onCreate</span>(<span class="params">Bundle savedInstanceState</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">onCreate</span>(savedInstanceState);</span><br><span class="line">        <span class="title function_">setContentView</span>(R.<span class="property">layout</span>.<span class="property">activity_main</span>);</span><br><span class="line">        <span class="title function_">requestDrawOverLays</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">void</span> <span class="title function_">initPresentation</span>(<span class="params"></span>) &#123;</span><br><span class="line">        mDisplayManager = (<span class="title class_">DisplayManager</span>) <span class="variable language_">this</span>.<span class="title function_">getSystemService</span>(<span class="title class_">Context</span>.<span class="property">DISPLAY_SERVICE</span>);</span><br><span class="line"></span><br><span class="line">        displays = mDisplayManager.<span class="title function_">getDisplays</span>();</span><br><span class="line"></span><br><span class="line">        <span class="title class_">DifferentDislay</span> mPresentation = <span class="keyword">new</span> <span class="title class_">DifferentDislay</span>(<span class="variable language_">this</span></span><br><span class="line">                , displays[<span class="number">1</span>]);<span class="comment">//displays[1]是副屏  如果只有一个屏幕使用displays[0]</span></span><br><span class="line"></span><br><span class="line">        mPresentation.<span class="title function_">getWindow</span>().<span class="title function_">setType</span>(</span><br><span class="line"></span><br><span class="line">                <span class="title class_">WindowManager</span>.<span class="property">LayoutParams</span>.<span class="property">TYPE_SYSTEM_ALERT</span>);</span><br><span class="line"></span><br><span class="line">        mPresentation.<span class="title function_">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private <span class="keyword">class</span> <span class="title class_">DifferentDislay</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Presentation</span> &#123;</span><br><span class="line">        public <span class="title class_">DifferentDislay</span>(<span class="title class_">Context</span> outerContext, <span class="title class_">Display</span> display) &#123;</span><br><span class="line">            <span class="variable language_">super</span>(outerContext, display);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public <span class="title class_">DifferentDislay</span>(<span class="title class_">Context</span> outerContext, <span class="title class_">Display</span> display, int theme) &#123;</span><br><span class="line">            <span class="variable language_">super</span>(outerContext, display, theme);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="title class_">Override</span></span><br><span class="line">        protected <span class="keyword">void</span> <span class="title function_">onCreate</span>(<span class="params">Bundle savedInstanceState</span>) &#123;</span><br><span class="line">            <span class="variable language_">super</span>.<span class="title function_">onCreate</span>(savedInstanceState);</span><br><span class="line">            <span class="title function_">setContentView</span>(R.<span class="property">layout</span>.<span class="property">diffrentdisplay</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @<span class="title class_">TargetApi</span>(<span class="title class_">Build</span>.<span class="property">VERSION_CODES</span>.<span class="property">M</span>)</span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">requestDrawOverLays</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">Settings</span>.<span class="title function_">canDrawOverlays</span>(<span class="title class_">MainActivity</span>.<span class="property">this</span>)) &#123;</span><br><span class="line">            <span class="title class_">Toast</span>.<span class="title function_">makeText</span>(<span class="variable language_">this</span>, <span class="string">&quot;您还没有打开悬浮窗权限&quot;</span>, <span class="title class_">Toast</span>.<span class="property">LENGTH_SHORT</span>).<span class="title function_">show</span>();</span><br><span class="line">            <span class="comment">//跳转到相应软件的设置页面</span></span><br><span class="line">            <span class="title class_">Intent</span> intent = <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="title class_">Settings</span>.<span class="property">ACTION_MANAGE_OVERLAY_PERMISSION</span>, <span class="title class_">Uri</span>.<span class="title function_">parse</span>(<span class="string">&quot;package:&quot;</span> + <span class="title class_">MainActivity</span>.<span class="property">this</span>.<span class="title function_">getPackageName</span>()));</span><br><span class="line">            <span class="title function_">startActivityForResult</span>(intent, <span class="variable constant_">OVERLAY_PERMISSION_REQ_CODE</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 授权成功之后执行的方法</span></span><br><span class="line">            <span class="title function_">initPresentation</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @<span class="title class_">TargetApi</span>(<span class="title class_">Build</span>.<span class="property">VERSION_CODES</span>.<span class="property">M</span>)</span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    protected <span class="keyword">void</span> <span class="title function_">onActivityResult</span>(<span class="params">int requestCode, int resultCode, Intent data</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">onActivityResult</span>(requestCode, resultCode, data);</span><br><span class="line">        <span class="keyword">if</span> (requestCode == <span class="variable constant_">OVERLAY_PERMISSION_REQ_CODE</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title class_">Settings</span>.<span class="title function_">canDrawOverlays</span>(<span class="variable language_">this</span>)) &#123;</span><br><span class="line">                <span class="title class_">Toast</span>.<span class="title function_">makeText</span>(<span class="variable language_">this</span>, <span class="string">&quot;授权失败&quot;</span>, <span class="title class_">Toast</span>.<span class="property">LENGTH_SHORT</span>).<span class="title function_">show</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title class_">Toast</span>.<span class="title function_">makeText</span>(<span class="variable language_">this</span>, <span class="string">&quot;授权成功&quot;</span>, <span class="title class_">Toast</span>.<span class="property">LENGTH_SHORT</span>).<span class="title function_">show</span>();</span><br><span class="line">                <span class="title function_">initPresentation</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这样，一个简单的双屏异显demo就完成啦，共勉，别忘记加权限哦！</p>
<h1 id="补充（TYPE-APPLICATION-OVERLAY）"><a href="#补充（TYPE-APPLICATION-OVERLAY）" class="headerlink" title="补充（TYPE_APPLICATION_OVERLAY）"></a>补充（TYPE_APPLICATION_OVERLAY）</h1><p>后来的后来，我有一个同事要做类似的功能，我想起来有记录这部分的知识，就将这篇文章分享给她了，她使用了我的源码但是还是报了类似的没有权限的问题，这让我十分的不解,后面经过她的一番努力，发现8.0以上版本的安卓机需要将懒人直达代码中的</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line">mPresentation.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);</span><br></pre></td></tr></table></figure></div>
<p>替换为</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line">mPresentation.getWindow().setType(WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY);</span><br></pre></td></tr></table></figure></div>

<p>所以我们最终将代码更改为如下</p>
<div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">26</span>) &#123;</span><br><span class="line">               getWindow().setType(WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure></div>
<p>算是一个版本适配问题吧</p>
]]></content>
      <categories>
        <category>andorid</category>
      </categories>
      <tags>
        <tag>Presentation</tag>
      </tags>
  </entry>
</search>
